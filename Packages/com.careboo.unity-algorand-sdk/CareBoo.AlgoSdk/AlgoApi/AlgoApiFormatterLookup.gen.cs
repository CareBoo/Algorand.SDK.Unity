//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlgoSdk
{


    public sealed partial class AlgoApiFormatterLookup
    {
        private static void EnsureLookupInitialized()
        {
            AlgoSdk.AlgoApiFormatterLookup.InitLookup();
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Account), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Account>().Assign("address", (AlgoSdk.Account x) => x.Address, (ref AlgoSdk.Account x, AlgoSdk.Address value) => x.Address = value).Assign("amount", (AlgoSdk.Account x) => x.Amount, (ref AlgoSdk.Account x, System.UInt64 value) => x.Amount = value).Assign("amount-without-pending-rewards", (AlgoSdk.Account x) => x.AmountWithoutPendingRewards, (ref AlgoSdk.Account x, System.UInt64 value) => x.AmountWithoutPendingRewards = value).Assign("apps-local-state", (AlgoSdk.Account x) => x.ApplicationsLocalState, (ref AlgoSdk.Account x, AlgoSdk.ApplicationLocalState[] value) => x.ApplicationsLocalState = value, AlgoSdk.ArrayComparer<AlgoSdk.ApplicationLocalState>.Instance).Assign("apps-total-extra-pages", (AlgoSdk.Account x) => x.ApplicationsTotalExtraPages, (ref AlgoSdk.Account x, AlgoSdk.Optional<System.UInt64> value) => x.ApplicationsTotalExtraPages = value).Assign("apps-total-schema", (AlgoSdk.Account x) => x.ApplicationsTotalSchema, (ref AlgoSdk.Account x, AlgoSdk.Optional<AlgoSdk.ApplicationStateSchema> value) => x.ApplicationsTotalSchema = value).Assign("assets", (AlgoSdk.Account x) => x.Assets, (ref AlgoSdk.Account x, AlgoSdk.AssetHolding[] value) => x.Assets = value, AlgoSdk.ArrayComparer<AlgoSdk.AssetHolding>.Instance).Assign("auth-addr", (AlgoSdk.Account x) => x.AuthAddress, (ref AlgoSdk.Account x, AlgoSdk.Optional<AlgoSdk.Address> value) => x.AuthAddress = value).Assign("created-apps", (AlgoSdk.Account x) => x.CreatedApplications, (ref AlgoSdk.Account x, AlgoSdk.Application[] value) => x.CreatedApplications = value, AlgoSdk.ArrayComparer<AlgoSdk.Application>.Instance).Assign("created-assets", (AlgoSdk.Account x) => x.CreatedAssets, (ref AlgoSdk.Account x, AlgoSdk.Asset[] value) => x.CreatedAssets = value, AlgoSdk.ArrayComparer<AlgoSdk.Asset>.Instance).Assign("participation", (AlgoSdk.Account x) => x.Participation, (ref AlgoSdk.Account x, AlgoSdk.Optional<AlgoSdk.AccountParticipation> value) => x.Participation = value).Assign("pending-rewards", (AlgoSdk.Account x) => x.PendingRewards, (ref AlgoSdk.Account x, System.UInt64 value) => x.PendingRewards = value).Assign("reward-base", (AlgoSdk.Account x) => x.RewardBase, (ref AlgoSdk.Account x, AlgoSdk.Optional<System.UInt64> value) => x.RewardBase = value).Assign("rewards", (AlgoSdk.Account x) => x.Rewards, (ref AlgoSdk.Account x, System.UInt64 value) => x.Rewards = value).Assign("round", (AlgoSdk.Account x) => x.Round, (ref AlgoSdk.Account x, System.UInt64 value) => x.Round = value).Assign("sig-type", (AlgoSdk.Account x) => x.SignatureType, (ref AlgoSdk.Account x, AlgoSdk.SignatureType value) => x.SignatureType = value, AlgoSdk.SignatureTypeComparer.Instance).Assign("status", (AlgoSdk.Account x) => x.Status, (ref AlgoSdk.Account x, Unity.Collections.FixedString32Bytes value) => x.Status = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ApplicationLocalState[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.ApplicationLocalState>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetHolding[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.AssetHolding>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Application[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Application>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Asset[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Asset>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AccountParticipation), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AccountParticipation>().Assign("selection-participation-key", (AlgoSdk.AccountParticipation x) => x.SelectionParticipationKey, (ref AlgoSdk.AccountParticipation x, Unity.Collections.FixedString128Bytes value) => x.SelectionParticipationKey = value).Assign("vote-first-valid", (AlgoSdk.AccountParticipation x) => x.VoteFirstValid, (ref AlgoSdk.AccountParticipation x, System.UInt64 value) => x.VoteFirstValid = value).Assign("vote-key-dilution", (AlgoSdk.AccountParticipation x) => x.VoteKeyDilution, (ref AlgoSdk.AccountParticipation x, System.UInt64 value) => x.VoteKeyDilution = value).Assign("vote-last-valid", (AlgoSdk.AccountParticipation x) => x.VoteLastValid, (ref AlgoSdk.AccountParticipation x, System.UInt64 value) => x.VoteLastValid = value).Assign("vote-participation-key", (AlgoSdk.AccountParticipation x) => x.VoteParticipationKey, (ref AlgoSdk.AccountParticipation x, Unity.Collections.FixedString128Bytes value) => x.VoteParticipationKey = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AccountStateDelta), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AccountStateDelta>().Assign("address", (AlgoSdk.AccountStateDelta x) => x.Address, (ref AlgoSdk.AccountStateDelta x, AlgoSdk.Address value) => x.Address = value).Assign("delta", (AlgoSdk.AccountStateDelta x) => x.Delta, (ref AlgoSdk.AccountStateDelta x, AlgoSdk.EvalDeltaKeyValue[] value) => x.Delta = value, AlgoSdk.ArrayComparer<AlgoSdk.EvalDeltaKeyValue>.Instance));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.EvalDeltaKeyValue[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.EvalDeltaKeyValue>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Application), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Application>().Assign("id", (AlgoSdk.Application x) => x.Id, (ref AlgoSdk.Application x, System.UInt64 value) => x.Id = value).Assign("params", (AlgoSdk.Application x) => x.Params, (ref AlgoSdk.Application x, AlgoSdk.ApplicationParams value) => x.Params = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ApplicationLocalState), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ApplicationLocalState>().Assign("id", (AlgoSdk.ApplicationLocalState x) => x.Id, (ref AlgoSdk.ApplicationLocalState x, System.UInt64 value) => x.Id = value).Assign("key-value", (AlgoSdk.ApplicationLocalState x) => x.KeyValues, (ref AlgoSdk.ApplicationLocalState x, AlgoSdk.TealKeyValue[] value) => x.KeyValues = value, AlgoSdk.ArrayComparer<AlgoSdk.TealKeyValue>.Instance).Assign("schema", (AlgoSdk.ApplicationLocalState x) => x.Schema, (ref AlgoSdk.ApplicationLocalState x, AlgoSdk.ApplicationStateSchema value) => x.Schema = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealKeyValue[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.TealKeyValue>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ApplicationParams), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ApplicationParams>().Assign("approval-program", (AlgoSdk.ApplicationParams x) => x.ApprovalProgram, (ref AlgoSdk.ApplicationParams x, System.Byte[] value) => x.ApprovalProgram = value, AlgoSdk.ArrayComparer<byte>.Instance).Assign("clear-state-program", (AlgoSdk.ApplicationParams x) => x.ClearStateProgram, (ref AlgoSdk.ApplicationParams x, System.Byte[] value) => x.ClearStateProgram = value, AlgoSdk.ArrayComparer<byte>.Instance).Assign("creator", (AlgoSdk.ApplicationParams x) => x.Creator, (ref AlgoSdk.ApplicationParams x, AlgoSdk.Address value) => x.Creator = value).Assign("extra-program-pages", (AlgoSdk.ApplicationParams x) => x.ExtraProgramPages, (ref AlgoSdk.ApplicationParams x, AlgoSdk.Optional<System.UInt64> value) => x.ExtraProgramPages = value).Assign("global-state", (AlgoSdk.ApplicationParams x) => x.GlobalState, (ref AlgoSdk.ApplicationParams x, AlgoSdk.TealKeyValue[] value) => x.GlobalState = value, AlgoSdk.ArrayComparer<AlgoSdk.TealKeyValue>.Instance).Assign("global-state-schema", (AlgoSdk.ApplicationParams x) => x.GlobalStateSchema, (ref AlgoSdk.ApplicationParams x, AlgoSdk.Optional<AlgoSdk.ApplicationStateSchema> value) => x.GlobalStateSchema = value).Assign("local-state-schema", (AlgoSdk.ApplicationParams x) => x.LocalStateSchema, (ref AlgoSdk.ApplicationParams x, AlgoSdk.Optional<AlgoSdk.ApplicationStateSchema> value) => x.LocalStateSchema = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(byte[]), new AlgoSdk.Formatters.ArrayFormatter<byte>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ApplicationStateSchema), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ApplicationStateSchema>().Assign("num-byte-slice", (AlgoSdk.ApplicationStateSchema x) => x.NumByteSlices, (ref AlgoSdk.ApplicationStateSchema x, System.UInt64 value) => x.NumByteSlices = value).Assign("num-uint", (AlgoSdk.ApplicationStateSchema x) => x.NumUints, (ref AlgoSdk.ApplicationStateSchema x, System.UInt64 value) => x.NumUints = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Asset), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Asset>().Assign("index", (AlgoSdk.Asset x) => x.Index, (ref AlgoSdk.Asset x, System.UInt64 value) => x.Index = value).Assign("params", (AlgoSdk.Asset x) => x.Params, (ref AlgoSdk.Asset x, AlgoSdk.AssetParams value) => x.Params = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetHolding), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetHolding>().Assign("amount", (AlgoSdk.AssetHolding x) => x.Amount, (ref AlgoSdk.AssetHolding x, System.UInt64 value) => x.Amount = value).Assign("asset-id", (AlgoSdk.AssetHolding x) => x.AssetId, (ref AlgoSdk.AssetHolding x, System.UInt64 value) => x.AssetId = value).Assign("creator", (AlgoSdk.AssetHolding x) => x.Creator, (ref AlgoSdk.AssetHolding x, AlgoSdk.Address value) => x.Creator = value).Assign("is-frozen", (AlgoSdk.AssetHolding x) => x.IsFrozen, (ref AlgoSdk.AssetHolding x, System.Boolean value) => x.IsFrozen = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetParams), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetParams>().Assign("clawback", (AlgoSdk.AssetParams x) => x.Clawback, (ref AlgoSdk.AssetParams x, AlgoSdk.Address value) => x.Clawback = value).Assign("creator", (AlgoSdk.AssetParams x) => x.Creator, (ref AlgoSdk.AssetParams x, AlgoSdk.Address value) => x.Creator = value).Assign("decimals", (AlgoSdk.AssetParams x) => x.Decimals, (ref AlgoSdk.AssetParams x, System.UInt64 value) => x.Decimals = value).Assign("default-frozen", (AlgoSdk.AssetParams x) => x.DefaultFrozen, (ref AlgoSdk.AssetParams x, AlgoSdk.Optional<System.Boolean> value) => x.DefaultFrozen = value).Assign("freeze", (AlgoSdk.AssetParams x) => x.Freeze, (ref AlgoSdk.AssetParams x, AlgoSdk.Address value) => x.Freeze = value).Assign("manager", (AlgoSdk.AssetParams x) => x.Manager, (ref AlgoSdk.AssetParams x, AlgoSdk.Address value) => x.Manager = value).Assign("metadata-hash", (AlgoSdk.AssetParams x) => x.MetadataHash, (ref AlgoSdk.AssetParams x, Unity.Collections.FixedString128Bytes value) => x.MetadataHash = value).Assign("name", (AlgoSdk.AssetParams x) => x.Name, (ref AlgoSdk.AssetParams x, Unity.Collections.FixedString64Bytes value) => x.Name = value).Assign("reserve", (AlgoSdk.AssetParams x) => x.Reserve, (ref AlgoSdk.AssetParams x, AlgoSdk.Address value) => x.Reserve = value).Assign("total", (AlgoSdk.AssetParams x) => x.Total, (ref AlgoSdk.AssetParams x, System.UInt64 value) => x.Total = value).Assign("unit-name", (AlgoSdk.AssetParams x) => x.UnitName, (ref AlgoSdk.AssetParams x, Unity.Collections.FixedString64Bytes value) => x.UnitName = value).Assign("url", (AlgoSdk.AssetParams x) => x.Url, (ref AlgoSdk.AssetParams x, Unity.Collections.FixedString512Bytes value) => x.Url = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Block), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Block>().Assign("block", (AlgoSdk.Block x) => x.HeaderData, (ref AlgoSdk.Block x, AlgoSdk.Block.Header value) => x.HeaderData = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BlockTransaction), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.BlockTransaction>().Assign("txn", (AlgoSdk.BlockTransaction x) => x.Transaction, (ref AlgoSdk.BlockTransaction x, AlgoSdk.RawTransaction value) => x.Transaction = value).Assign("sig", (AlgoSdk.BlockTransaction x) => x.Sig, (ref AlgoSdk.BlockTransaction x, AlgoSdk.Signature value) => x.Sig = value).Assign("msig", (AlgoSdk.BlockTransaction x) => x.MultiSig, (ref AlgoSdk.BlockTransaction x, AlgoSdk.MultiSig value) => x.MultiSig = value).Assign("lsig", (AlgoSdk.BlockTransaction x) => x.LogicSig, (ref AlgoSdk.BlockTransaction x, AlgoSdk.LogicSig value) => x.LogicSig = value).Assign("hgi", (AlgoSdk.BlockTransaction x) => x.Hgi, (ref AlgoSdk.BlockTransaction x, AlgoSdk.Optional<System.Boolean> value) => x.Hgi = value).Assign("rr", (AlgoSdk.BlockTransaction x) => x.Rr, (ref AlgoSdk.BlockTransaction x, System.UInt64 value) => x.Rr = value).Assign("rs", (AlgoSdk.BlockTransaction x) => x.Rs, (ref AlgoSdk.BlockTransaction x, System.UInt64 value) => x.Rs = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BuildVersion), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.BuildVersion>().Assign("branch", (AlgoSdk.BuildVersion x) => x.Branch, (ref AlgoSdk.BuildVersion x, Unity.Collections.FixedString64Bytes value) => x.Branch = value).Assign("build_number", (AlgoSdk.BuildVersion x) => x.BuildNumber, (ref AlgoSdk.BuildVersion x, System.UInt64 value) => x.BuildNumber = value).Assign("channel", (AlgoSdk.BuildVersion x) => x.Channel, (ref AlgoSdk.BuildVersion x, Unity.Collections.FixedString64Bytes value) => x.Channel = value).Assign("commit_hash", (AlgoSdk.BuildVersion x) => x.CommitHash, (ref AlgoSdk.BuildVersion x, Unity.Collections.FixedString128Bytes value) => x.CommitHash = value).Assign("major", (AlgoSdk.BuildVersion x) => x.Major, (ref AlgoSdk.BuildVersion x, System.UInt64 value) => x.Major = value).Assign("minor", (AlgoSdk.BuildVersion x) => x.Minor, (ref AlgoSdk.BuildVersion x, System.UInt64 value) => x.Minor = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.CatchupMessage), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.CatchupMessage>().Assign("catchup-message", (AlgoSdk.CatchupMessage x) => x.Message, (ref AlgoSdk.CatchupMessage x, Unity.Collections.FixedString512Bytes value) => x.Message = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DryrunRequest>().Assign("accounts", (AlgoSdk.DryrunRequest x) => x.Accounts, (ref AlgoSdk.DryrunRequest x, AlgoSdk.Account[] value) => x.Accounts = value, AlgoSdk.ArrayComparer<AlgoSdk.Account>.Instance).Assign("apps", (AlgoSdk.DryrunRequest x) => x.Applications, (ref AlgoSdk.DryrunRequest x, AlgoSdk.Application[] value) => x.Applications = value, AlgoSdk.ArrayComparer<AlgoSdk.Application>.Instance).Assign("latest-timestamp", (AlgoSdk.DryrunRequest x) => x.LatestTimestamp, (ref AlgoSdk.DryrunRequest x, System.UInt64 value) => x.LatestTimestamp = value).Assign("protocol-version", (AlgoSdk.DryrunRequest x) => x.ProtocolVersion, (ref AlgoSdk.DryrunRequest x, Unity.Collections.FixedString64Bytes value) => x.ProtocolVersion = value).Assign("round", (AlgoSdk.DryrunRequest x) => x.Round, (ref AlgoSdk.DryrunRequest x, System.UInt64 value) => x.Round = value).Assign("sources", (AlgoSdk.DryrunRequest x) => x.Sources, (ref AlgoSdk.DryrunRequest x, AlgoSdk.DryrunSource[] value) => x.Sources = value, AlgoSdk.ArrayComparer<AlgoSdk.DryrunSource>.Instance).Assign("txns", (AlgoSdk.DryrunRequest x) => x.Transactions, (ref AlgoSdk.DryrunRequest x, AlgoSdk.RawTransaction[] value) => x.Transactions = value, AlgoSdk.ArrayComparer<AlgoSdk.RawTransaction>.Instance));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Account[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Account>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunSource[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.DryrunSource>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.RawTransaction[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.RawTransaction>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunResults), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DryrunResults>().Assign("error", (AlgoSdk.DryrunResults x) => x.Error, (ref AlgoSdk.DryrunResults x, System.String value) => x.Error = value).Assign("protocol-version", (AlgoSdk.DryrunResults x) => x.ProtocolVersion, (ref AlgoSdk.DryrunResults x, Unity.Collections.FixedString128Bytes value) => x.ProtocolVersion = value).Assign("txns", (AlgoSdk.DryrunResults x) => x.Txns, (ref AlgoSdk.DryrunResults x, AlgoSdk.DryrunTxnResult[] value) => x.Txns = value, AlgoSdk.ArrayComparer<AlgoSdk.DryrunTxnResult>.Instance));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunTxnResult[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.DryrunTxnResult>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunSource), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DryrunSource>().Assign("app-index", (AlgoSdk.DryrunSource x) => x.AppIndex, (ref AlgoSdk.DryrunSource x, System.UInt64 value) => x.AppIndex = value).Assign("field-name", (AlgoSdk.DryrunSource x) => x.FieldName, (ref AlgoSdk.DryrunSource x, Unity.Collections.FixedString32Bytes value) => x.FieldName = value).Assign("source", (AlgoSdk.DryrunSource x) => x.Source, (ref AlgoSdk.DryrunSource x, System.String value) => x.Source = value).Assign("txn-index", (AlgoSdk.DryrunSource x) => x.TransactionIndex, (ref AlgoSdk.DryrunSource x, System.UInt64 value) => x.TransactionIndex = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunState), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DryrunState>().Assign("error", (AlgoSdk.DryrunState x) => x.Error, (ref AlgoSdk.DryrunState x, Unity.Collections.FixedString128Bytes value) => x.Error = value).Assign("line", (AlgoSdk.DryrunState x) => x.Line, (ref AlgoSdk.DryrunState x, System.UInt64 value) => x.Line = value).Assign("pc", (AlgoSdk.DryrunState x) => x.ProgramCounter, (ref AlgoSdk.DryrunState x, System.UInt64 value) => x.ProgramCounter = value).Assign("scratch", (AlgoSdk.DryrunState x) => x.Scratch, (ref AlgoSdk.DryrunState x, AlgoSdk.TealValue[] value) => x.Scratch = value, AlgoSdk.ArrayComparer<AlgoSdk.TealValue>.Instance).Assign("stack", (AlgoSdk.DryrunState x) => x.Stack, (ref AlgoSdk.DryrunState x, AlgoSdk.TealValue[] value) => x.Stack = value, AlgoSdk.ArrayComparer<AlgoSdk.TealValue>.Instance));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealValue[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.TealValue>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunTxnResult), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DryrunTxnResult>().Assign("app-call-messages", (AlgoSdk.DryrunTxnResult x) => x.AppCallMessages, (ref AlgoSdk.DryrunTxnResult x, Unity.Collections.FixedString128Bytes[] value) => x.AppCallMessages = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedString128Bytes>.Instance).Assign("app-call-trace", (AlgoSdk.DryrunTxnResult x) => x.AppCallTrace, (ref AlgoSdk.DryrunTxnResult x, AlgoSdk.DryrunState[] value) => x.AppCallTrace = value, AlgoSdk.ArrayComparer<AlgoSdk.DryrunState>.Instance).Assign("disassembly", (AlgoSdk.DryrunTxnResult x) => x.Disassembly, (ref AlgoSdk.DryrunTxnResult x, Unity.Collections.FixedString128Bytes[] value) => x.Disassembly = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedString128Bytes>.Instance).Assign("global-delta", (AlgoSdk.DryrunTxnResult x) => x.GlobalDelta, (ref AlgoSdk.DryrunTxnResult x, AlgoSdk.EvalDeltaKeyValue[] value) => x.GlobalDelta = value, AlgoSdk.ArrayComparer<AlgoSdk.EvalDeltaKeyValue>.Instance).Assign("local-deltas", (AlgoSdk.DryrunTxnResult x) => x.LocalDeltas, (ref AlgoSdk.DryrunTxnResult x, AlgoSdk.AccountStateDelta[] value) => x.LocalDeltas = value, AlgoSdk.ArrayComparer<AlgoSdk.AccountStateDelta>.Instance).Assign("logic-sig-messages", (AlgoSdk.DryrunTxnResult x) => x.LogicSigMessages, (ref AlgoSdk.DryrunTxnResult x, Unity.Collections.FixedString128Bytes[] value) => x.LogicSigMessages = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedString128Bytes>.Instance).Assign("logic-sig-trace", (AlgoSdk.DryrunTxnResult x) => x.LogicSigTrace, (ref AlgoSdk.DryrunTxnResult x, AlgoSdk.DryrunState[] value) => x.LogicSigTrace = value, AlgoSdk.ArrayComparer<AlgoSdk.DryrunState>.Instance));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(Unity.Collections.FixedString128Bytes[]), new AlgoSdk.Formatters.ArrayFormatter<Unity.Collections.FixedString128Bytes>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunState[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.DryrunState>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AccountStateDelta[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.AccountStateDelta>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ErrorResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ErrorResponse>().Assign("data", (AlgoSdk.ErrorResponse x) => x.Data, (ref AlgoSdk.ErrorResponse x, System.String value) => x.Data = value).Assign("message", (AlgoSdk.ErrorResponse x) => x.Message, (ref AlgoSdk.ErrorResponse x, System.String value) => x.Message = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.EvalDelta), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.EvalDelta>().Assign("action", (AlgoSdk.EvalDelta x) => x.Action, (ref AlgoSdk.EvalDelta x, AlgoSdk.EvalDeltaAction value) => x.Action = value, AlgoSdk.EvalDeltaActionComparer.Instance).Assign("bytes", (AlgoSdk.EvalDelta x) => x.Bytes, (ref AlgoSdk.EvalDelta x, AlgoSdk.TealBytes value) => x.Bytes = value).Assign("uint", (AlgoSdk.EvalDelta x) => x.UInt, (ref AlgoSdk.EvalDelta x, System.UInt64 value) => x.UInt = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.EvalDeltaKeyValue), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.EvalDeltaKeyValue>().Assign("key", (AlgoSdk.EvalDeltaKeyValue x) => x.Key, (ref AlgoSdk.EvalDeltaKeyValue x, Unity.Collections.FixedString64Bytes value) => x.Key = value).Assign("value", (AlgoSdk.EvalDeltaKeyValue x) => x.Value, (ref AlgoSdk.EvalDeltaKeyValue x, AlgoSdk.EvalDelta value) => x.Value = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Block.Header), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Block.Header>().Assign("earn", (AlgoSdk.Block.Header x) => x.Earn, (ref AlgoSdk.Block.Header x, System.UInt64 value) => x.Earn = value).Assign("fees", (AlgoSdk.Block.Header x) => x.Fees, (ref AlgoSdk.Block.Header x, AlgoSdk.Address value) => x.Fees = value).Assign("frac", (AlgoSdk.Block.Header x) => x.Fraction, (ref AlgoSdk.Block.Header x, System.UInt64 value) => x.Fraction = value).Assign("gen", (AlgoSdk.Block.Header x) => x.GenesisId, (ref AlgoSdk.Block.Header x, Unity.Collections.FixedString64Bytes value) => x.GenesisId = value).Assign("gh", (AlgoSdk.Block.Header x) => x.GenesisHash, (ref AlgoSdk.Block.Header x, AlgoSdk.GenesisHash value) => x.GenesisHash = value).Assign("prev", (AlgoSdk.Block.Header x) => x.PreviousBlock, (ref AlgoSdk.Block.Header x, Unity.Collections.FixedString128Bytes value) => x.PreviousBlock = value).Assign("proto", (AlgoSdk.Block.Header x) => x.Proto, (ref AlgoSdk.Block.Header x, Unity.Collections.FixedString128Bytes value) => x.Proto = value).Assign("rate", (AlgoSdk.Block.Header x) => x.Rate, (ref AlgoSdk.Block.Header x, System.UInt64 value) => x.Rate = value).Assign("rnd", (AlgoSdk.Block.Header x) => x.Round, (ref AlgoSdk.Block.Header x, System.UInt64 value) => x.Round = value).Assign("rwcalr", (AlgoSdk.Block.Header x) => x.RwCalr, (ref AlgoSdk.Block.Header x, System.UInt64 value) => x.RwCalr = value).Assign("rwd", (AlgoSdk.Block.Header x) => x.Rwd, (ref AlgoSdk.Block.Header x, AlgoSdk.Address value) => x.Rwd = value).Assign("seed", (AlgoSdk.Block.Header x) => x.Seed, (ref AlgoSdk.Block.Header x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Seed = value).Assign("tc", (AlgoSdk.Block.Header x) => x.Tc, (ref AlgoSdk.Block.Header x, System.UInt64 value) => x.Tc = value).Assign("ts", (AlgoSdk.Block.Header x) => x.Ts, (ref AlgoSdk.Block.Header x, System.UInt64 value) => x.Ts = value).Assign("txn", (AlgoSdk.Block.Header x) => x.Txn, (ref AlgoSdk.Block.Header x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Txn = value).Assign("txns", (AlgoSdk.Block.Header x) => x.Txns, (ref AlgoSdk.Block.Header x, AlgoSdk.BlockTransaction[] value) => x.Txns = value, AlgoSdk.ArrayComparer<AlgoSdk.BlockTransaction>.Instance));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BlockTransaction[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.BlockTransaction>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.LedgerSupply), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.LedgerSupply>().Assign("current_round", (AlgoSdk.LedgerSupply x) => x.Round, (ref AlgoSdk.LedgerSupply x, System.UInt64 value) => x.Round = value).Assign("online-money", (AlgoSdk.LedgerSupply x) => x.OnlineMoney, (ref AlgoSdk.LedgerSupply x, System.UInt64 value) => x.OnlineMoney = value).Assign("total-money", (AlgoSdk.LedgerSupply x) => x.TotalMoney, (ref AlgoSdk.LedgerSupply x, System.UInt64 value) => x.TotalMoney = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.LogicSig), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.LogicSig>().Assign("l", (AlgoSdk.LogicSig x) => x.Program, (ref AlgoSdk.LogicSig x, System.Byte[] value) => x.Program = value, AlgoSdk.ArrayComparer<byte>.Instance).Assign("arg", (AlgoSdk.LogicSig x) => x.Args, (ref AlgoSdk.LogicSig x, Unity.Collections.FixedList128Bytes<System.Byte>[] value) => x.Args = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedList128Bytes<byte>>.Instance).Assign("sig", (AlgoSdk.LogicSig x) => x.Sig, (ref AlgoSdk.LogicSig x, AlgoSdk.Signature value) => x.Sig = value).Assign("msig", (AlgoSdk.LogicSig x) => x.MultiSig, (ref AlgoSdk.LogicSig x, AlgoSdk.MultiSig value) => x.MultiSig = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(Unity.Collections.FixedList128Bytes<byte>[]), new AlgoSdk.Formatters.ArrayFormatter<Unity.Collections.FixedList128Bytes<byte>>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.MerkleProof), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.MerkleProof>().Assign("idx", (AlgoSdk.MerkleProof x) => x.TransactionIndex, (ref AlgoSdk.MerkleProof x, System.UInt64 value) => x.TransactionIndex = value).Assign("proof", (AlgoSdk.MerkleProof x) => x.Proof, (ref AlgoSdk.MerkleProof x, System.String value) => x.Proof = value).Assign("stibhash", (AlgoSdk.MerkleProof x) => x.SignedTransactionHash, (ref AlgoSdk.MerkleProof x, System.String value) => x.SignedTransactionHash = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.PendingTransaction), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.PendingTransaction>().Assign("application-index", (AlgoSdk.PendingTransaction x) => x.ApplicationIndex, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.ApplicationIndex = value).Assign("asset-closing-amount", (AlgoSdk.PendingTransaction x) => x.AssetClosingAmount, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.AssetClosingAmount = value).Assign("asset-index", (AlgoSdk.PendingTransaction x) => x.AssetIndex, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.AssetIndex = value).Assign("close-rewards", (AlgoSdk.PendingTransaction x) => x.CloseRewards, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.CloseRewards = value).Assign("closing-amount", (AlgoSdk.PendingTransaction x) => x.ClosingAmount, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.ClosingAmount = value).Assign("confirmed-round", (AlgoSdk.PendingTransaction x) => x.ConfirmedRound, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.ConfirmedRound = value).Assign("global-state-delta", (AlgoSdk.PendingTransaction x) => x.GlobalStateDelta, (ref AlgoSdk.PendingTransaction x, AlgoSdk.EvalDeltaKeyValue[] value) => x.GlobalStateDelta = value, AlgoSdk.ArrayComparer<AlgoSdk.EvalDeltaKeyValue>.Instance).Assign("local-state-delta", (AlgoSdk.PendingTransaction x) => x.LocalStateDelta, (ref AlgoSdk.PendingTransaction x, AlgoSdk.AccountStateDelta[] value) => x.LocalStateDelta = value, AlgoSdk.ArrayComparer<AlgoSdk.AccountStateDelta>.Instance).Assign("pool-error", (AlgoSdk.PendingTransaction x) => x.PoolError, (ref AlgoSdk.PendingTransaction x, Unity.Collections.FixedString128Bytes value) => x.PoolError = value).Assign("receiver-rewards", (AlgoSdk.PendingTransaction x) => x.ReceiverRewards, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.ReceiverRewards = value).Assign("sender-rewards", (AlgoSdk.PendingTransaction x) => x.SenderRewards, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.SenderRewards = value).Assign("txn", (AlgoSdk.PendingTransaction x) => x.Transaction, (ref AlgoSdk.PendingTransaction x, AlgoSdk.RawSignedTransaction value) => x.Transaction = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.PendingTransactions), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.PendingTransactions>().Assign("top-transactions", (AlgoSdk.PendingTransactions x) => x.TopTransactions, (ref AlgoSdk.PendingTransactions x, AlgoSdk.PendingTransaction[] value) => x.TopTransactions = value, AlgoSdk.ArrayComparer<AlgoSdk.PendingTransaction>.Instance).Assign("total-transactions", (AlgoSdk.PendingTransactions x) => x.TotalTransactions, (ref AlgoSdk.PendingTransactions x, System.UInt64 value) => x.TotalTransactions = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.PendingTransaction[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.PendingTransaction>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.RawSignedTransaction), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.RawSignedTransaction>().Assign("txn", (AlgoSdk.RawSignedTransaction x) => x.Transaction, (ref AlgoSdk.RawSignedTransaction x, AlgoSdk.RawTransaction value) => x.Transaction = value).Assign("sig", (AlgoSdk.RawSignedTransaction x) => x.Sig, (ref AlgoSdk.RawSignedTransaction x, AlgoSdk.Signature value) => x.Sig = value).Assign("msig", (AlgoSdk.RawSignedTransaction x) => x.MultiSig, (ref AlgoSdk.RawSignedTransaction x, AlgoSdk.MultiSig value) => x.MultiSig = value).Assign("lsig", (AlgoSdk.RawSignedTransaction x) => x.LogicSig, (ref AlgoSdk.RawSignedTransaction x, AlgoSdk.LogicSig value) => x.LogicSig = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.RawTransaction), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.RawTransaction>().Assign("caid", (AlgoSdk.RawTransaction x) => x.ConfigAsset, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.ConfigAsset = value).Assign("apar", (AlgoSdk.RawTransaction x) => x.AssetParams, (ref AlgoSdk.RawTransaction x, AlgoSdk.AssetParams value) => x.AssetParams = value).Assign("fadd", (AlgoSdk.RawTransaction x) => x.FreezeAccount, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.FreezeAccount = value).Assign("faid", (AlgoSdk.RawTransaction x) => x.FreezeAsset, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.FreezeAsset = value).Assign("afrz", (AlgoSdk.RawTransaction x) => x.AssetFrozen, (ref AlgoSdk.RawTransaction x, AlgoSdk.Optional<System.Boolean> value) => x.AssetFrozen = value).Assign("xaid", (AlgoSdk.RawTransaction x) => x.XferAsset, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.XferAsset = value).Assign("aamt", (AlgoSdk.RawTransaction x) => x.AssetAmount, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.AssetAmount = value).Assign("asnd", (AlgoSdk.RawTransaction x) => x.AssetSender, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.AssetSender = value).Assign("arcv", (AlgoSdk.RawTransaction x) => x.AssetReceiver, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.AssetReceiver = value).Assign("aclose", (AlgoSdk.RawTransaction x) => x.AssetCloseTo, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.AssetCloseTo = value).Assign("fee", (AlgoSdk.RawTransaction x) => x.Fee, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.Fee = value).Assign("fv", (AlgoSdk.RawTransaction x) => x.FirstValidRound, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.FirstValidRound = value).Assign("gh", (AlgoSdk.RawTransaction x) => x.GenesisHash, (ref AlgoSdk.RawTransaction x, AlgoSdk.GenesisHash value) => x.GenesisHash = value).Assign("lv", (AlgoSdk.RawTransaction x) => x.LastValidRound, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.LastValidRound = value).Assign("snd", (AlgoSdk.RawTransaction x) => x.Sender, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.Sender = value).Assign("type", (AlgoSdk.RawTransaction x) => x.TransactionType, (ref AlgoSdk.RawTransaction x, AlgoSdk.TransactionType value) => x.TransactionType = value, AlgoSdk.TransactionTypeComparer.Instance).Assign("gen", (AlgoSdk.RawTransaction x) => x.GenesisId, (ref AlgoSdk.RawTransaction x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value).Assign("grp", (AlgoSdk.RawTransaction x) => x.Group, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.Group = value).Assign("lx", (AlgoSdk.RawTransaction x) => x.Lease, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.Lease = value).Assign("note", (AlgoSdk.RawTransaction x) => x.Note, (ref AlgoSdk.RawTransaction x, System.Byte[] value) => x.Note = value, AlgoSdk.ArrayComparer<byte>.Instance).Assign("rekey", (AlgoSdk.RawTransaction x) => x.RekeyTo, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.RekeyTo = value).Assign("rcv", (AlgoSdk.RawTransaction x) => x.Receiver, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.Receiver = value).Assign("amt", (AlgoSdk.RawTransaction x) => x.Amount, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.Amount = value).Assign("close", (AlgoSdk.RawTransaction x) => x.CloseRemainderTo, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.CloseRemainderTo = value).Assign("votekey", (AlgoSdk.RawTransaction x) => x.VotePk, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address value) => x.VotePk = value).Assign("selkey", (AlgoSdk.RawTransaction x) => x.SelectionPk, (ref AlgoSdk.RawTransaction x, AlgoSdk.VrfPubkey value) => x.SelectionPk = value).Assign("votefst", (AlgoSdk.RawTransaction x) => x.VoteFirst, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.VoteFirst = value).Assign("votelst", (AlgoSdk.RawTransaction x) => x.VoteLast, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.VoteLast = value).Assign("votekd", (AlgoSdk.RawTransaction x) => x.VoteKeyDilution, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.VoteKeyDilution = value).Assign("nonpart", (AlgoSdk.RawTransaction x) => x.NonParticipation, (ref AlgoSdk.RawTransaction x, AlgoSdk.Optional<System.Boolean> value) => x.NonParticipation = value).Assign("apid", (AlgoSdk.RawTransaction x) => x.ApplicationId, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.ApplicationId = value).Assign("apan", (AlgoSdk.RawTransaction x) => x.OnComplete, (ref AlgoSdk.RawTransaction x, System.UInt64 value) => x.OnComplete = value).Assign("apat", (AlgoSdk.RawTransaction x) => x.Accounts, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address[] value) => x.Accounts = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance).Assign("apap", (AlgoSdk.RawTransaction x) => x.ApprovalProgram, (ref AlgoSdk.RawTransaction x, System.Byte[] value) => x.ApprovalProgram = value, AlgoSdk.ArrayComparer<byte>.Instance).Assign("apaa", (AlgoSdk.RawTransaction x) => x.AppArguments, (ref AlgoSdk.RawTransaction x, System.Byte[] value) => x.AppArguments = value, AlgoSdk.ArrayComparer<byte>.Instance).Assign("apsu", (AlgoSdk.RawTransaction x) => x.ClearStateProgram, (ref AlgoSdk.RawTransaction x, System.Byte[] value) => x.ClearStateProgram = value, AlgoSdk.ArrayComparer<byte>.Instance).Assign("apfa", (AlgoSdk.RawTransaction x) => x.ForeignApps, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address[] value) => x.ForeignApps = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance).Assign("apas", (AlgoSdk.RawTransaction x) => x.ForeignAssets, (ref AlgoSdk.RawTransaction x, AlgoSdk.Address[] value) => x.ForeignAssets = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance).Assign("apgs", (AlgoSdk.RawTransaction x) => x.GlobalStateSchema, (ref AlgoSdk.RawTransaction x, AlgoSdk.StateSchema value) => x.GlobalStateSchema = value).Assign("apls", (AlgoSdk.RawTransaction x) => x.LocalStateSchema, (ref AlgoSdk.RawTransaction x, AlgoSdk.StateSchema value) => x.LocalStateSchema = value).Assign("apep", (AlgoSdk.RawTransaction x) => x.ExtraProgramPages, (ref AlgoSdk.RawTransaction x, AlgoSdk.StateSchema value) => x.ExtraProgramPages = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Address[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Address>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Status), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Status>().Assign("catchpoint", (AlgoSdk.Status x) => x.Catchpoint, (ref AlgoSdk.Status x, System.String value) => x.Catchpoint = value).Assign("catchpoint-acquired-blocks", (AlgoSdk.Status x) => x.CatchpointAcquiredBlocks, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchpointAcquiredBlocks = value).Assign("catchpoint-processed-accounts", (AlgoSdk.Status x) => x.CatchpointProcessedAmounts, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchpointProcessedAmounts = value).Assign("catchpoint-total-accounts", (AlgoSdk.Status x) => x.CatchpointTotalAccounts, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchpointTotalAccounts = value).Assign("catchpoint-total-blocks", (AlgoSdk.Status x) => x.CatchpointTotalBlocks, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchpointTotalBlocks = value).Assign("catchpoint-verified-accounts", (AlgoSdk.Status x) => x.CatchpointVerifiedAccounts, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchpointVerifiedAccounts = value).Assign("catchup-time", (AlgoSdk.Status x) => x.CatchupTime, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchupTime = value).Assign("last-catchpoint", (AlgoSdk.Status x) => x.LastCatchpoint, (ref AlgoSdk.Status x, System.String value) => x.LastCatchpoint = value).Assign("last-round", (AlgoSdk.Status x) => x.LastRound, (ref AlgoSdk.Status x, System.UInt64 value) => x.LastRound = value).Assign("last-version", (AlgoSdk.Status x) => x.LastVersion, (ref AlgoSdk.Status x, System.String value) => x.LastVersion = value).Assign("next-version", (AlgoSdk.Status x) => x.NextVersion, (ref AlgoSdk.Status x, System.String value) => x.NextVersion = value).Assign("next-version-round", (AlgoSdk.Status x) => x.NextVersionRound, (ref AlgoSdk.Status x, System.UInt64 value) => x.NextVersionRound = value).Assign("next-version-supported", (AlgoSdk.Status x) => x.NextVersionSupported, (ref AlgoSdk.Status x, System.Boolean value) => x.NextVersionSupported = value).Assign("stopped-at-unsupported-round", (AlgoSdk.Status x) => x.StoppedAtUnsupportedRound, (ref AlgoSdk.Status x, System.Boolean value) => x.StoppedAtUnsupportedRound = value).Assign("time-since-last-round", (AlgoSdk.Status x) => x.TimeSinceLastRound, (ref AlgoSdk.Status x, System.UInt64 value) => x.TimeSinceLastRound = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealCompilationResult), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TealCompilationResult>().Assign("hash", (AlgoSdk.TealCompilationResult x) => x.Hash, (ref AlgoSdk.TealCompilationResult x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Hash = value).Assign("result", (AlgoSdk.TealCompilationResult x) => x.BytesBase64, (ref AlgoSdk.TealCompilationResult x, System.String value) => x.BytesBase64 = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealKeyValue), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TealKeyValue>().Assign("key", (AlgoSdk.TealKeyValue x) => x.Key, (ref AlgoSdk.TealKeyValue x, Unity.Collections.FixedString128Bytes value) => x.Key = value).Assign("value", (AlgoSdk.TealKeyValue x) => x.Value, (ref AlgoSdk.TealKeyValue x, AlgoSdk.TealValue value) => x.Value = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionParams), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TransactionParams>().Assign("consensus-version", (AlgoSdk.TransactionParams x) => x.ConsensusVersion, (ref AlgoSdk.TransactionParams x, Unity.Collections.FixedString128Bytes value) => x.ConsensusVersion = value).Assign("fee", (AlgoSdk.TransactionParams x) => x.Fee, (ref AlgoSdk.TransactionParams x, System.UInt64 value) => x.Fee = value).Assign("genesis-hash", (AlgoSdk.TransactionParams x) => x.GenesisHash, (ref AlgoSdk.TransactionParams x, AlgoSdk.GenesisHash value) => x.GenesisHash = value).Assign("genesis-id", (AlgoSdk.TransactionParams x) => x.GenesisId, (ref AlgoSdk.TransactionParams x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value).Assign("last-round", (AlgoSdk.TransactionParams x) => x.LastRound, (ref AlgoSdk.TransactionParams x, System.UInt64 value) => x.LastRound = value).Assign("min-fee", (AlgoSdk.TransactionParams x) => x.MinFee, (ref AlgoSdk.TransactionParams x, System.UInt64 value) => x.MinFee = value));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Version), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Version>().Assign("build", (AlgoSdk.Version x) => x.Build, (ref AlgoSdk.Version x, AlgoSdk.BuildVersion value) => x.Build = value).Assign("genesis_hash_b64", (AlgoSdk.Version x) => x.GenesisHashBase64, (ref AlgoSdk.Version x, Unity.Collections.FixedString64Bytes value) => x.GenesisHashBase64 = value).Assign("genesis_id", (AlgoSdk.Version x) => x.GenesisId, (ref AlgoSdk.Version x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value).Assign("versions", (AlgoSdk.Version x) => x.Versions, (ref AlgoSdk.Version x, Unity.Collections.FixedString32Bytes[] value) => x.Versions = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedString32Bytes>.Instance));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(Unity.Collections.FixedString32Bytes[]), new AlgoSdk.Formatters.ArrayFormatter<Unity.Collections.FixedString32Bytes>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Address), new AlgoSdk.Formatters.AddressFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.EvalDeltaAction), new AlgoSdk.Formatters.EnumFormatter<AlgoSdk.EvalDeltaAction>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.GenesisHash), new AlgoSdk.Formatters.GenesisHashFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Optional<bool>), new AlgoSdk.Formatters.OptionalFormatter<bool>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Optional<ulong>), new AlgoSdk.Formatters.OptionalFormatter<ulong>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Optional<AlgoSdk.Address>), new AlgoSdk.Formatters.OptionalFormatter<AlgoSdk.Address>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Optional<AlgoSdk.AccountParticipation>), new AlgoSdk.Formatters.OptionalFormatter<AlgoSdk.AccountParticipation>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Optional<AlgoSdk.ApplicationStateSchema>), new AlgoSdk.Formatters.OptionalFormatter<AlgoSdk.ApplicationStateSchema>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Signature), new AlgoSdk.Formatters.ByteArrayFormatter<AlgoSdk.Signature>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignedTransaction<AlgoSdk.Transaction.Payment>), new AlgoSdk.Formatters.SignedTransactionFormatter<AlgoSdk.Transaction.Payment>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignedTransaction<AlgoSdk.Transaction.AssetConfiguration>), new AlgoSdk.Formatters.SignedTransactionFormatter<AlgoSdk.Transaction.AssetConfiguration>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignedTransaction<AlgoSdk.Transaction.AssetFreeze>), new AlgoSdk.Formatters.SignedTransactionFormatter<AlgoSdk.Transaction.AssetFreeze>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignedTransaction<AlgoSdk.Transaction.AssetTransfer>), new AlgoSdk.Formatters.SignedTransactionFormatter<AlgoSdk.Transaction.AssetTransfer>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealBytes), new AlgoSdk.Formatters.ByteArrayFormatter<AlgoSdk.TealBytes>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealValue), new AlgoSdk.MsgPack.Formatters.TealValueFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealValueType), new AlgoSdk.Formatters.EnumFormatter<AlgoSdk.TealValueType>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionId), new AlgoSdk.Formatters.TransactionIdFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionType), new AlgoSdk.Formatters.TransactionTypeFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.VrfPubkey), new AlgoSdk.Formatters.ByteArrayFormatter<AlgoSdk.VrfPubkey>());
        }
    }
}
