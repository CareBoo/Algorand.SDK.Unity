//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlgoSdk
{
    
    
    public sealed partial class AlgoApiFormatterLookup
    {
        
        private static void EnsureLookupInitialized()
        {
            AlgoSdk.AlgoApiFormatterLookup.InitLookup();
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AccountInfo), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AccountInfo>().Assign("address", null, (AlgoSdk.AccountInfo x) => x.Address, (ref AlgoSdk.AccountInfo x, AlgoSdk.Address value) => x.Address = value, false).Assign("amount", null, (AlgoSdk.AccountInfo x) => x.Amount, (ref AlgoSdk.AccountInfo x, System.UInt64 value) => x.Amount = value, false).Assign("amount-without-pending-rewards", null, (AlgoSdk.AccountInfo x) => x.AmountWithoutPendingRewards, (ref AlgoSdk.AccountInfo x, System.UInt64 value) => x.AmountWithoutPendingRewards = value, false).Assign("apps-local-state", null, (AlgoSdk.AccountInfo x) => x.ApplicationsLocalState, (ref AlgoSdk.AccountInfo x, AlgoSdk.ApplicationLocalState[] value) => x.ApplicationsLocalState = value, AlgoSdk.ArrayComparer<AlgoSdk.ApplicationLocalState>.Instance, false).Assign("apps-total-extra-pages", null, (AlgoSdk.AccountInfo x) => x.ApplicationsTotalExtraPages, (ref AlgoSdk.AccountInfo x, System.UInt64 value) => x.ApplicationsTotalExtraPages = value, false).Assign("apps-total-schema", null, (AlgoSdk.AccountInfo x) => x.ApplicationsTotalSchema, (ref AlgoSdk.AccountInfo x, AlgoSdk.StateSchema value) => x.ApplicationsTotalSchema = value, false).Assign("assets", null, (AlgoSdk.AccountInfo x) => x.Assets, (ref AlgoSdk.AccountInfo x, AlgoSdk.AssetHolding[] value) => x.Assets = value, AlgoSdk.ArrayComparer<AlgoSdk.AssetHolding>.Instance, false).Assign("auth-addr", null, (AlgoSdk.AccountInfo x) => x.AuthAddress, (ref AlgoSdk.AccountInfo x, AlgoSdk.Address value) => x.AuthAddress = value, false).Assign("closed-at-round", null, (AlgoSdk.AccountInfo x) => x.ClosedAtRound, (ref AlgoSdk.AccountInfo x, System.UInt64 value) => x.ClosedAtRound = value, false).Assign("created-apps", null, (AlgoSdk.AccountInfo x) => x.CreatedApplications, (ref AlgoSdk.AccountInfo x, AlgoSdk.Application[] value) => x.CreatedApplications = value, AlgoSdk.ArrayComparer<AlgoSdk.Application>.Instance, false).Assign("created-assets", null, (AlgoSdk.AccountInfo x) => x.CreatedAssets, (ref AlgoSdk.AccountInfo x, AlgoSdk.Asset[] value) => x.CreatedAssets = value, AlgoSdk.ArrayComparer<AlgoSdk.Asset>.Instance, false).Assign("created-at-round", null, (AlgoSdk.AccountInfo x) => x.CreatedAtRound, (ref AlgoSdk.AccountInfo x, System.UInt64 value) => x.CreatedAtRound = value, false).Assign("deleted", null, (AlgoSdk.AccountInfo x) => x.Deleted, (ref AlgoSdk.AccountInfo x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value, false).Assign("participation", null, (AlgoSdk.AccountInfo x) => x.Participation, (ref AlgoSdk.AccountInfo x, AlgoSdk.AccountParticipation value) => x.Participation = value, false).Assign("pending-rewards", null, (AlgoSdk.AccountInfo x) => x.PendingRewards, (ref AlgoSdk.AccountInfo x, System.UInt64 value) => x.PendingRewards = value, false).Assign("reward-base", null, (AlgoSdk.AccountInfo x) => x.RewardBase, (ref AlgoSdk.AccountInfo x, System.UInt64 value) => x.RewardBase = value, false).Assign("rewards", null, (AlgoSdk.AccountInfo x) => x.Rewards, (ref AlgoSdk.AccountInfo x, System.UInt64 value) => x.Rewards = value, false).Assign("round", null, (AlgoSdk.AccountInfo x) => x.Round, (ref AlgoSdk.AccountInfo x, System.UInt64 value) => x.Round = value, false).Assign("sig-type", null, (AlgoSdk.AccountInfo x) => x.SignatureType, (ref AlgoSdk.AccountInfo x, AlgoSdk.SignatureType value) => x.SignatureType = value, AlgoSdk.ByteEnumComparer<AlgoSdk.SignatureType>.Instance, false).Assign("status", null, (AlgoSdk.AccountInfo x) => x.Status, (ref AlgoSdk.AccountInfo x, Unity.Collections.FixedString32Bytes value) => x.Status = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ApplicationLocalState[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.ApplicationLocalState>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetHolding[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.AssetHolding>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Application[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Application>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Asset[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Asset>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AccountParticipation), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AccountParticipation>().Assign("vote-participation-key", "votekey", (AlgoSdk.AccountParticipation x) => x.VoteParticipationKey, (ref AlgoSdk.AccountParticipation x, AlgoSdk.Crypto.Ed25519.PublicKey value) => x.VoteParticipationKey = value, false).Assign("selection-participation-key", "selkey", (AlgoSdk.AccountParticipation x) => x.SelectionParticipationKey, (ref AlgoSdk.AccountParticipation x, AlgoSdk.VrfPubKey value) => x.SelectionParticipationKey = value, false).Assign("vote-first-valid", "votefst", (AlgoSdk.AccountParticipation x) => x.VoteFirst, (ref AlgoSdk.AccountParticipation x, System.UInt64 value) => x.VoteFirst = value, false).Assign("vote-last-valid", "votelst", (AlgoSdk.AccountParticipation x) => x.VoteLast, (ref AlgoSdk.AccountParticipation x, System.UInt64 value) => x.VoteLast = value, false).Assign("vote-key-dilution", "votekd", (AlgoSdk.AccountParticipation x) => x.VoteKeyDilution, (ref AlgoSdk.AccountParticipation x, System.UInt64 value) => x.VoteKeyDilution = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AccountResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AccountResponse>().Assign("account", null, (AlgoSdk.AccountResponse x) => x.Account, (ref AlgoSdk.AccountResponse x, AlgoSdk.AccountInfo value) => x.Account = value, false).Assign("current-round", null, (AlgoSdk.AccountResponse x) => x.CurrentRound, (ref AlgoSdk.AccountResponse x, System.UInt64 value) => x.CurrentRound = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AccountsResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AccountsResponse>().Assign("accounts", null, (AlgoSdk.AccountsResponse x) => x.Accounts, (ref AlgoSdk.AccountsResponse x, AlgoSdk.AccountInfo[] value) => x.Accounts = value, AlgoSdk.ArrayComparer<AlgoSdk.AccountInfo>.Instance, false).Assign("current-round", null, (AlgoSdk.AccountsResponse x) => x.CurrentRound, (ref AlgoSdk.AccountsResponse x, System.UInt64 value) => x.CurrentRound = value, false).Assign("next-token", null, (AlgoSdk.AccountsResponse x) => x.NextToken, (ref AlgoSdk.AccountsResponse x, Unity.Collections.FixedString128Bytes value) => x.NextToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AccountInfo[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.AccountInfo>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AccountStateDelta), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AccountStateDelta>().Assign("address", null, (AlgoSdk.AccountStateDelta x) => x.Address, (ref AlgoSdk.AccountStateDelta x, AlgoSdk.Address value) => x.Address = value, false).Assign("delta", null, (AlgoSdk.AccountStateDelta x) => x.Delta, (ref AlgoSdk.AccountStateDelta x, AlgoSdk.EvalDeltaKeyValue[] value) => x.Delta = value, AlgoSdk.ArrayComparer<AlgoSdk.EvalDeltaKeyValue>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.EvalDeltaKeyValue[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.EvalDeltaKeyValue>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AppCallTxn), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AppCallTxn>().Assign("fee", "fee", (AlgoSdk.AppCallTxn x) => x.Fee, (ref AlgoSdk.AppCallTxn x, System.UInt64 value) => x.Fee = value, false).Assign("first-valid", "fv", (AlgoSdk.AppCallTxn x) => x.FirstValidRound, (ref AlgoSdk.AppCallTxn x, System.UInt64 value) => x.FirstValidRound = value, false).Assign("genesis-hash", "gh", (AlgoSdk.AppCallTxn x) => x.GenesisHash, (ref AlgoSdk.AppCallTxn x, AlgoSdk.GenesisHash value) => x.GenesisHash = value, false).Assign("last-valid", "lv", (AlgoSdk.AppCallTxn x) => x.LastValidRound, (ref AlgoSdk.AppCallTxn x, System.UInt64 value) => x.LastValidRound = value, false).Assign("sender", "snd", (AlgoSdk.AppCallTxn x) => x.Sender, (ref AlgoSdk.AppCallTxn x, AlgoSdk.Address value) => x.Sender = value, false).Assign("tx-type", "type", (AlgoSdk.AppCallTxn x) => x.TransactionType, (ref AlgoSdk.AppCallTxn x, AlgoSdk.TransactionType value) => x.TransactionType = value, AlgoSdk.ByteEnumComparer<AlgoSdk.TransactionType>.Instance, false).Assign("genesis-id", "gen", (AlgoSdk.AppCallTxn x) => x.GenesisId, (ref AlgoSdk.AppCallTxn x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value, false).Assign("group", "grp", (AlgoSdk.AppCallTxn x) => x.Group, (ref AlgoSdk.AppCallTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Group = value, false).Assign("lease", "lx", (AlgoSdk.AppCallTxn x) => x.Lease, (ref AlgoSdk.AppCallTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Lease = value, false).Assign("note", "note", (AlgoSdk.AppCallTxn x) => x.Note, (ref AlgoSdk.AppCallTxn x, System.Byte[] value) => x.Note = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("rekey-to", "rekey", (AlgoSdk.AppCallTxn x) => x.RekeyTo, (ref AlgoSdk.AppCallTxn x, AlgoSdk.Address value) => x.RekeyTo = value, false).Assign(null, "apid", (AlgoSdk.AppCallTxn x) => x.ApplicationId, (ref AlgoSdk.AppCallTxn x, System.UInt64 value) => x.ApplicationId = value, false).Assign("on-completion", "apan", (AlgoSdk.AppCallTxn x) => x.OnComplete, (ref AlgoSdk.AppCallTxn x, AlgoSdk.OnCompletion value) => x.OnComplete = value, AlgoSdk.ByteEnumComparer<AlgoSdk.OnCompletion>.Instance, false).Assign(null, "apap", (AlgoSdk.AppCallTxn x) => x.ApprovalProgram, (ref AlgoSdk.AppCallTxn x, AlgoSdk.CompiledTeal value) => x.ApprovalProgram = value, false).Assign(null, "apsu", (AlgoSdk.AppCallTxn x) => x.ClearStateProgram, (ref AlgoSdk.AppCallTxn x, AlgoSdk.CompiledTeal value) => x.ClearStateProgram = value, false).Assign(null, "apaa", (AlgoSdk.AppCallTxn x) => x.AppArguments, (ref AlgoSdk.AppCallTxn x, AlgoSdk.CompiledTeal value) => x.AppArguments = value, false).Assign(null, "apat", (AlgoSdk.AppCallTxn x) => x.Accounts, (ref AlgoSdk.AppCallTxn x, AlgoSdk.Address[] value) => x.Accounts = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance, false).Assign(null, "apfa", (AlgoSdk.AppCallTxn x) => x.ForeignApps, (ref AlgoSdk.AppCallTxn x, System.UInt64[] value) => x.ForeignApps = value, AlgoSdk.ArrayComparer<ulong>.Instance, false).Assign(null, "apas", (AlgoSdk.AppCallTxn x) => x.ForeignAssets, (ref AlgoSdk.AppCallTxn x, System.UInt64[] value) => x.ForeignAssets = value, AlgoSdk.ArrayComparer<ulong>.Instance, false).Assign(null, "apgs", (AlgoSdk.AppCallTxn x) => x.GlobalStateSchema, (ref AlgoSdk.AppCallTxn x, AlgoSdk.StateSchema value) => x.GlobalStateSchema = value, false).Assign(null, "apls", (AlgoSdk.AppCallTxn x) => x.LocalStateSchema, (ref AlgoSdk.AppCallTxn x, AlgoSdk.StateSchema value) => x.LocalStateSchema = value, false).Assign(null, "apep", (AlgoSdk.AppCallTxn x) => x.ExtraProgramPages, (ref AlgoSdk.AppCallTxn x, System.UInt64 value) => x.ExtraProgramPages = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(byte[]), new AlgoSdk.Formatters.ArrayFormatter<byte>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Address[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Address>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(ulong[]), new AlgoSdk.Formatters.ArrayFormatter<ulong>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Application), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Application>().Assign("created-at-round", null, (AlgoSdk.Application x) => x.CreatedAtRound, (ref AlgoSdk.Application x, System.UInt64 value) => x.CreatedAtRound = value, false).Assign("deleted", null, (AlgoSdk.Application x) => x.Deleted, (ref AlgoSdk.Application x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value, false).Assign("deleted-at-round", null, (AlgoSdk.Application x) => x.DeletedAtRound, (ref AlgoSdk.Application x, System.UInt64 value) => x.DeletedAtRound = value, false).Assign("id", null, (AlgoSdk.Application x) => x.Id, (ref AlgoSdk.Application x, System.UInt64 value) => x.Id = value, false).Assign("params", null, (AlgoSdk.Application x) => x.Params, (ref AlgoSdk.Application x, AlgoSdk.ApplicationParams value) => x.Params = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ApplicationLocalState), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ApplicationLocalState>().Assign("closed-out-at-round", null, (AlgoSdk.ApplicationLocalState x) => x.ClosedOutAtRound, (ref AlgoSdk.ApplicationLocalState x, System.UInt64 value) => x.ClosedOutAtRound = value, false).Assign("deleted", null, (AlgoSdk.ApplicationLocalState x) => x.Deleted, (ref AlgoSdk.ApplicationLocalState x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value, false).Assign("id", null, (AlgoSdk.ApplicationLocalState x) => x.Id, (ref AlgoSdk.ApplicationLocalState x, System.UInt64 value) => x.Id = value, false).Assign("key-value", null, (AlgoSdk.ApplicationLocalState x) => x.KeyValues, (ref AlgoSdk.ApplicationLocalState x, AlgoSdk.TealKeyValue[] value) => x.KeyValues = value, AlgoSdk.ArrayComparer<AlgoSdk.TealKeyValue>.Instance, false).Assign("opted-in-at-round", null, (AlgoSdk.ApplicationLocalState x) => x.OptedInAtRound, (ref AlgoSdk.ApplicationLocalState x, System.UInt64 value) => x.OptedInAtRound = value, false).Assign("schema", null, (AlgoSdk.ApplicationLocalState x) => x.Schema, (ref AlgoSdk.ApplicationLocalState x, AlgoSdk.StateSchema value) => x.Schema = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealKeyValue[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.TealKeyValue>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ApplicationParams), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ApplicationParams>().Assign("approval-program", null, (AlgoSdk.ApplicationParams x) => x.ApprovalProgram, (ref AlgoSdk.ApplicationParams x, AlgoSdk.CompiledTeal value) => x.ApprovalProgram = value, false).Assign("clear-state-program", null, (AlgoSdk.ApplicationParams x) => x.ClearStateProgram, (ref AlgoSdk.ApplicationParams x, AlgoSdk.CompiledTeal value) => x.ClearStateProgram = value, false).Assign("creator", null, (AlgoSdk.ApplicationParams x) => x.Creator, (ref AlgoSdk.ApplicationParams x, AlgoSdk.Address value) => x.Creator = value, false).Assign("extra-program-pages", null, (AlgoSdk.ApplicationParams x) => x.ExtraProgramPages, (ref AlgoSdk.ApplicationParams x, System.UInt64 value) => x.ExtraProgramPages = value, false).Assign("global-state", null, (AlgoSdk.ApplicationParams x) => x.GlobalState, (ref AlgoSdk.ApplicationParams x, AlgoSdk.TealKeyValue[] value) => x.GlobalState = value, AlgoSdk.ArrayComparer<AlgoSdk.TealKeyValue>.Instance, false).Assign("global-state-schema", null, (AlgoSdk.ApplicationParams x) => x.GlobalStateSchema, (ref AlgoSdk.ApplicationParams x, AlgoSdk.StateSchema value) => x.GlobalStateSchema = value, false).Assign("local-state-schema", null, (AlgoSdk.ApplicationParams x) => x.LocalStateSchema, (ref AlgoSdk.ApplicationParams x, AlgoSdk.StateSchema value) => x.LocalStateSchema = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ApplicationResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ApplicationResponse>().Assign("application", null, (AlgoSdk.ApplicationResponse x) => x.Application, (ref AlgoSdk.ApplicationResponse x, AlgoSdk.Application value) => x.Application = value, false).Assign("current-round", null, (AlgoSdk.ApplicationResponse x) => x.CurrentRound, (ref AlgoSdk.ApplicationResponse x, System.UInt64 value) => x.CurrentRound = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ApplicationsResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ApplicationsResponse>().Assign("applications", null, (AlgoSdk.ApplicationsResponse x) => x.Applications, (ref AlgoSdk.ApplicationsResponse x, AlgoSdk.Application[] value) => x.Applications = value, AlgoSdk.ArrayComparer<AlgoSdk.Application>.Instance, false).Assign("current-round", null, (AlgoSdk.ApplicationsResponse x) => x.CurrentRound, (ref AlgoSdk.ApplicationsResponse x, System.UInt64 value) => x.CurrentRound = value, false).Assign("next-token", null, (AlgoSdk.ApplicationsResponse x) => x.NextToken, (ref AlgoSdk.ApplicationsResponse x, Unity.Collections.FixedString128Bytes value) => x.NextToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Asset), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Asset>().Assign("created-at-round", null, (AlgoSdk.Asset x) => x.CreatedAtRound, (ref AlgoSdk.Asset x, System.UInt64 value) => x.CreatedAtRound = value, false).Assign("deleted", null, (AlgoSdk.Asset x) => x.Deleted, (ref AlgoSdk.Asset x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value, false).Assign("destroyed-at-round", null, (AlgoSdk.Asset x) => x.DestroyedAtRound, (ref AlgoSdk.Asset x, System.UInt64 value) => x.DestroyedAtRound = value, false).Assign("index", null, (AlgoSdk.Asset x) => x.Index, (ref AlgoSdk.Asset x, System.UInt64 value) => x.Index = value, false).Assign("params", null, (AlgoSdk.Asset x) => x.Params, (ref AlgoSdk.Asset x, AlgoSdk.AssetParams value) => x.Params = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetConfigTxn), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetConfigTxn>().Assign("fee", "fee", (AlgoSdk.AssetConfigTxn x) => x.Fee, (ref AlgoSdk.AssetConfigTxn x, System.UInt64 value) => x.Fee = value, false).Assign("first-valid", "fv", (AlgoSdk.AssetConfigTxn x) => x.FirstValidRound, (ref AlgoSdk.AssetConfigTxn x, System.UInt64 value) => x.FirstValidRound = value, false).Assign("genesis-hash", "gh", (AlgoSdk.AssetConfigTxn x) => x.GenesisHash, (ref AlgoSdk.AssetConfigTxn x, AlgoSdk.GenesisHash value) => x.GenesisHash = value, false).Assign("last-valid", "lv", (AlgoSdk.AssetConfigTxn x) => x.LastValidRound, (ref AlgoSdk.AssetConfigTxn x, System.UInt64 value) => x.LastValidRound = value, false).Assign("sender", "snd", (AlgoSdk.AssetConfigTxn x) => x.Sender, (ref AlgoSdk.AssetConfigTxn x, AlgoSdk.Address value) => x.Sender = value, false).Assign("tx-type", "type", (AlgoSdk.AssetConfigTxn x) => x.TransactionType, (ref AlgoSdk.AssetConfigTxn x, AlgoSdk.TransactionType value) => x.TransactionType = value, AlgoSdk.ByteEnumComparer<AlgoSdk.TransactionType>.Instance, false).Assign("genesis-id", "gen", (AlgoSdk.AssetConfigTxn x) => x.GenesisId, (ref AlgoSdk.AssetConfigTxn x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value, false).Assign("group", "grp", (AlgoSdk.AssetConfigTxn x) => x.Group, (ref AlgoSdk.AssetConfigTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Group = value, false).Assign("lease", "lx", (AlgoSdk.AssetConfigTxn x) => x.Lease, (ref AlgoSdk.AssetConfigTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Lease = value, false).Assign("note", "note", (AlgoSdk.AssetConfigTxn x) => x.Note, (ref AlgoSdk.AssetConfigTxn x, System.Byte[] value) => x.Note = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("rekey-to", "rekey", (AlgoSdk.AssetConfigTxn x) => x.RekeyTo, (ref AlgoSdk.AssetConfigTxn x, AlgoSdk.Address value) => x.RekeyTo = value, false).Assign(null, "caid", (AlgoSdk.AssetConfigTxn x) => x.ConfigAsset, (ref AlgoSdk.AssetConfigTxn x, System.UInt64 value) => x.ConfigAsset = value, false).Assign(null, "apar", (AlgoSdk.AssetConfigTxn x) => x.AssetParams, (ref AlgoSdk.AssetConfigTxn x, AlgoSdk.AssetParams value) => x.AssetParams = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetFreezeTxn), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetFreezeTxn>().Assign("fee", "fee", (AlgoSdk.AssetFreezeTxn x) => x.Fee, (ref AlgoSdk.AssetFreezeTxn x, System.UInt64 value) => x.Fee = value, false).Assign("first-valid", "fv", (AlgoSdk.AssetFreezeTxn x) => x.FirstValidRound, (ref AlgoSdk.AssetFreezeTxn x, System.UInt64 value) => x.FirstValidRound = value, false).Assign("genesis-hash", "gh", (AlgoSdk.AssetFreezeTxn x) => x.GenesisHash, (ref AlgoSdk.AssetFreezeTxn x, AlgoSdk.GenesisHash value) => x.GenesisHash = value, false).Assign("last-valid", "lv", (AlgoSdk.AssetFreezeTxn x) => x.LastValidRound, (ref AlgoSdk.AssetFreezeTxn x, System.UInt64 value) => x.LastValidRound = value, false).Assign("sender", "snd", (AlgoSdk.AssetFreezeTxn x) => x.Sender, (ref AlgoSdk.AssetFreezeTxn x, AlgoSdk.Address value) => x.Sender = value, false).Assign("tx-type", "type", (AlgoSdk.AssetFreezeTxn x) => x.TransactionType, (ref AlgoSdk.AssetFreezeTxn x, AlgoSdk.TransactionType value) => x.TransactionType = value, AlgoSdk.ByteEnumComparer<AlgoSdk.TransactionType>.Instance, false).Assign("genesis-id", "gen", (AlgoSdk.AssetFreezeTxn x) => x.GenesisId, (ref AlgoSdk.AssetFreezeTxn x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value, false).Assign("group", "grp", (AlgoSdk.AssetFreezeTxn x) => x.Group, (ref AlgoSdk.AssetFreezeTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Group = value, false).Assign("lease", "lx", (AlgoSdk.AssetFreezeTxn x) => x.Lease, (ref AlgoSdk.AssetFreezeTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Lease = value, false).Assign("note", "note", (AlgoSdk.AssetFreezeTxn x) => x.Note, (ref AlgoSdk.AssetFreezeTxn x, System.Byte[] value) => x.Note = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("rekey-to", "rekey", (AlgoSdk.AssetFreezeTxn x) => x.RekeyTo, (ref AlgoSdk.AssetFreezeTxn x, AlgoSdk.Address value) => x.RekeyTo = value, false).Assign(null, "fadd", (AlgoSdk.AssetFreezeTxn x) => x.FreezeAccount, (ref AlgoSdk.AssetFreezeTxn x, AlgoSdk.Address value) => x.FreezeAccount = value, false).Assign(null, "faid", (AlgoSdk.AssetFreezeTxn x) => x.FreezeAsset, (ref AlgoSdk.AssetFreezeTxn x, System.UInt64 value) => x.FreezeAsset = value, false).Assign(null, "afrz", (AlgoSdk.AssetFreezeTxn x) => x.AssetFrozen, (ref AlgoSdk.AssetFreezeTxn x, AlgoSdk.Optional<System.Boolean> value) => x.AssetFrozen = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetHolding), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetHolding>().Assign("amount", null, (AlgoSdk.AssetHolding x) => x.Amount, (ref AlgoSdk.AssetHolding x, System.UInt64 value) => x.Amount = value, false).Assign("asset-id", null, (AlgoSdk.AssetHolding x) => x.AssetId, (ref AlgoSdk.AssetHolding x, System.UInt64 value) => x.AssetId = value, false).Assign("creator", null, (AlgoSdk.AssetHolding x) => x.Creator, (ref AlgoSdk.AssetHolding x, AlgoSdk.Address value) => x.Creator = value, false).Assign("deleted", null, (AlgoSdk.AssetHolding x) => x.Deleted, (ref AlgoSdk.AssetHolding x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value, false).Assign("is-frozen", null, (AlgoSdk.AssetHolding x) => x.IsFrozen, (ref AlgoSdk.AssetHolding x, System.Boolean value) => x.IsFrozen = value, false).Assign("opted-in-at-round", null, (AlgoSdk.AssetHolding x) => x.OptedInAtRound, (ref AlgoSdk.AssetHolding x, System.UInt64 value) => x.OptedInAtRound = value, false).Assign("opted-out-at-round", null, (AlgoSdk.AssetHolding x) => x.OptedOutAtRound, (ref AlgoSdk.AssetHolding x, System.UInt64 value) => x.OptedOutAtRound = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetParams), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetParams>().Assign("name-b64", null, (AlgoSdk.AssetParams x) => x.NameBase64, (ref AlgoSdk.AssetParams x, Unity.Collections.FixedString64Bytes value) => x.NameBase64 = value, false).Assign("unit-name-b64", null, (AlgoSdk.AssetParams x) => x.UnitNameBase64, (ref AlgoSdk.AssetParams x, Unity.Collections.FixedString32Bytes value) => x.UnitNameBase64 = value, false).Assign("url-b64", null, (AlgoSdk.AssetParams x) => x.UrlBase64, (ref AlgoSdk.AssetParams x, Unity.Collections.FixedString128Bytes value) => x.UrlBase64 = value, false).Assign("clawback", "c", (AlgoSdk.AssetParams x) => x.Clawback, (ref AlgoSdk.AssetParams x, AlgoSdk.Address value) => x.Clawback = value, false).Assign("creator", null, (AlgoSdk.AssetParams x) => x.Creator, (ref AlgoSdk.AssetParams x, AlgoSdk.Address value) => x.Creator = value, false).Assign("decimals", "dc", (AlgoSdk.AssetParams x) => x.Decimals, (ref AlgoSdk.AssetParams x, System.UInt32 value) => x.Decimals = value, false).Assign("default-frozen", "df", (AlgoSdk.AssetParams x) => x.DefaultFrozen, (ref AlgoSdk.AssetParams x, System.Boolean value) => x.DefaultFrozen = value, false).Assign("freeze", "f", (AlgoSdk.AssetParams x) => x.Freeze, (ref AlgoSdk.AssetParams x, AlgoSdk.Address value) => x.Freeze = value, false).Assign("manager", "m", (AlgoSdk.AssetParams x) => x.Manager, (ref AlgoSdk.AssetParams x, AlgoSdk.Address value) => x.Manager = value, false).Assign("metadata-hash", "am", (AlgoSdk.AssetParams x) => x.MetadataHash, (ref AlgoSdk.AssetParams x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.MetadataHash = value, false).Assign("name", "an", (AlgoSdk.AssetParams x) => x.Name, (ref AlgoSdk.AssetParams x, Unity.Collections.FixedString64Bytes value) => x.Name = value, false).Assign("reserve", "r", (AlgoSdk.AssetParams x) => x.Reserve, (ref AlgoSdk.AssetParams x, AlgoSdk.Address value) => x.Reserve = value, false).Assign("total", "t", (AlgoSdk.AssetParams x) => x.Total, (ref AlgoSdk.AssetParams x, System.UInt64 value) => x.Total = value, false).Assign("unit-name", "un", (AlgoSdk.AssetParams x) => x.UnitName, (ref AlgoSdk.AssetParams x, Unity.Collections.FixedString32Bytes value) => x.UnitName = value, false).Assign("url", "au", (AlgoSdk.AssetParams x) => x.Url, (ref AlgoSdk.AssetParams x, Unity.Collections.FixedString128Bytes value) => x.Url = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetResponse>().Assign("asset", null, (AlgoSdk.AssetResponse x) => x.Asset, (ref AlgoSdk.AssetResponse x, AlgoSdk.Asset value) => x.Asset = value, false).Assign("current-round", null, (AlgoSdk.AssetResponse x) => x.CurrentRound, (ref AlgoSdk.AssetResponse x, System.UInt64 value) => x.CurrentRound = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetsResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetsResponse>().Assign("assets", null, (AlgoSdk.AssetsResponse x) => x.Assets, (ref AlgoSdk.AssetsResponse x, AlgoSdk.Asset[] value) => x.Assets = value, AlgoSdk.ArrayComparer<AlgoSdk.Asset>.Instance, false).Assign("current-round", null, (AlgoSdk.AssetsResponse x) => x.CurrentRound, (ref AlgoSdk.AssetsResponse x, System.UInt64 value) => x.CurrentRound = value, false).Assign("next-token", null, (AlgoSdk.AssetsResponse x) => x.NextToken, (ref AlgoSdk.AssetsResponse x, Unity.Collections.FixedString128Bytes value) => x.NextToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetTransferTxn), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetTransferTxn>().Assign("fee", "fee", (AlgoSdk.AssetTransferTxn x) => x.Fee, (ref AlgoSdk.AssetTransferTxn x, System.UInt64 value) => x.Fee = value, false).Assign("first-valid", "fv", (AlgoSdk.AssetTransferTxn x) => x.FirstValidRound, (ref AlgoSdk.AssetTransferTxn x, System.UInt64 value) => x.FirstValidRound = value, false).Assign("genesis-hash", "gh", (AlgoSdk.AssetTransferTxn x) => x.GenesisHash, (ref AlgoSdk.AssetTransferTxn x, AlgoSdk.GenesisHash value) => x.GenesisHash = value, false).Assign("last-valid", "lv", (AlgoSdk.AssetTransferTxn x) => x.LastValidRound, (ref AlgoSdk.AssetTransferTxn x, System.UInt64 value) => x.LastValidRound = value, false).Assign("sender", "snd", (AlgoSdk.AssetTransferTxn x) => x.Sender, (ref AlgoSdk.AssetTransferTxn x, AlgoSdk.Address value) => x.Sender = value, false).Assign("tx-type", "type", (AlgoSdk.AssetTransferTxn x) => x.TransactionType, (ref AlgoSdk.AssetTransferTxn x, AlgoSdk.TransactionType value) => x.TransactionType = value, AlgoSdk.ByteEnumComparer<AlgoSdk.TransactionType>.Instance, false).Assign("genesis-id", "gen", (AlgoSdk.AssetTransferTxn x) => x.GenesisId, (ref AlgoSdk.AssetTransferTxn x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value, false).Assign("group", "grp", (AlgoSdk.AssetTransferTxn x) => x.Group, (ref AlgoSdk.AssetTransferTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Group = value, false).Assign("lease", "lx", (AlgoSdk.AssetTransferTxn x) => x.Lease, (ref AlgoSdk.AssetTransferTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Lease = value, false).Assign("note", "note", (AlgoSdk.AssetTransferTxn x) => x.Note, (ref AlgoSdk.AssetTransferTxn x, System.Byte[] value) => x.Note = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("rekey-to", "rekey", (AlgoSdk.AssetTransferTxn x) => x.RekeyTo, (ref AlgoSdk.AssetTransferTxn x, AlgoSdk.Address value) => x.RekeyTo = value, false).Assign(null, "xaid", (AlgoSdk.AssetTransferTxn x) => x.XferAsset, (ref AlgoSdk.AssetTransferTxn x, System.UInt64 value) => x.XferAsset = value, false).Assign(null, "aamt", (AlgoSdk.AssetTransferTxn x) => x.AssetAmount, (ref AlgoSdk.AssetTransferTxn x, System.UInt64 value) => x.AssetAmount = value, false).Assign(null, "asnd", (AlgoSdk.AssetTransferTxn x) => x.AssetSender, (ref AlgoSdk.AssetTransferTxn x, AlgoSdk.Address value) => x.AssetSender = value, false).Assign(null, "arcv", (AlgoSdk.AssetTransferTxn x) => x.AssetReceiver, (ref AlgoSdk.AssetTransferTxn x, AlgoSdk.Address value) => x.AssetReceiver = value, false).Assign(null, "aclose", (AlgoSdk.AssetTransferTxn x) => x.AssetCloseTo, (ref AlgoSdk.AssetTransferTxn x, AlgoSdk.Address value) => x.AssetCloseTo = value, false).Assign("close-amount", "close-amount", (AlgoSdk.AssetTransferTxn x) => x.CloseAmount, (ref AlgoSdk.AssetTransferTxn x, System.UInt64 value) => x.CloseAmount = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BalancesResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.BalancesResponse>().Assign("balances", null, (AlgoSdk.BalancesResponse x) => x.Balances, (ref AlgoSdk.BalancesResponse x, AlgoSdk.MiniAssetHolding[] value) => x.Balances = value, AlgoSdk.ArrayComparer<AlgoSdk.MiniAssetHolding>.Instance, false).Assign("current-round", null, (AlgoSdk.BalancesResponse x) => x.CurrentRound, (ref AlgoSdk.BalancesResponse x, System.UInt64 value) => x.CurrentRound = value, false).Assign("next-token", null, (AlgoSdk.BalancesResponse x) => x.NextToken, (ref AlgoSdk.BalancesResponse x, Unity.Collections.FixedString128Bytes value) => x.NextToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.MiniAssetHolding[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.MiniAssetHolding>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Block), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Block>().Assign(null, "fees", (AlgoSdk.Block x) => x.FeeSink, (ref AlgoSdk.Block x, AlgoSdk.Address value) => x.FeeSink = value, false).Assign(null, "rwcalr", (AlgoSdk.Block x) => x.RewardsCalculationRound, (ref AlgoSdk.Block x, System.UInt64 value) => x.RewardsCalculationRound = value, false).Assign(null, "earn", (AlgoSdk.Block x) => x.RewardsLevel, (ref AlgoSdk.Block x, System.UInt64 value) => x.RewardsLevel = value, false).Assign(null, "rwd", (AlgoSdk.Block x) => x.RewardsPool, (ref AlgoSdk.Block x, AlgoSdk.Address value) => x.RewardsPool = value, false).Assign(null, "rate", (AlgoSdk.Block x) => x.RewardsRate, (ref AlgoSdk.Block x, System.UInt64 value) => x.RewardsRate = value, false).Assign(null, "frac", (AlgoSdk.Block x) => x.RewardsResidue, (ref AlgoSdk.Block x, System.UInt64 value) => x.RewardsResidue = value, false).Assign(null, "proto", (AlgoSdk.Block x) => x.CurrentProtocol, (ref AlgoSdk.Block x, Unity.Collections.FixedString128Bytes value) => x.CurrentProtocol = value, false).Assign(null, "nextproto", (AlgoSdk.Block x) => x.NextProtocol, (ref AlgoSdk.Block x, Unity.Collections.FixedString128Bytes value) => x.NextProtocol = value, false).Assign(null, "nextyes", (AlgoSdk.Block x) => x.NextProtocolApprovals, (ref AlgoSdk.Block x, System.UInt64 value) => x.NextProtocolApprovals = value, false).Assign(null, "nextswitch", (AlgoSdk.Block x) => x.NextProtocolSwitchOn, (ref AlgoSdk.Block x, System.UInt64 value) => x.NextProtocolSwitchOn = value, false).Assign(null, "nextbefore", (AlgoSdk.Block x) => x.NextProtocolVoteBefore, (ref AlgoSdk.Block x, System.UInt64 value) => x.NextProtocolVoteBefore = value, false).Assign(null, "upgradeyes", (AlgoSdk.Block x) => x.UpgradeApprove, (ref AlgoSdk.Block x, AlgoSdk.Optional<System.Boolean> value) => x.UpgradeApprove = value, false).Assign(null, "upgradedelay", (AlgoSdk.Block x) => x.UpgradeDelay, (ref AlgoSdk.Block x, System.UInt64 value) => x.UpgradeDelay = value, false).Assign(null, "upgradeprop", (AlgoSdk.Block x) => x.UpgradePropose, (ref AlgoSdk.Block x, AlgoSdk.Address value) => x.UpgradePropose = value, false).Assign("genesis-hash", "gh", (AlgoSdk.Block x) => x.GenesisHash, (ref AlgoSdk.Block x, AlgoSdk.GenesisHash value) => x.GenesisHash = value, false).Assign("genesis-id", "gen", (AlgoSdk.Block x) => x.GenesisId, (ref AlgoSdk.Block x, Unity.Collections.FixedString64Bytes value) => x.GenesisId = value, false).Assign("previous-block-hash", "prev", (AlgoSdk.Block x) => x.PreviousBlockHash, (ref AlgoSdk.Block x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.PreviousBlockHash = value, false).Assign("rewards", null, (AlgoSdk.Block x) => x.Rewards, (ref AlgoSdk.Block x, AlgoSdk.BlockRewards value) => x.Rewards = value, false).Assign("round", "rnd", (AlgoSdk.Block x) => x.Round, (ref AlgoSdk.Block x, System.UInt64 value) => x.Round = value, false).Assign("seed", "seed", (AlgoSdk.Block x) => x.Seed, (ref AlgoSdk.Block x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Seed = value, false).Assign("timestamp", "ts", (AlgoSdk.Block x) => x.Timestamp, (ref AlgoSdk.Block x, System.UInt64 value) => x.Timestamp = value, false).Assign("transactions", "txns", (AlgoSdk.Block x) => x.Transactions, (ref AlgoSdk.Block x, AlgoSdk.BlockTransaction[] value) => x.Transactions = value, AlgoSdk.ArrayComparer<AlgoSdk.BlockTransaction>.Instance, false).Assign("transaction-root", "txn", (AlgoSdk.Block x) => x.RootTransaction, (ref AlgoSdk.Block x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.RootTransaction = value, false).Assign("txn-counter", "tc", (AlgoSdk.Block x) => x.TransactionCounter, (ref AlgoSdk.Block x, System.UInt64 value) => x.TransactionCounter = value, false).Assign("upgrade-state", null, (AlgoSdk.Block x) => x.UpgradeState, (ref AlgoSdk.Block x, AlgoSdk.BlockUpgradeState value) => x.UpgradeState = value, false).Assign("upgrade-vote", null, (AlgoSdk.Block x) => x.UpgradeVote, (ref AlgoSdk.Block x, AlgoSdk.BlockUpgradeVote value) => x.UpgradeVote = value, false).Assign("cc", "cc", (AlgoSdk.Block x) => x.Cc, (ref AlgoSdk.Block x, AlgoSdk.AlgoApiObject value) => x.Cc = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BlockTransaction[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.BlockTransaction>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BlockResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.BlockResponse>().Assign("block", "block", (AlgoSdk.BlockResponse x) => x.BlockHeader, (ref AlgoSdk.BlockResponse x, AlgoSdk.Block value) => x.BlockHeader = value, false).Assign(null, "cert", (AlgoSdk.BlockResponse x) => x.Cert, (ref AlgoSdk.BlockResponse x, AlgoSdk.AlgoApiObject value) => x.Cert = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BlockRewards), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.BlockRewards>().Assign("fee-sink", null, (AlgoSdk.BlockRewards x) => x.FeeSink, (ref AlgoSdk.BlockRewards x, AlgoSdk.Address value) => x.FeeSink = value, false).Assign("rewards-calculation-round", null, (AlgoSdk.BlockRewards x) => x.RewardsCalculationRound, (ref AlgoSdk.BlockRewards x, System.UInt64 value) => x.RewardsCalculationRound = value, false).Assign("rewards-level", null, (AlgoSdk.BlockRewards x) => x.RewardsLevel, (ref AlgoSdk.BlockRewards x, System.UInt64 value) => x.RewardsLevel = value, false).Assign("rewards-pool", null, (AlgoSdk.BlockRewards x) => x.RewardsPool, (ref AlgoSdk.BlockRewards x, AlgoSdk.Address value) => x.RewardsPool = value, false).Assign("rewards-rate", null, (AlgoSdk.BlockRewards x) => x.RewardsRate, (ref AlgoSdk.BlockRewards x, System.UInt64 value) => x.RewardsRate = value, false).Assign("rewards-residue", null, (AlgoSdk.BlockRewards x) => x.RewardsResidue, (ref AlgoSdk.BlockRewards x, System.UInt64 value) => x.RewardsResidue = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BlockTransaction), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.BlockTransaction>().Assign("sig", "sig", (AlgoSdk.BlockTransaction x) => x.Sig, (ref AlgoSdk.BlockTransaction x, AlgoSdk.Sig value) => x.Sig = value, false).Assign("msig", "msig", (AlgoSdk.BlockTransaction x) => x.Multisig, (ref AlgoSdk.BlockTransaction x, AlgoSdk.Multisig value) => x.Multisig = value, false).Assign("lsig", "lsig", (AlgoSdk.BlockTransaction x) => x.LogicSig, (ref AlgoSdk.BlockTransaction x, AlgoSdk.LogicSig value) => x.LogicSig = value, false).Assign("txn", "txn", (AlgoSdk.BlockTransaction x) => x.Transaction, (ref AlgoSdk.BlockTransaction x, AlgoSdk.Transaction value) => x.Transaction = value, false).Assign("hgi", "hgi", (AlgoSdk.BlockTransaction x) => x.Hgi, (ref AlgoSdk.BlockTransaction x, AlgoSdk.Optional<System.Boolean> value) => x.Hgi = value, false).Assign("rr", "rr", (AlgoSdk.BlockTransaction x) => x.Rr, (ref AlgoSdk.BlockTransaction x, System.UInt64 value) => x.Rr = value, false).Assign("rs", "rs", (AlgoSdk.BlockTransaction x) => x.Rs, (ref AlgoSdk.BlockTransaction x, System.UInt64 value) => x.Rs = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BlockUpgradeState), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.BlockUpgradeState>().Assign("current-protocol", null, (AlgoSdk.BlockUpgradeState x) => x.CurrentProtocol, (ref AlgoSdk.BlockUpgradeState x, Unity.Collections.FixedString128Bytes value) => x.CurrentProtocol = value, false).Assign("next-protocol", null, (AlgoSdk.BlockUpgradeState x) => x.NextProtocol, (ref AlgoSdk.BlockUpgradeState x, Unity.Collections.FixedString128Bytes value) => x.NextProtocol = value, false).Assign("next-protocol-approvals", null, (AlgoSdk.BlockUpgradeState x) => x.NextProtocolApprovals, (ref AlgoSdk.BlockUpgradeState x, System.UInt64 value) => x.NextProtocolApprovals = value, false).Assign("next-protocol-switch-on", null, (AlgoSdk.BlockUpgradeState x) => x.NextProtocolSwitchOn, (ref AlgoSdk.BlockUpgradeState x, System.UInt64 value) => x.NextProtocolSwitchOn = value, false).Assign("next-protocol-vote-before", null, (AlgoSdk.BlockUpgradeState x) => x.NextProtocolVoteBefore, (ref AlgoSdk.BlockUpgradeState x, System.UInt64 value) => x.NextProtocolVoteBefore = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BlockUpgradeVote), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.BlockUpgradeVote>().Assign("upgrade-approve", null, (AlgoSdk.BlockUpgradeVote x) => x.UpgradeApprove, (ref AlgoSdk.BlockUpgradeVote x, AlgoSdk.Optional<System.Boolean> value) => x.UpgradeApprove = value, false).Assign("upgrade-delay", null, (AlgoSdk.BlockUpgradeVote x) => x.UpgradeDelay, (ref AlgoSdk.BlockUpgradeVote x, System.UInt64 value) => x.UpgradeDelay = value, false).Assign("upgrade-propose", null, (AlgoSdk.BlockUpgradeVote x) => x.UpgradePropose, (ref AlgoSdk.BlockUpgradeVote x, AlgoSdk.Address value) => x.UpgradePropose = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.BuildVersion), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.BuildVersion>().Assign("branch", null, (AlgoSdk.BuildVersion x) => x.Branch, (ref AlgoSdk.BuildVersion x, Unity.Collections.FixedString64Bytes value) => x.Branch = value, false).Assign("build_number", null, (AlgoSdk.BuildVersion x) => x.BuildNumber, (ref AlgoSdk.BuildVersion x, System.UInt64 value) => x.BuildNumber = value, false).Assign("channel", null, (AlgoSdk.BuildVersion x) => x.Channel, (ref AlgoSdk.BuildVersion x, Unity.Collections.FixedString64Bytes value) => x.Channel = value, false).Assign("commit_hash", null, (AlgoSdk.BuildVersion x) => x.CommitHash, (ref AlgoSdk.BuildVersion x, Unity.Collections.FixedString128Bytes value) => x.CommitHash = value, false).Assign("major", null, (AlgoSdk.BuildVersion x) => x.Major, (ref AlgoSdk.BuildVersion x, System.UInt64 value) => x.Major = value, false).Assign("minor", null, (AlgoSdk.BuildVersion x) => x.Minor, (ref AlgoSdk.BuildVersion x, System.UInt64 value) => x.Minor = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.CatchupMessage), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.CatchupMessage>().Assign("catchup-message", null, (AlgoSdk.CatchupMessage x) => x.Message, (ref AlgoSdk.CatchupMessage x, Unity.Collections.FixedString512Bytes value) => x.Message = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.ClientMeta), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletConnect.ClientMeta>().Assign("description", null, (AlgoSdk.WalletConnect.ClientMeta x) => x.Description, (ref AlgoSdk.WalletConnect.ClientMeta x, System.String value) => x.Description = value, AlgoSdk.StringComparer.Instance, false).Assign("url", null, (AlgoSdk.WalletConnect.ClientMeta x) => x.Url, (ref AlgoSdk.WalletConnect.ClientMeta x, System.String value) => x.Url = value, AlgoSdk.StringComparer.Instance, false).Assign("icons", null, (AlgoSdk.WalletConnect.ClientMeta x) => x.IconUrls, (ref AlgoSdk.WalletConnect.ClientMeta x, System.String[] value) => x.IconUrls = value, AlgoSdk.ArrayComparer<string, AlgoSdk.StringComparer>.Instance, false).Assign("name", null, (AlgoSdk.WalletConnect.ClientMeta x) => x.Name, (ref AlgoSdk.WalletConnect.ClientMeta x, System.String value) => x.Name = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(string[]), new AlgoSdk.Formatters.ArrayFormatter<string>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.CreateWalletRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.CreateWalletRequest>().Assign("master_derivation_key", null, (AlgoSdk.CreateWalletRequest x) => x.MasterDerivationKey, (ref AlgoSdk.CreateWalletRequest x, AlgoSdk.PrivateKey value) => x.MasterDerivationKey = value, false).Assign("wallet_driver_name", null, (AlgoSdk.CreateWalletRequest x) => x.WalletDriverName, (ref AlgoSdk.CreateWalletRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletDriverName = value, false).Assign("wallet_name", null, (AlgoSdk.CreateWalletRequest x) => x.WalletName, (ref AlgoSdk.CreateWalletRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletName = value, false).Assign("wallet_password", null, (AlgoSdk.CreateWalletRequest x) => x.WalletPassword, (ref AlgoSdk.CreateWalletRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.CreateWalletResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.CreateWalletResponse>().Assign("error", null, (AlgoSdk.CreateWalletResponse x) => x.Error, (ref AlgoSdk.CreateWalletResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.CreateWalletResponse x) => x.Message, (ref AlgoSdk.CreateWalletResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false).Assign("wallet", null, (AlgoSdk.CreateWalletResponse x) => x.Wallet, (ref AlgoSdk.CreateWalletResponse x, AlgoSdk.Wallet value) => x.Wallet = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DeleteKeyRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DeleteKeyRequest>().Assign("address", null, (AlgoSdk.DeleteKeyRequest x) => x.Address, (ref AlgoSdk.DeleteKeyRequest x, AlgoSdk.Address value) => x.Address = value, false).Assign("wallet_handle_token", null, (AlgoSdk.DeleteKeyRequest x) => x.WalletHandleToken, (ref AlgoSdk.DeleteKeyRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false).Assign("wallet_password", null, (AlgoSdk.DeleteKeyRequest x) => x.WalletPassword, (ref AlgoSdk.DeleteKeyRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DeleteMultisigRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DeleteMultisigRequest>().Assign("address", null, (AlgoSdk.DeleteMultisigRequest x) => x.Address, (ref AlgoSdk.DeleteMultisigRequest x, AlgoSdk.Address value) => x.Address = value, false).Assign("wallet_handle_token", null, (AlgoSdk.DeleteMultisigRequest x) => x.WalletHandleToken, (ref AlgoSdk.DeleteMultisigRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false).Assign("wallet_password", null, (AlgoSdk.DeleteMultisigRequest x) => x.WalletPassword, (ref AlgoSdk.DeleteMultisigRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DryrunRequest>().Assign("accounts", null, (AlgoSdk.DryrunRequest x) => x.Accounts, (ref AlgoSdk.DryrunRequest x, AlgoSdk.AccountInfo[] value) => x.Accounts = value, AlgoSdk.ArrayComparer<AlgoSdk.AccountInfo>.Instance, false).Assign("apps", null, (AlgoSdk.DryrunRequest x) => x.Applications, (ref AlgoSdk.DryrunRequest x, AlgoSdk.Application[] value) => x.Applications = value, AlgoSdk.ArrayComparer<AlgoSdk.Application>.Instance, false).Assign("latest-timestamp", null, (AlgoSdk.DryrunRequest x) => x.LatestTimestamp, (ref AlgoSdk.DryrunRequest x, System.UInt64 value) => x.LatestTimestamp = value, false).Assign("protocol-version", null, (AlgoSdk.DryrunRequest x) => x.ProtocolVersion, (ref AlgoSdk.DryrunRequest x, Unity.Collections.FixedString64Bytes value) => x.ProtocolVersion = value, false).Assign("round", null, (AlgoSdk.DryrunRequest x) => x.Round, (ref AlgoSdk.DryrunRequest x, System.UInt64 value) => x.Round = value, false).Assign("sources", null, (AlgoSdk.DryrunRequest x) => x.Sources, (ref AlgoSdk.DryrunRequest x, AlgoSdk.DryrunSource[] value) => x.Sources = value, AlgoSdk.ArrayComparer<AlgoSdk.DryrunSource>.Instance, false).Assign("txns", null, (AlgoSdk.DryrunRequest x) => x.Transactions, (ref AlgoSdk.DryrunRequest x, AlgoSdk.Transaction[] value) => x.Transactions = value, AlgoSdk.ArrayComparer<AlgoSdk.Transaction>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunSource[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.DryrunSource>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Transaction[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Transaction>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunResults), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DryrunResults>().Assign("error", null, (AlgoSdk.DryrunResults x) => x.Error, (ref AlgoSdk.DryrunResults x, System.String value) => x.Error = value, AlgoSdk.StringComparer.Instance, false).Assign("protocol-version", null, (AlgoSdk.DryrunResults x) => x.ProtocolVersion, (ref AlgoSdk.DryrunResults x, Unity.Collections.FixedString128Bytes value) => x.ProtocolVersion = value, false).Assign("txns", null, (AlgoSdk.DryrunResults x) => x.Txns, (ref AlgoSdk.DryrunResults x, AlgoSdk.DryrunTxnResult[] value) => x.Txns = value, AlgoSdk.ArrayComparer<AlgoSdk.DryrunTxnResult>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunTxnResult[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.DryrunTxnResult>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunSource), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DryrunSource>().Assign("app-index", null, (AlgoSdk.DryrunSource x) => x.AppIndex, (ref AlgoSdk.DryrunSource x, System.UInt64 value) => x.AppIndex = value, false).Assign("field-name", null, (AlgoSdk.DryrunSource x) => x.FieldName, (ref AlgoSdk.DryrunSource x, Unity.Collections.FixedString32Bytes value) => x.FieldName = value, false).Assign("source", null, (AlgoSdk.DryrunSource x) => x.Source, (ref AlgoSdk.DryrunSource x, System.String value) => x.Source = value, AlgoSdk.StringComparer.Instance, false).Assign("txn-index", null, (AlgoSdk.DryrunSource x) => x.TransactionIndex, (ref AlgoSdk.DryrunSource x, System.UInt64 value) => x.TransactionIndex = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunState), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DryrunState>().Assign("error", null, (AlgoSdk.DryrunState x) => x.Error, (ref AlgoSdk.DryrunState x, Unity.Collections.FixedString128Bytes value) => x.Error = value, false).Assign("line", null, (AlgoSdk.DryrunState x) => x.Line, (ref AlgoSdk.DryrunState x, System.UInt64 value) => x.Line = value, false).Assign("pc", null, (AlgoSdk.DryrunState x) => x.ProgramCounter, (ref AlgoSdk.DryrunState x, System.UInt64 value) => x.ProgramCounter = value, false).Assign("scratch", null, (AlgoSdk.DryrunState x) => x.Scratch, (ref AlgoSdk.DryrunState x, AlgoSdk.TealValue[] value) => x.Scratch = value, AlgoSdk.ArrayComparer<AlgoSdk.TealValue>.Instance, false).Assign("stack", null, (AlgoSdk.DryrunState x) => x.Stack, (ref AlgoSdk.DryrunState x, AlgoSdk.TealValue[] value) => x.Stack = value, AlgoSdk.ArrayComparer<AlgoSdk.TealValue>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealValue[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.TealValue>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunTxnResult), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.DryrunTxnResult>().Assign("app-call-messages", null, (AlgoSdk.DryrunTxnResult x) => x.AppCallMessages, (ref AlgoSdk.DryrunTxnResult x, Unity.Collections.FixedString128Bytes[] value) => x.AppCallMessages = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedString128Bytes>.Instance, false).Assign("app-call-trace", null, (AlgoSdk.DryrunTxnResult x) => x.AppCallTrace, (ref AlgoSdk.DryrunTxnResult x, AlgoSdk.DryrunState[] value) => x.AppCallTrace = value, AlgoSdk.ArrayComparer<AlgoSdk.DryrunState>.Instance, false).Assign("cost", null, (AlgoSdk.DryrunTxnResult x) => x.Cost, (ref AlgoSdk.DryrunTxnResult x, System.UInt64 value) => x.Cost = value, false).Assign("disassembly", null, (AlgoSdk.DryrunTxnResult x) => x.Disassembly, (ref AlgoSdk.DryrunTxnResult x, Unity.Collections.FixedString128Bytes[] value) => x.Disassembly = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedString128Bytes>.Instance, false).Assign("global-delta", null, (AlgoSdk.DryrunTxnResult x) => x.GlobalDelta, (ref AlgoSdk.DryrunTxnResult x, AlgoSdk.EvalDeltaKeyValue[] value) => x.GlobalDelta = value, AlgoSdk.ArrayComparer<AlgoSdk.EvalDeltaKeyValue>.Instance, false).Assign("local-deltas", null, (AlgoSdk.DryrunTxnResult x) => x.LocalDeltas, (ref AlgoSdk.DryrunTxnResult x, AlgoSdk.AccountStateDelta[] value) => x.LocalDeltas = value, AlgoSdk.ArrayComparer<AlgoSdk.AccountStateDelta>.Instance, false).Assign("logic-sig-messages", null, (AlgoSdk.DryrunTxnResult x) => x.LogicSigMessages, (ref AlgoSdk.DryrunTxnResult x, Unity.Collections.FixedString128Bytes[] value) => x.LogicSigMessages = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedString128Bytes>.Instance, false).Assign("logic-sig-trace", null, (AlgoSdk.DryrunTxnResult x) => x.LogicSigTrace, (ref AlgoSdk.DryrunTxnResult x, AlgoSdk.DryrunState[] value) => x.LogicSigTrace = value, AlgoSdk.ArrayComparer<AlgoSdk.DryrunState>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(Unity.Collections.FixedString128Bytes[]), new AlgoSdk.Formatters.ArrayFormatter<Unity.Collections.FixedString128Bytes>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.DryrunState[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.DryrunState>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AccountStateDelta[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.AccountStateDelta>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.EncryptedPayload), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletConnect.EncryptedPayload>().Assign("iv", null, (AlgoSdk.WalletConnect.EncryptedPayload x) => x.Iv, (ref AlgoSdk.WalletConnect.EncryptedPayload x, System.Byte[] value) => x.Iv = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("hmac", null, (AlgoSdk.WalletConnect.EncryptedPayload x) => x.Signature, (ref AlgoSdk.WalletConnect.EncryptedPayload x, System.Byte[] value) => x.Signature = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("data", null, (AlgoSdk.WalletConnect.EncryptedPayload x) => x.Data, (ref AlgoSdk.WalletConnect.EncryptedPayload x, System.Byte[] value) => x.Data = value, AlgoSdk.ArrayComparer<byte>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.EvalDelta), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.EvalDelta>().Assign("action", "at", (AlgoSdk.EvalDelta x) => x.Action, (ref AlgoSdk.EvalDelta x, AlgoSdk.EvalDeltaAction value) => x.Action = value, AlgoSdk.ByteEnumComparer<AlgoSdk.EvalDeltaAction>.Instance, false).Assign("bytes", "bs", (AlgoSdk.EvalDelta x) => x.Bytes, (ref AlgoSdk.EvalDelta x, AlgoSdk.TealBytes value) => x.Bytes = value, false).Assign("uint", "ui", (AlgoSdk.EvalDelta x) => x.UInt, (ref AlgoSdk.EvalDelta x, System.UInt64 value) => x.UInt = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.EvalDeltaKeyValue), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.EvalDeltaKeyValue>().Assign("key", "key", (AlgoSdk.EvalDeltaKeyValue x) => x.Key, (ref AlgoSdk.EvalDeltaKeyValue x, Unity.Collections.FixedString64Bytes value) => x.Key = value, false).Assign("value", "value", (AlgoSdk.EvalDeltaKeyValue x) => x.Value, (ref AlgoSdk.EvalDeltaKeyValue x, AlgoSdk.EvalDelta value) => x.Value = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ExportKeyRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ExportKeyRequest>().Assign("address", null, (AlgoSdk.ExportKeyRequest x) => x.Address, (ref AlgoSdk.ExportKeyRequest x, AlgoSdk.Address value) => x.Address = value, false).Assign("wallet_handle_token", null, (AlgoSdk.ExportKeyRequest x) => x.WalletHandleToken, (ref AlgoSdk.ExportKeyRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false).Assign("wallet_password", null, (AlgoSdk.ExportKeyRequest x) => x.WalletPassword, (ref AlgoSdk.ExportKeyRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ExportKeyResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ExportKeyResponse>().Assign("error", null, (AlgoSdk.ExportKeyResponse x) => x.Error, (ref AlgoSdk.ExportKeyResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.ExportKeyResponse x) => x.Message, (ref AlgoSdk.ExportKeyResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false).Assign("private_key", null, (AlgoSdk.ExportKeyResponse x) => x.PrivateKey, (ref AlgoSdk.ExportKeyResponse x, AlgoSdk.PrivateKey value) => x.PrivateKey = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ExportMasterKeyRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ExportMasterKeyRequest>().Assign("wallet_handle_token", null, (AlgoSdk.ExportMasterKeyRequest x) => x.WalletHandleToken, (ref AlgoSdk.ExportMasterKeyRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false).Assign("wallet_password", null, (AlgoSdk.ExportMasterKeyRequest x) => x.WalletPassword, (ref AlgoSdk.ExportMasterKeyRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ExportMasterKeyResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ExportMasterKeyResponse>().Assign("master_derivation_key", null, (AlgoSdk.ExportMasterKeyResponse x) => x.MasterDerivationKey, (ref AlgoSdk.ExportMasterKeyResponse x, AlgoSdk.PrivateKey value) => x.MasterDerivationKey = value, false).Assign("error", null, (AlgoSdk.ExportMasterKeyResponse x) => x.Error, (ref AlgoSdk.ExportMasterKeyResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.ExportMasterKeyResponse x) => x.Message, (ref AlgoSdk.ExportMasterKeyResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ExportMultisigRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ExportMultisigRequest>().Assign("address", null, (AlgoSdk.ExportMultisigRequest x) => x.Address, (ref AlgoSdk.ExportMultisigRequest x, AlgoSdk.Address value) => x.Address = value, false).Assign("wallet_handle_token", null, (AlgoSdk.ExportMultisigRequest x) => x.WalletHandleToken, (ref AlgoSdk.ExportMultisigRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ExportMultisigResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ExportMultisigResponse>().Assign("error", null, (AlgoSdk.ExportMultisigResponse x) => x.Error, (ref AlgoSdk.ExportMultisigResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.ExportMultisigResponse x) => x.Message, (ref AlgoSdk.ExportMultisigResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false).Assign("multisig_version", null, (AlgoSdk.ExportMultisigResponse x) => x.MultisigVersion, (ref AlgoSdk.ExportMultisigResponse x, System.Byte value) => x.MultisigVersion = value, false).Assign("pks", null, (AlgoSdk.ExportMultisigResponse x) => x.Pks, (ref AlgoSdk.ExportMultisigResponse x, AlgoSdk.Crypto.Ed25519.PublicKey[] value) => x.Pks = value, AlgoSdk.ArrayComparer<AlgoSdk.Crypto.Ed25519.PublicKey>.Instance, false).Assign("threshold", null, (AlgoSdk.ExportMultisigResponse x) => x.Threshold, (ref AlgoSdk.ExportMultisigResponse x, System.Byte value) => x.Threshold = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Crypto.Ed25519.PublicKey[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Crypto.Ed25519.PublicKey>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.GenerateKeyRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.GenerateKeyRequest>().Assign("display_mnemonic", null, (AlgoSdk.GenerateKeyRequest x) => x.DisplayMnemonic, (ref AlgoSdk.GenerateKeyRequest x, AlgoSdk.Optional<System.Boolean> value) => x.DisplayMnemonic = value, false).Assign("wallet_handle_token", null, (AlgoSdk.GenerateKeyRequest x) => x.WalletHandleToken, (ref AlgoSdk.GenerateKeyRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.GenerateKeyResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.GenerateKeyResponse>().Assign("address", null, (AlgoSdk.GenerateKeyResponse x) => x.Address, (ref AlgoSdk.GenerateKeyResponse x, AlgoSdk.Address value) => x.Address = value, false).Assign("error", null, (AlgoSdk.GenerateKeyResponse x) => x.Error, (ref AlgoSdk.GenerateKeyResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.GenerateKeyResponse x) => x.Message, (ref AlgoSdk.GenerateKeyResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.HealthCheck), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.HealthCheck>().Assign("data", "data", (AlgoSdk.HealthCheck x) => x.Data, (ref AlgoSdk.HealthCheck x, AlgoSdk.AlgoApiObject value) => x.Data = value, false).Assign("db-available", "db-available", (AlgoSdk.HealthCheck x) => x.DatabaseAvailable, (ref AlgoSdk.HealthCheck x, System.Boolean value) => x.DatabaseAvailable = value, false).Assign("errors", "errors", (AlgoSdk.HealthCheck x) => x.Errors, (ref AlgoSdk.HealthCheck x, System.String[] value) => x.Errors = value, AlgoSdk.ArrayComparer<string, AlgoSdk.StringComparer>.Instance, false).Assign("is-migrating", "is-migrating", (AlgoSdk.HealthCheck x) => x.IsMigrating, (ref AlgoSdk.HealthCheck x, System.Boolean value) => x.IsMigrating = value, false).Assign("message", "message", (AlgoSdk.HealthCheck x) => x.Message, (ref AlgoSdk.HealthCheck x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false).Assign("round", "round", (AlgoSdk.HealthCheck x) => x.Round, (ref AlgoSdk.HealthCheck x, System.UInt64 value) => x.Round = value, false).Assign("version", "version", (AlgoSdk.HealthCheck x) => x.Version, (ref AlgoSdk.HealthCheck x, System.String value) => x.Version = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ImportKeyRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ImportKeyRequest>().Assign("private_key", null, (AlgoSdk.ImportKeyRequest x) => x.PrivateKey, (ref AlgoSdk.ImportKeyRequest x, AlgoSdk.PrivateKey value) => x.PrivateKey = value, false).Assign("wallet_handle_token", null, (AlgoSdk.ImportKeyRequest x) => x.WalletHandleToken, (ref AlgoSdk.ImportKeyRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ImportKeyResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ImportKeyResponse>().Assign("address", null, (AlgoSdk.ImportKeyResponse x) => x.Address, (ref AlgoSdk.ImportKeyResponse x, AlgoSdk.Address value) => x.Address = value, false).Assign("error", null, (AlgoSdk.ImportKeyResponse x) => x.Error, (ref AlgoSdk.ImportKeyResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.ImportKeyResponse x) => x.Message, (ref AlgoSdk.ImportKeyResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ImportMultisigRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ImportMultisigRequest>().Assign("multisig_version", null, (AlgoSdk.ImportMultisigRequest x) => x.Version, (ref AlgoSdk.ImportMultisigRequest x, System.Byte value) => x.Version = value, false).Assign("pks", null, (AlgoSdk.ImportMultisigRequest x) => x.PublicKeys, (ref AlgoSdk.ImportMultisigRequest x, AlgoSdk.Crypto.Ed25519.PublicKey[] value) => x.PublicKeys = value, AlgoSdk.ArrayComparer<AlgoSdk.Crypto.Ed25519.PublicKey>.Instance, false).Assign("threshold", null, (AlgoSdk.ImportMultisigRequest x) => x.Threshold, (ref AlgoSdk.ImportMultisigRequest x, System.Byte value) => x.Threshold = value, false).Assign("wallet_handle_token", null, (AlgoSdk.ImportMultisigRequest x) => x.WalletHandleToken, (ref AlgoSdk.ImportMultisigRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ImportMultisigResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ImportMultisigResponse>().Assign("address", null, (AlgoSdk.ImportMultisigResponse x) => x.Address, (ref AlgoSdk.ImportMultisigResponse x, AlgoSdk.Address value) => x.Address = value, false).Assign("error", null, (AlgoSdk.ImportMultisigResponse x) => x.Error, (ref AlgoSdk.ImportMultisigResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.ImportMultisigResponse x) => x.Message, (ref AlgoSdk.ImportMultisigResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.InitWalletHandleTokenRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.InitWalletHandleTokenRequest>().Assign("wallet_id", null, (AlgoSdk.InitWalletHandleTokenRequest x) => x.WalletId, (ref AlgoSdk.InitWalletHandleTokenRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletId = value, false).Assign("wallet_password", null, (AlgoSdk.InitWalletHandleTokenRequest x) => x.WalletPassword, (ref AlgoSdk.InitWalletHandleTokenRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.InitWalletHandleTokenResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.InitWalletHandleTokenResponse>().Assign("wallet_handle_token", null, (AlgoSdk.InitWalletHandleTokenResponse x) => x.WalletHandleToken, (ref AlgoSdk.InitWalletHandleTokenResponse x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false).Assign("error", null, (AlgoSdk.InitWalletHandleTokenResponse x) => x.Error, (ref AlgoSdk.InitWalletHandleTokenResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.InitWalletHandleTokenResponse x) => x.Message, (ref AlgoSdk.InitWalletHandleTokenResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.KeyRegTxn), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.KeyRegTxn>().Assign("fee", "fee", (AlgoSdk.KeyRegTxn x) => x.Fee, (ref AlgoSdk.KeyRegTxn x, System.UInt64 value) => x.Fee = value, false).Assign("first-valid", "fv", (AlgoSdk.KeyRegTxn x) => x.FirstValidRound, (ref AlgoSdk.KeyRegTxn x, System.UInt64 value) => x.FirstValidRound = value, false).Assign("genesis-hash", "gh", (AlgoSdk.KeyRegTxn x) => x.GenesisHash, (ref AlgoSdk.KeyRegTxn x, AlgoSdk.GenesisHash value) => x.GenesisHash = value, false).Assign("last-valid", "lv", (AlgoSdk.KeyRegTxn x) => x.LastValidRound, (ref AlgoSdk.KeyRegTxn x, System.UInt64 value) => x.LastValidRound = value, false).Assign("sender", "snd", (AlgoSdk.KeyRegTxn x) => x.Sender, (ref AlgoSdk.KeyRegTxn x, AlgoSdk.Address value) => x.Sender = value, false).Assign("tx-type", "type", (AlgoSdk.KeyRegTxn x) => x.TransactionType, (ref AlgoSdk.KeyRegTxn x, AlgoSdk.TransactionType value) => x.TransactionType = value, AlgoSdk.ByteEnumComparer<AlgoSdk.TransactionType>.Instance, false).Assign("genesis-id", "gen", (AlgoSdk.KeyRegTxn x) => x.GenesisId, (ref AlgoSdk.KeyRegTxn x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value, false).Assign("group", "grp", (AlgoSdk.KeyRegTxn x) => x.Group, (ref AlgoSdk.KeyRegTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Group = value, false).Assign("lease", "lx", (AlgoSdk.KeyRegTxn x) => x.Lease, (ref AlgoSdk.KeyRegTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Lease = value, false).Assign("note", "note", (AlgoSdk.KeyRegTxn x) => x.Note, (ref AlgoSdk.KeyRegTxn x, System.Byte[] value) => x.Note = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("rekey-to", "rekey", (AlgoSdk.KeyRegTxn x) => x.RekeyTo, (ref AlgoSdk.KeyRegTxn x, AlgoSdk.Address value) => x.RekeyTo = value, false).Assign(null, "votekey", (AlgoSdk.KeyRegTxn x) => x.VoteParticipationKey, (ref AlgoSdk.KeyRegTxn x, AlgoSdk.Crypto.Ed25519.PublicKey value) => x.VoteParticipationKey = value, false).Assign(null, "selkey", (AlgoSdk.KeyRegTxn x) => x.SelectionParticipationKey, (ref AlgoSdk.KeyRegTxn x, AlgoSdk.VrfPubKey value) => x.SelectionParticipationKey = value, false).Assign(null, "votefst", (AlgoSdk.KeyRegTxn x) => x.VoteFirst, (ref AlgoSdk.KeyRegTxn x, System.UInt64 value) => x.VoteFirst = value, false).Assign(null, "votelst", (AlgoSdk.KeyRegTxn x) => x.VoteLast, (ref AlgoSdk.KeyRegTxn x, System.UInt64 value) => x.VoteLast = value, false).Assign(null, "votekd", (AlgoSdk.KeyRegTxn x) => x.VoteKeyDilution, (ref AlgoSdk.KeyRegTxn x, System.UInt64 value) => x.VoteKeyDilution = value, false).Assign(null, "nonpart", (AlgoSdk.KeyRegTxn x) => x.NonParticipation, (ref AlgoSdk.KeyRegTxn x, AlgoSdk.Optional<System.Boolean> value) => x.NonParticipation = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.LedgerSupply), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.LedgerSupply>().Assign("current_round", null, (AlgoSdk.LedgerSupply x) => x.Round, (ref AlgoSdk.LedgerSupply x, System.UInt64 value) => x.Round = value, false).Assign("online-money", null, (AlgoSdk.LedgerSupply x) => x.OnlineMoney, (ref AlgoSdk.LedgerSupply x, System.UInt64 value) => x.OnlineMoney = value, false).Assign("total-money", null, (AlgoSdk.LedgerSupply x) => x.TotalMoney, (ref AlgoSdk.LedgerSupply x, System.UInt64 value) => x.TotalMoney = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ListKeysRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ListKeysRequest>().Assign("wallet_handle_token", null, (AlgoSdk.ListKeysRequest x) => x.WalletHandleToken, (ref AlgoSdk.ListKeysRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ListKeysResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ListKeysResponse>().Assign("addresses", null, (AlgoSdk.ListKeysResponse x) => x.Addresses, (ref AlgoSdk.ListKeysResponse x, AlgoSdk.Address[] value) => x.Addresses = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance, false).Assign("error", null, (AlgoSdk.ListKeysResponse x) => x.Error, (ref AlgoSdk.ListKeysResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.ListKeysResponse x) => x.Message, (ref AlgoSdk.ListKeysResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ListMultisigRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ListMultisigRequest>().Assign("wallet_handle_token", null, (AlgoSdk.ListMultisigRequest x) => x.WalletHandleToken, (ref AlgoSdk.ListMultisigRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ListMultisigResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ListMultisigResponse>().Assign("addresses", null, (AlgoSdk.ListMultisigResponse x) => x.Addresses, (ref AlgoSdk.ListMultisigResponse x, AlgoSdk.Address[] value) => x.Addresses = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance, false).Assign("error", null, (AlgoSdk.ListMultisigResponse x) => x.Error, (ref AlgoSdk.ListMultisigResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.ListMultisigResponse x) => x.Message, (ref AlgoSdk.ListMultisigResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ListWalletsResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ListWalletsResponse>().Assign("error", null, (AlgoSdk.ListWalletsResponse x) => x.Error, (ref AlgoSdk.ListWalletsResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.ListWalletsResponse x) => x.Message, (ref AlgoSdk.ListWalletsResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false).Assign("wallets", null, (AlgoSdk.ListWalletsResponse x) => x.Wallets, (ref AlgoSdk.ListWalletsResponse x, AlgoSdk.Wallet[] value) => x.Wallets = value, AlgoSdk.ArrayComparer<AlgoSdk.Wallet>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Wallet[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Wallet>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.LogicSig), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.LogicSig>().Assign("logicsig", "l", (AlgoSdk.LogicSig x) => x.Program, (ref AlgoSdk.LogicSig x, System.Byte[] value) => x.Program = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("args", "arg", (AlgoSdk.LogicSig x) => x.Args, (ref AlgoSdk.LogicSig x, Unity.Collections.FixedList128Bytes<System.Byte>[] value) => x.Args = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedList128Bytes<byte>>.Instance, false).Assign("signature", "sig", (AlgoSdk.LogicSig x) => x.Sig, (ref AlgoSdk.LogicSig x, AlgoSdk.Sig value) => x.Sig = value, false).Assign("multisig-signature", "msig", (AlgoSdk.LogicSig x) => x.Multisig, (ref AlgoSdk.LogicSig x, AlgoSdk.Multisig value) => x.Multisig = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(Unity.Collections.FixedList128Bytes<byte>[]), new AlgoSdk.Formatters.ArrayFormatter<Unity.Collections.FixedList128Bytes<byte>>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.MerkleProof), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.MerkleProof>().Assign("idx", "idx", (AlgoSdk.MerkleProof x) => x.TransactionIndex, (ref AlgoSdk.MerkleProof x, System.UInt64 value) => x.TransactionIndex = value, false).Assign("proof", "proof", (AlgoSdk.MerkleProof x) => x.Proof, (ref AlgoSdk.MerkleProof x, System.String value) => x.Proof = value, AlgoSdk.StringComparer.Instance, false).Assign("stibhash", "stibhash", (AlgoSdk.MerkleProof x) => x.SignedTransactionHash, (ref AlgoSdk.MerkleProof x, System.String value) => x.SignedTransactionHash = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.MiniAssetHolding), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.MiniAssetHolding>().Assign("address", null, (AlgoSdk.MiniAssetHolding x) => x.Address, (ref AlgoSdk.MiniAssetHolding x, AlgoSdk.Address value) => x.Address = value, false).Assign("amount", null, (AlgoSdk.MiniAssetHolding x) => x.Amount, (ref AlgoSdk.MiniAssetHolding x, System.UInt64 value) => x.Amount = value, false).Assign("deleted", null, (AlgoSdk.MiniAssetHolding x) => x.Deleted, (ref AlgoSdk.MiniAssetHolding x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value, false).Assign("is-frozen", null, (AlgoSdk.MiniAssetHolding x) => x.IsFrozen, (ref AlgoSdk.MiniAssetHolding x, AlgoSdk.Optional<System.Boolean> value) => x.IsFrozen = value, false).Assign("opted-in-at-round", null, (AlgoSdk.MiniAssetHolding x) => x.OptedInAtRound, (ref AlgoSdk.MiniAssetHolding x, System.UInt64 value) => x.OptedInAtRound = value, false).Assign("opted-out-at-round", null, (AlgoSdk.MiniAssetHolding x) => x.OptedOutAtRound, (ref AlgoSdk.MiniAssetHolding x, System.UInt64 value) => x.OptedOutAtRound = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Multisig), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Multisig>().Assign("subsignature", "subsig", (AlgoSdk.Multisig x) => x.Subsigs, (ref AlgoSdk.Multisig x, AlgoSdk.Multisig.Subsig[] value) => x.Subsigs = value, AlgoSdk.ArrayComparer<AlgoSdk.Multisig.Subsig>.Instance, false).Assign("threshold", "thr", (AlgoSdk.Multisig x) => x.Threshold, (ref AlgoSdk.Multisig x, System.Byte value) => x.Threshold = value, false).Assign("version", "v", (AlgoSdk.Multisig x) => x.Version, (ref AlgoSdk.Multisig x, System.Byte value) => x.Version = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Multisig.Subsig[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.Multisig.Subsig>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.MultisigMetadata), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletConnect.MultisigMetadata>().Assign("version", null, (AlgoSdk.WalletConnect.MultisigMetadata x) => x.Version, (ref AlgoSdk.WalletConnect.MultisigMetadata x, System.Byte value) => x.Version = value, false).Assign("threshold", null, (AlgoSdk.WalletConnect.MultisigMetadata x) => x.Threshold, (ref AlgoSdk.WalletConnect.MultisigMetadata x, System.Byte value) => x.Threshold = value, false).Assign("addrs", null, (AlgoSdk.WalletConnect.MultisigMetadata x) => x.Addresses, (ref AlgoSdk.WalletConnect.MultisigMetadata x, AlgoSdk.Address[] value) => x.Addresses = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.NetworkMessage), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletConnect.NetworkMessage>().Assign("topic", null, (AlgoSdk.WalletConnect.NetworkMessage x) => x.Topic, (ref AlgoSdk.WalletConnect.NetworkMessage x, System.String value) => x.Topic = value, AlgoSdk.StringComparer.Instance, false).Assign("type", null, (AlgoSdk.WalletConnect.NetworkMessage x) => x.Type, (ref AlgoSdk.WalletConnect.NetworkMessage x, System.String value) => x.Type = value, AlgoSdk.StringComparer.Instance, false).Assign("payload", null, (AlgoSdk.WalletConnect.NetworkMessage x) => x.Payload, (ref AlgoSdk.WalletConnect.NetworkMessage x, AlgoSdk.AlgoApiObject value) => x.Payload = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AppCallTxn.Params), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AppCallTxn.Params>().Assign("application-id", "apid", (AlgoSdk.AppCallTxn.Params x) => x.ApplicationId, (ref AlgoSdk.AppCallTxn.Params x, System.UInt64 value) => x.ApplicationId = value, false).Assign("on-completion", "apan", (AlgoSdk.AppCallTxn.Params x) => x.OnComplete, (ref AlgoSdk.AppCallTxn.Params x, AlgoSdk.OnCompletion value) => x.OnComplete = value, AlgoSdk.ByteEnumComparer<AlgoSdk.OnCompletion>.Instance, false).Assign("approval-program", "apap", (AlgoSdk.AppCallTxn.Params x) => x.ApprovalProgram, (ref AlgoSdk.AppCallTxn.Params x, AlgoSdk.CompiledTeal value) => x.ApprovalProgram = value, false).Assign("clear-state-program", "apsu", (AlgoSdk.AppCallTxn.Params x) => x.ClearStateProgram, (ref AlgoSdk.AppCallTxn.Params x, AlgoSdk.CompiledTeal value) => x.ClearStateProgram = value, false).Assign("application-args", "apaa", (AlgoSdk.AppCallTxn.Params x) => x.AppArguments, (ref AlgoSdk.AppCallTxn.Params x, AlgoSdk.CompiledTeal value) => x.AppArguments = value, false).Assign("accounts", "apat", (AlgoSdk.AppCallTxn.Params x) => x.Accounts, (ref AlgoSdk.AppCallTxn.Params x, AlgoSdk.Address[] value) => x.Accounts = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance, false).Assign("foreign-apps", "apfa", (AlgoSdk.AppCallTxn.Params x) => x.ForeignApps, (ref AlgoSdk.AppCallTxn.Params x, System.UInt64[] value) => x.ForeignApps = value, AlgoSdk.ArrayComparer<ulong>.Instance, false).Assign("foreign-assets", "apas", (AlgoSdk.AppCallTxn.Params x) => x.ForeignAssets, (ref AlgoSdk.AppCallTxn.Params x, System.UInt64[] value) => x.ForeignAssets = value, AlgoSdk.ArrayComparer<ulong>.Instance, false).Assign("global-state-schema", "global-state-schema", (AlgoSdk.AppCallTxn.Params x) => x.GlobalStateSchema, (ref AlgoSdk.AppCallTxn.Params x, AlgoSdk.StateSchema value) => x.GlobalStateSchema = value, false).Assign("local-state-schema", "local-state-schema", (AlgoSdk.AppCallTxn.Params x) => x.LocalStateSchema, (ref AlgoSdk.AppCallTxn.Params x, AlgoSdk.StateSchema value) => x.LocalStateSchema = value, false).Assign("extra-program-pages", "epp", (AlgoSdk.AppCallTxn.Params x) => x.ExtraProgramPages, (ref AlgoSdk.AppCallTxn.Params x, System.UInt64 value) => x.ExtraProgramPages = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetConfigTxn.Params), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetConfigTxn.Params>().Assign("asset-id", "xaid", (AlgoSdk.AssetConfigTxn.Params x) => x.ConfigAsset, (ref AlgoSdk.AssetConfigTxn.Params x, System.UInt64 value) => x.ConfigAsset = value, false).Assign("params", "params", (AlgoSdk.AssetConfigTxn.Params x) => x.AssetParams, (ref AlgoSdk.AssetConfigTxn.Params x, AlgoSdk.AssetParams value) => x.AssetParams = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetFreezeTxn.Params), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetFreezeTxn.Params>().Assign("address", "fadd", (AlgoSdk.AssetFreezeTxn.Params x) => x.FreezeAccount, (ref AlgoSdk.AssetFreezeTxn.Params x, AlgoSdk.Address value) => x.FreezeAccount = value, false).Assign("asset-id", "faid", (AlgoSdk.AssetFreezeTxn.Params x) => x.FreezeAsset, (ref AlgoSdk.AssetFreezeTxn.Params x, System.UInt64 value) => x.FreezeAsset = value, false).Assign("new-freeze-status", "afrz", (AlgoSdk.AssetFreezeTxn.Params x) => x.AssetFrozen, (ref AlgoSdk.AssetFreezeTxn.Params x, AlgoSdk.Optional<System.Boolean> value) => x.AssetFrozen = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AssetTransferTxn.Params), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.AssetTransferTxn.Params>().Assign("asset-id", "xaid", (AlgoSdk.AssetTransferTxn.Params x) => x.XferAsset, (ref AlgoSdk.AssetTransferTxn.Params x, System.UInt64 value) => x.XferAsset = value, false).Assign("amount", "aamt", (AlgoSdk.AssetTransferTxn.Params x) => x.AssetAmount, (ref AlgoSdk.AssetTransferTxn.Params x, System.UInt64 value) => x.AssetAmount = value, false).Assign("sender", "asnd", (AlgoSdk.AssetTransferTxn.Params x) => x.AssetSender, (ref AlgoSdk.AssetTransferTxn.Params x, AlgoSdk.Address value) => x.AssetSender = value, false).Assign("receiver", "arcv", (AlgoSdk.AssetTransferTxn.Params x) => x.AssetReceiver, (ref AlgoSdk.AssetTransferTxn.Params x, AlgoSdk.Address value) => x.AssetReceiver = value, false).Assign("close-to", "aclose", (AlgoSdk.AssetTransferTxn.Params x) => x.AssetCloseTo, (ref AlgoSdk.AssetTransferTxn.Params x, AlgoSdk.Address value) => x.AssetCloseTo = value, false).Assign("close-amount", "close-amount", (AlgoSdk.AssetTransferTxn.Params x) => x.CloseAmount, (ref AlgoSdk.AssetTransferTxn.Params x, System.UInt64 value) => x.CloseAmount = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.KeyRegTxn.Params), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.KeyRegTxn.Params>().Assign("vote-participation-key", "votekey", (AlgoSdk.KeyRegTxn.Params x) => x.VoteParticipationKey, (ref AlgoSdk.KeyRegTxn.Params x, AlgoSdk.Crypto.Ed25519.PublicKey value) => x.VoteParticipationKey = value, false).Assign("selection-participation-key", "selkey", (AlgoSdk.KeyRegTxn.Params x) => x.SelectionParticipationKey, (ref AlgoSdk.KeyRegTxn.Params x, AlgoSdk.VrfPubKey value) => x.SelectionParticipationKey = value, false).Assign("vote-first-valid", "votefst", (AlgoSdk.KeyRegTxn.Params x) => x.VoteFirst, (ref AlgoSdk.KeyRegTxn.Params x, System.UInt64 value) => x.VoteFirst = value, false).Assign("vote-last-valid", "votelst", (AlgoSdk.KeyRegTxn.Params x) => x.VoteLast, (ref AlgoSdk.KeyRegTxn.Params x, System.UInt64 value) => x.VoteLast = value, false).Assign("vote-key-dilution", "votekd", (AlgoSdk.KeyRegTxn.Params x) => x.VoteKeyDilution, (ref AlgoSdk.KeyRegTxn.Params x, System.UInt64 value) => x.VoteKeyDilution = value, false).Assign("non-participation", "nonpart", (AlgoSdk.KeyRegTxn.Params x) => x.NonParticipation, (ref AlgoSdk.KeyRegTxn.Params x, AlgoSdk.Optional<System.Boolean> value) => x.NonParticipation = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.PaymentTxn.Params), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.PaymentTxn.Params>().Assign("receiver", "rcv", (AlgoSdk.PaymentTxn.Params x) => x.Receiver, (ref AlgoSdk.PaymentTxn.Params x, AlgoSdk.Address value) => x.Receiver = value, false).Assign("amount", "amt", (AlgoSdk.PaymentTxn.Params x) => x.Amount, (ref AlgoSdk.PaymentTxn.Params x, System.UInt64 value) => x.Amount = value, false).Assign("close-remainder-to", "close", (AlgoSdk.PaymentTxn.Params x) => x.CloseRemainderTo, (ref AlgoSdk.PaymentTxn.Params x, AlgoSdk.Address value) => x.CloseRemainderTo = value, false).Assign("close-amount", "close-amount", (AlgoSdk.PaymentTxn.Params x) => x.CloseAmount, (ref AlgoSdk.PaymentTxn.Params x, System.UInt64 value) => x.CloseAmount = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.PaymentTxn), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.PaymentTxn>().Assign("fee", "fee", (AlgoSdk.PaymentTxn x) => x.Fee, (ref AlgoSdk.PaymentTxn x, System.UInt64 value) => x.Fee = value, false).Assign("first-valid", "fv", (AlgoSdk.PaymentTxn x) => x.FirstValidRound, (ref AlgoSdk.PaymentTxn x, System.UInt64 value) => x.FirstValidRound = value, false).Assign("genesis-hash", "gh", (AlgoSdk.PaymentTxn x) => x.GenesisHash, (ref AlgoSdk.PaymentTxn x, AlgoSdk.GenesisHash value) => x.GenesisHash = value, false).Assign("last-valid", "lv", (AlgoSdk.PaymentTxn x) => x.LastValidRound, (ref AlgoSdk.PaymentTxn x, System.UInt64 value) => x.LastValidRound = value, false).Assign("sender", "snd", (AlgoSdk.PaymentTxn x) => x.Sender, (ref AlgoSdk.PaymentTxn x, AlgoSdk.Address value) => x.Sender = value, false).Assign("tx-type", "type", (AlgoSdk.PaymentTxn x) => x.TransactionType, (ref AlgoSdk.PaymentTxn x, AlgoSdk.TransactionType value) => x.TransactionType = value, AlgoSdk.ByteEnumComparer<AlgoSdk.TransactionType>.Instance, false).Assign("genesis-id", "gen", (AlgoSdk.PaymentTxn x) => x.GenesisId, (ref AlgoSdk.PaymentTxn x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value, false).Assign("group", "grp", (AlgoSdk.PaymentTxn x) => x.Group, (ref AlgoSdk.PaymentTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Group = value, false).Assign("lease", "lx", (AlgoSdk.PaymentTxn x) => x.Lease, (ref AlgoSdk.PaymentTxn x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Lease = value, false).Assign("note", "note", (AlgoSdk.PaymentTxn x) => x.Note, (ref AlgoSdk.PaymentTxn x, System.Byte[] value) => x.Note = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("rekey-to", "rekey", (AlgoSdk.PaymentTxn x) => x.RekeyTo, (ref AlgoSdk.PaymentTxn x, AlgoSdk.Address value) => x.RekeyTo = value, false).Assign(null, "rcv", (AlgoSdk.PaymentTxn x) => x.Receiver, (ref AlgoSdk.PaymentTxn x, AlgoSdk.Address value) => x.Receiver = value, false).Assign(null, "amt", (AlgoSdk.PaymentTxn x) => x.Amount, (ref AlgoSdk.PaymentTxn x, System.UInt64 value) => x.Amount = value, false).Assign(null, "close", (AlgoSdk.PaymentTxn x) => x.CloseRemainderTo, (ref AlgoSdk.PaymentTxn x, AlgoSdk.Address value) => x.CloseRemainderTo = value, false).Assign("close-amount", "close-amount", (AlgoSdk.PaymentTxn x) => x.CloseAmount, (ref AlgoSdk.PaymentTxn x, System.UInt64 value) => x.CloseAmount = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.PendingTransaction), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.PendingTransaction>().Assign("application-index", "application-index", (AlgoSdk.PendingTransaction x) => x.ApplicationIndex, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.ApplicationIndex = value, false).Assign("asset-closing-amount", "asset-closing-amount", (AlgoSdk.PendingTransaction x) => x.AssetClosingAmount, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.AssetClosingAmount = value, false).Assign("asset-index", "asset-index", (AlgoSdk.PendingTransaction x) => x.AssetIndex, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.AssetIndex = value, false).Assign("close-rewards", "close-rewards", (AlgoSdk.PendingTransaction x) => x.CloseRewards, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.CloseRewards = value, false).Assign("closing-amount", "closing-amount", (AlgoSdk.PendingTransaction x) => x.ClosingAmount, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.ClosingAmount = value, false).Assign("confirmed-round", "confirmed-round", (AlgoSdk.PendingTransaction x) => x.ConfirmedRound, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.ConfirmedRound = value, false).Assign("global-state-delta", "gd", (AlgoSdk.PendingTransaction x) => x.GlobalStateDelta, (ref AlgoSdk.PendingTransaction x, AlgoSdk.EvalDeltaKeyValue[] value) => x.GlobalStateDelta = value, AlgoSdk.ArrayComparer<AlgoSdk.EvalDeltaKeyValue>.Instance, false).Assign("inner-txns", "inner-txns", (AlgoSdk.PendingTransaction x) => x.InnerTransactions, (ref AlgoSdk.PendingTransaction x, AlgoSdk.PendingTransaction[] value) => x.InnerTransactions = value, AlgoSdk.ArrayComparer<AlgoSdk.PendingTransaction>.Instance, false).Assign("local-state-delta", "ld", (AlgoSdk.PendingTransaction x) => x.LocalStateDelta, (ref AlgoSdk.PendingTransaction x, AlgoSdk.AccountStateDelta[] value) => x.LocalStateDelta = value, AlgoSdk.ArrayComparer<AlgoSdk.AccountStateDelta>.Instance, false).Assign("logs", "lg", (AlgoSdk.PendingTransaction x) => x.Logs, (ref AlgoSdk.PendingTransaction x, System.String[] value) => x.Logs = value, AlgoSdk.ArrayComparer<string, AlgoSdk.StringComparer>.Instance, false).Assign("pool-error", "pool-error", (AlgoSdk.PendingTransaction x) => x.PoolError, (ref AlgoSdk.PendingTransaction x, Unity.Collections.FixedString128Bytes value) => x.PoolError = value, false).Assign("receiver-rewards", "receiver-rewards", (AlgoSdk.PendingTransaction x) => x.ReceiverRewards, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.ReceiverRewards = value, false).Assign("sender-rewards", "sender-rewards", (AlgoSdk.PendingTransaction x) => x.SenderRewards, (ref AlgoSdk.PendingTransaction x, System.UInt64 value) => x.SenderRewards = value, false).Assign("txn", "txn", (AlgoSdk.PendingTransaction x) => x.Transaction, (ref AlgoSdk.PendingTransaction x, AlgoSdk.SignedTransaction value) => x.Transaction = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.PendingTransaction[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.PendingTransaction>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.PendingTransactions), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.PendingTransactions>().Assign("top-transactions", "top-transactions", (AlgoSdk.PendingTransactions x) => x.TopTransactions, (ref AlgoSdk.PendingTransactions x, AlgoSdk.SignedTransaction[] value) => x.TopTransactions = value, AlgoSdk.ArrayComparer<AlgoSdk.SignedTransaction>.Instance, false).Assign("total-transactions", "total-transactions", (AlgoSdk.PendingTransactions x) => x.TotalTransactions, (ref AlgoSdk.PendingTransactions x, System.UInt64 value) => x.TotalTransactions = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignedTransaction[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.SignedTransaction>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ReleaseWalletHandleTokenRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.ReleaseWalletHandleTokenRequest>().Assign("wallet_handle_token", null, (AlgoSdk.ReleaseWalletHandleTokenRequest x) => x.WalletHandleToken, (ref AlgoSdk.ReleaseWalletHandleTokenRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.RenameWalletRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.RenameWalletRequest>().Assign("wallet_id", null, (AlgoSdk.RenameWalletRequest x) => x.WalletId, (ref AlgoSdk.RenameWalletRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletId = value, false).Assign("wallet_name", null, (AlgoSdk.RenameWalletRequest x) => x.WalletName, (ref AlgoSdk.RenameWalletRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletName = value, false).Assign("wallet_password", null, (AlgoSdk.RenameWalletRequest x) => x.WalletPassword, (ref AlgoSdk.RenameWalletRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.RenameWalletResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.RenameWalletResponse>().Assign("error", null, (AlgoSdk.RenameWalletResponse x) => x.Error, (ref AlgoSdk.RenameWalletResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.RenameWalletResponse x) => x.Message, (ref AlgoSdk.RenameWalletResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false).Assign("wallet", null, (AlgoSdk.RenameWalletResponse x) => x.Wallet, (ref AlgoSdk.RenameWalletResponse x, AlgoSdk.Wallet value) => x.Wallet = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.RenewWalletHandleTokenRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.RenewWalletHandleTokenRequest>().Assign("wallet_handle_token", null, (AlgoSdk.RenewWalletHandleTokenRequest x) => x.WalletHandleToken, (ref AlgoSdk.RenewWalletHandleTokenRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.RenewWalletHandleTokenResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.RenewWalletHandleTokenResponse>().Assign("error", null, (AlgoSdk.RenewWalletHandleTokenResponse x) => x.Error, (ref AlgoSdk.RenewWalletHandleTokenResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.RenewWalletHandleTokenResponse x) => x.Message, (ref AlgoSdk.RenewWalletHandleTokenResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false).Assign("wallet_handle", null, (AlgoSdk.RenewWalletHandleTokenResponse x) => x.WalletHandle, (ref AlgoSdk.RenewWalletHandleTokenResponse x, AlgoSdk.WalletHandle value) => x.WalletHandle = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignMultisigRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.SignMultisigRequest>().Assign("partial_multisig", null, (AlgoSdk.SignMultisigRequest x) => x.Multisig, (ref AlgoSdk.SignMultisigRequest x, AlgoSdk.Multisig value) => x.Multisig = value, false).Assign("public_key", null, (AlgoSdk.SignMultisigRequest x) => x.PublicKey, (ref AlgoSdk.SignMultisigRequest x, AlgoSdk.Crypto.Ed25519.PublicKey value) => x.PublicKey = value, false).Assign("signer", null, (AlgoSdk.SignMultisigRequest x) => x.Signer, (ref AlgoSdk.SignMultisigRequest x, AlgoSdk.Address value) => x.Signer = value, false).Assign("transaction", null, (AlgoSdk.SignMultisigRequest x) => x.Transaction, (ref AlgoSdk.SignMultisigRequest x, System.Byte[] value) => x.Transaction = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("wallet_handle_token", null, (AlgoSdk.SignMultisigRequest x) => x.WalletHandleToken, (ref AlgoSdk.SignMultisigRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false).Assign("wallet_password", null, (AlgoSdk.SignMultisigRequest x) => x.WalletPassword, (ref AlgoSdk.SignMultisigRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignMultisigResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.SignMultisigResponse>().Assign("multisig", null, (AlgoSdk.SignMultisigResponse x) => x.SignedTransaction, (ref AlgoSdk.SignMultisigResponse x, System.Byte[] value) => x.SignedTransaction = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("error", null, (AlgoSdk.SignMultisigResponse x) => x.Error, (ref AlgoSdk.SignMultisigResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.SignMultisigResponse x) => x.Message, (ref AlgoSdk.SignMultisigResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignProgramMultisigRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.SignProgramMultisigRequest>().Assign("address", null, (AlgoSdk.SignProgramMultisigRequest x) => x.Address, (ref AlgoSdk.SignProgramMultisigRequest x, AlgoSdk.Address value) => x.Address = value, false).Assign("data", null, (AlgoSdk.SignProgramMultisigRequest x) => x.Data, (ref AlgoSdk.SignProgramMultisigRequest x, System.Byte[] value) => x.Data = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("partial_multisig", null, (AlgoSdk.SignProgramMultisigRequest x) => x.Multisig, (ref AlgoSdk.SignProgramMultisigRequest x, AlgoSdk.Multisig value) => x.Multisig = value, false).Assign("public_key", null, (AlgoSdk.SignProgramMultisigRequest x) => x.PublicKey, (ref AlgoSdk.SignProgramMultisigRequest x, AlgoSdk.Crypto.Ed25519.PublicKey value) => x.PublicKey = value, false).Assign("wallet_handle_token", null, (AlgoSdk.SignProgramMultisigRequest x) => x.WalletHandleToken, (ref AlgoSdk.SignProgramMultisigRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false).Assign("wallet_password", null, (AlgoSdk.SignProgramMultisigRequest x) => x.WalletPassword, (ref AlgoSdk.SignProgramMultisigRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignProgramMultisigResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.SignProgramMultisigResponse>().Assign("multisig", null, (AlgoSdk.SignProgramMultisigResponse x) => x.SignedProgram, (ref AlgoSdk.SignProgramMultisigResponse x, System.Byte[] value) => x.SignedProgram = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("error", null, (AlgoSdk.SignProgramMultisigResponse x) => x.Error, (ref AlgoSdk.SignProgramMultisigResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.SignProgramMultisigResponse x) => x.Message, (ref AlgoSdk.SignProgramMultisigResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignProgramRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.SignProgramRequest>().Assign("address", null, (AlgoSdk.SignProgramRequest x) => x.Address, (ref AlgoSdk.SignProgramRequest x, AlgoSdk.Address value) => x.Address = value, false).Assign("data", null, (AlgoSdk.SignProgramRequest x) => x.Data, (ref AlgoSdk.SignProgramRequest x, System.Byte[] value) => x.Data = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("wallet_handle_token", null, (AlgoSdk.SignProgramRequest x) => x.WalletHandleToken, (ref AlgoSdk.SignProgramRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false).Assign("wallet_password", null, (AlgoSdk.SignProgramRequest x) => x.WalletPassword, (ref AlgoSdk.SignProgramRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignProgramResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.SignProgramResponse>().Assign("sig", null, (AlgoSdk.SignProgramResponse x) => x.SignedProgram, (ref AlgoSdk.SignProgramResponse x, AlgoSdk.Sig value) => x.SignedProgram = value, false).Assign("error", null, (AlgoSdk.SignProgramResponse x) => x.Error, (ref AlgoSdk.SignProgramResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.SignProgramResponse x) => x.Message, (ref AlgoSdk.SignProgramResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignTransactionRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.SignTransactionRequest>().Assign("public_key", null, (AlgoSdk.SignTransactionRequest x) => x.PublicKey, (ref AlgoSdk.SignTransactionRequest x, AlgoSdk.Crypto.Ed25519.PublicKey value) => x.PublicKey = value, false).Assign("transaction", null, (AlgoSdk.SignTransactionRequest x) => x.Transaction, (ref AlgoSdk.SignTransactionRequest x, System.Byte[] value) => x.Transaction = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("wallet_handle_token", null, (AlgoSdk.SignTransactionRequest x) => x.WalletHandleToken, (ref AlgoSdk.SignTransactionRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false).Assign("wallet_password", null, (AlgoSdk.SignTransactionRequest x) => x.WalletPassword, (ref AlgoSdk.SignTransactionRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletPassword = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignTransactionResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.SignTransactionResponse>().Assign("signed_transaction", null, (AlgoSdk.SignTransactionResponse x) => x.SignedTransaction, (ref AlgoSdk.SignTransactionResponse x, System.Byte[] value) => x.SignedTransaction = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("error", null, (AlgoSdk.SignTransactionResponse x) => x.Error, (ref AlgoSdk.SignTransactionResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.SignTransactionResponse x) => x.Message, (ref AlgoSdk.SignTransactionResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.SignTxnsError), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletConnect.SignTxnsError>().Assign("message", null, (AlgoSdk.WalletConnect.SignTxnsError x) => x.Message, (ref AlgoSdk.WalletConnect.SignTxnsError x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false).Assign("code", null, (AlgoSdk.WalletConnect.SignTxnsError x) => x.RawErrorCode, (ref AlgoSdk.WalletConnect.SignTxnsError x, System.Int32 value) => x.RawErrorCode = value, false).Assign("data", null, (AlgoSdk.WalletConnect.SignTxnsError x) => x.Data, (ref AlgoSdk.WalletConnect.SignTxnsError x, AlgoSdk.AlgoApiObject value) => x.Data = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.SignTxnsOpts), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletConnect.SignTxnsOpts>().Assign("message", null, (AlgoSdk.WalletConnect.SignTxnsOpts x) => x.Message, (ref AlgoSdk.WalletConnect.SignTxnsOpts x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.StateSchema), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.StateSchema>().Assign("num-byte-slice", "nbs", (AlgoSdk.StateSchema x) => x.NumByteSlices, (ref AlgoSdk.StateSchema x, System.UInt64 value) => x.NumByteSlices = value, false).Assign("num-uint", "nui", (AlgoSdk.StateSchema x) => x.NumUints, (ref AlgoSdk.StateSchema x, System.UInt64 value) => x.NumUints = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Status), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Status>().Assign("catchpoint", null, (AlgoSdk.Status x) => x.Catchpoint, (ref AlgoSdk.Status x, System.String value) => x.Catchpoint = value, AlgoSdk.StringComparer.Instance, false).Assign("catchpoint-acquired-blocks", null, (AlgoSdk.Status x) => x.CatchpointAcquiredBlocks, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchpointAcquiredBlocks = value, false).Assign("catchpoint-processed-accounts", null, (AlgoSdk.Status x) => x.CatchpointProcessedAmounts, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchpointProcessedAmounts = value, false).Assign("catchpoint-total-accounts", null, (AlgoSdk.Status x) => x.CatchpointTotalAccounts, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchpointTotalAccounts = value, false).Assign("catchpoint-total-blocks", null, (AlgoSdk.Status x) => x.CatchpointTotalBlocks, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchpointTotalBlocks = value, false).Assign("catchpoint-verified-accounts", null, (AlgoSdk.Status x) => x.CatchpointVerifiedAccounts, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchpointVerifiedAccounts = value, false).Assign("catchup-time", null, (AlgoSdk.Status x) => x.CatchupTime, (ref AlgoSdk.Status x, System.UInt64 value) => x.CatchupTime = value, false).Assign("last-catchpoint", null, (AlgoSdk.Status x) => x.LastCatchpoint, (ref AlgoSdk.Status x, System.String value) => x.LastCatchpoint = value, AlgoSdk.StringComparer.Instance, false).Assign("last-round", null, (AlgoSdk.Status x) => x.LastRound, (ref AlgoSdk.Status x, System.UInt64 value) => x.LastRound = value, false).Assign("last-version", null, (AlgoSdk.Status x) => x.LastVersion, (ref AlgoSdk.Status x, System.String value) => x.LastVersion = value, AlgoSdk.StringComparer.Instance, false).Assign("next-version", null, (AlgoSdk.Status x) => x.NextVersion, (ref AlgoSdk.Status x, System.String value) => x.NextVersion = value, AlgoSdk.StringComparer.Instance, false).Assign("next-version-round", null, (AlgoSdk.Status x) => x.NextVersionRound, (ref AlgoSdk.Status x, System.UInt64 value) => x.NextVersionRound = value, false).Assign("next-version-supported", null, (AlgoSdk.Status x) => x.NextVersionSupported, (ref AlgoSdk.Status x, System.Boolean value) => x.NextVersionSupported = value, false).Assign("stopped-at-unsupported-round", null, (AlgoSdk.Status x) => x.StoppedAtUnsupportedRound, (ref AlgoSdk.Status x, System.Boolean value) => x.StoppedAtUnsupportedRound = value, false).Assign("time-since-last-round", null, (AlgoSdk.Status x) => x.TimeSinceLastRound, (ref AlgoSdk.Status x, System.UInt64 value) => x.TimeSinceLastRound = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Multisig.Subsig), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Multisig.Subsig>().Assign("public-key", "pk", (AlgoSdk.Multisig.Subsig x) => x.PublicKey, (ref AlgoSdk.Multisig.Subsig x, AlgoSdk.Crypto.Ed25519.PublicKey value) => x.PublicKey = value, false).Assign("signature", "s", (AlgoSdk.Multisig.Subsig x) => x.Sig, (ref AlgoSdk.Multisig.Subsig x, AlgoSdk.Sig value) => x.Sig = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealCompilationResult), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TealCompilationResult>().Assign("hash", null, (AlgoSdk.TealCompilationResult x) => x.Hash, (ref AlgoSdk.TealCompilationResult x, System.String value) => x.Hash = value, AlgoSdk.StringComparer.Instance, false).Assign("result", null, (AlgoSdk.TealCompilationResult x) => x.CompiledBytesBase64, (ref AlgoSdk.TealCompilationResult x, System.String value) => x.CompiledBytesBase64 = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealKeyValue), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TealKeyValue>().Assign("key", "key", (AlgoSdk.TealKeyValue x) => x.Key, (ref AlgoSdk.TealKeyValue x, Unity.Collections.FixedString128Bytes value) => x.Key = value, false).Assign("value", "value", (AlgoSdk.TealKeyValue x) => x.Value, (ref AlgoSdk.TealKeyValue x, AlgoSdk.TealValue value) => x.Value = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealValue), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TealValue>().Assign("bytes", "tb", (AlgoSdk.TealValue x) => x.Bytes, (ref AlgoSdk.TealValue x, AlgoSdk.TealBytes value) => x.Bytes = value, false).Assign("uint", "ui", (AlgoSdk.TealValue x) => x.UintValue, (ref AlgoSdk.TealValue x, System.UInt64 value) => x.UintValue = value, false).Assign("type", "tt", (AlgoSdk.TealValue x) => x.Type, (ref AlgoSdk.TealValue x, AlgoSdk.TealValueType value) => x.Type = value, AlgoSdk.ByteEnumComparer<AlgoSdk.TealValueType>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Transaction), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Transaction>().Assign(null, "apid", (AlgoSdk.Transaction x) => x.ApplicationId, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.ApplicationId = value, false).Assign("on-completion", "apan", (AlgoSdk.Transaction x) => x.OnComplete, (ref AlgoSdk.Transaction x, AlgoSdk.OnCompletion value) => x.OnComplete = value, AlgoSdk.ByteEnumComparer<AlgoSdk.OnCompletion>.Instance, false).Assign(null, "apap", (AlgoSdk.Transaction x) => x.ApprovalProgram, (ref AlgoSdk.Transaction x, AlgoSdk.CompiledTeal value) => x.ApprovalProgram = value, false).Assign(null, "apsu", (AlgoSdk.Transaction x) => x.ClearStateProgram, (ref AlgoSdk.Transaction x, AlgoSdk.CompiledTeal value) => x.ClearStateProgram = value, false).Assign(null, "apaa", (AlgoSdk.Transaction x) => x.AppArguments, (ref AlgoSdk.Transaction x, AlgoSdk.CompiledTeal value) => x.AppArguments = value, false).Assign(null, "apat", (AlgoSdk.Transaction x) => x.Accounts, (ref AlgoSdk.Transaction x, AlgoSdk.Address[] value) => x.Accounts = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance, false).Assign(null, "apfa", (AlgoSdk.Transaction x) => x.ForeignApps, (ref AlgoSdk.Transaction x, System.UInt64[] value) => x.ForeignApps = value, AlgoSdk.ArrayComparer<ulong>.Instance, false).Assign(null, "apas", (AlgoSdk.Transaction x) => x.ForeignAssets, (ref AlgoSdk.Transaction x, System.UInt64[] value) => x.ForeignAssets = value, AlgoSdk.ArrayComparer<ulong>.Instance, false).Assign(null, "apgs", (AlgoSdk.Transaction x) => x.GlobalStateSchema, (ref AlgoSdk.Transaction x, AlgoSdk.StateSchema value) => x.GlobalStateSchema = value, false).Assign(null, "apls", (AlgoSdk.Transaction x) => x.LocalStateSchema, (ref AlgoSdk.Transaction x, AlgoSdk.StateSchema value) => x.LocalStateSchema = value, false).Assign(null, "apep", (AlgoSdk.Transaction x) => x.ExtraProgramPages, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.ExtraProgramPages = value, false).Assign(null, "caid", (AlgoSdk.Transaction x) => x.ConfigAsset, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.ConfigAsset = value, false).Assign(null, "apar", (AlgoSdk.Transaction x) => x.AssetParams, (ref AlgoSdk.Transaction x, AlgoSdk.AssetParams value) => x.AssetParams = value, false).Assign(null, "fadd", (AlgoSdk.Transaction x) => x.FreezeAccount, (ref AlgoSdk.Transaction x, AlgoSdk.Address value) => x.FreezeAccount = value, false).Assign(null, "faid", (AlgoSdk.Transaction x) => x.FreezeAsset, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.FreezeAsset = value, false).Assign(null, "afrz", (AlgoSdk.Transaction x) => x.AssetFrozen, (ref AlgoSdk.Transaction x, AlgoSdk.Optional<System.Boolean> value) => x.AssetFrozen = value, false).Assign(null, "xaid", (AlgoSdk.Transaction x) => x.XferAsset, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.XferAsset = value, false).Assign(null, "aamt", (AlgoSdk.Transaction x) => x.AssetAmount, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.AssetAmount = value, false).Assign(null, "asnd", (AlgoSdk.Transaction x) => x.AssetSender, (ref AlgoSdk.Transaction x, AlgoSdk.Address value) => x.AssetSender = value, false).Assign(null, "arcv", (AlgoSdk.Transaction x) => x.AssetReceiver, (ref AlgoSdk.Transaction x, AlgoSdk.Address value) => x.AssetReceiver = value, false).Assign(null, "aclose", (AlgoSdk.Transaction x) => x.AssetCloseTo, (ref AlgoSdk.Transaction x, AlgoSdk.Address value) => x.AssetCloseTo = value, false).Assign(null, "votekey", (AlgoSdk.Transaction x) => x.VoteParticipationKey, (ref AlgoSdk.Transaction x, AlgoSdk.Crypto.Ed25519.PublicKey value) => x.VoteParticipationKey = value, false).Assign(null, "selkey", (AlgoSdk.Transaction x) => x.SelectionParticipationKey, (ref AlgoSdk.Transaction x, AlgoSdk.VrfPubKey value) => x.SelectionParticipationKey = value, false).Assign(null, "votefst", (AlgoSdk.Transaction x) => x.VoteFirst, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.VoteFirst = value, false).Assign(null, "votelst", (AlgoSdk.Transaction x) => x.VoteLast, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.VoteLast = value, false).Assign(null, "votekd", (AlgoSdk.Transaction x) => x.VoteKeyDilution, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.VoteKeyDilution = value, false).Assign(null, "nonpart", (AlgoSdk.Transaction x) => x.NonParticipation, (ref AlgoSdk.Transaction x, AlgoSdk.Optional<System.Boolean> value) => x.NonParticipation = value, false).Assign(null, "rcv", (AlgoSdk.Transaction x) => x.Receiver, (ref AlgoSdk.Transaction x, AlgoSdk.Address value) => x.Receiver = value, false).Assign(null, "amt", (AlgoSdk.Transaction x) => x.Amount, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.Amount = value, false).Assign(null, "close", (AlgoSdk.Transaction x) => x.CloseRemainderTo, (ref AlgoSdk.Transaction x, AlgoSdk.Address value) => x.CloseRemainderTo = value, false).Assign("fee", "fee", (AlgoSdk.Transaction x) => x.Fee, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.Fee = value, false).Assign("first-valid", "fv", (AlgoSdk.Transaction x) => x.FirstValidRound, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.FirstValidRound = value, false).Assign("genesis-hash", "gh", (AlgoSdk.Transaction x) => x.GenesisHash, (ref AlgoSdk.Transaction x, AlgoSdk.GenesisHash value) => x.GenesisHash = value, false).Assign("last-valid", "lv", (AlgoSdk.Transaction x) => x.LastValidRound, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.LastValidRound = value, false).Assign("sender", "snd", (AlgoSdk.Transaction x) => x.Sender, (ref AlgoSdk.Transaction x, AlgoSdk.Address value) => x.Sender = value, false).Assign("tx-type", "type", (AlgoSdk.Transaction x) => x.TransactionType, (ref AlgoSdk.Transaction x, AlgoSdk.TransactionType value) => x.TransactionType = value, AlgoSdk.ByteEnumComparer<AlgoSdk.TransactionType>.Instance, false).Assign("genesis-id", "gen", (AlgoSdk.Transaction x) => x.GenesisId, (ref AlgoSdk.Transaction x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value, false).Assign("group", "grp", (AlgoSdk.Transaction x) => x.Group, (ref AlgoSdk.Transaction x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Group = value, false).Assign("lease", "lx", (AlgoSdk.Transaction x) => x.Lease, (ref AlgoSdk.Transaction x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Lease = value, false).Assign("note", "note", (AlgoSdk.Transaction x) => x.Note, (ref AlgoSdk.Transaction x, System.Byte[] value) => x.Note = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("rekey-to", "rekey", (AlgoSdk.Transaction x) => x.RekeyTo, (ref AlgoSdk.Transaction x, AlgoSdk.Address value) => x.RekeyTo = value, false).Assign("id", "id", (AlgoSdk.Transaction x) => x.Id, (ref AlgoSdk.Transaction x, AlgoSdk.TransactionId value) => x.Id = value, false).Assign("auth-addr", "sgnr", (AlgoSdk.Transaction x) => x.AuthAddress, (ref AlgoSdk.Transaction x, AlgoSdk.Address value) => x.AuthAddress = value, false).Assign("close-rewards", "rc", (AlgoSdk.Transaction x) => x.CloseRewards, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.CloseRewards = value, false).Assign("closing-amount", "ca", (AlgoSdk.Transaction x) => x.ClosingAmount, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.ClosingAmount = value, false).Assign("confirmed-round", null, (AlgoSdk.Transaction x) => x.ConfirmedRound, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.ConfirmedRound = value, false).Assign("created-application-index", null, (AlgoSdk.Transaction x) => x.CreatedApplicationIndex, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.CreatedApplicationIndex = value, false).Assign("created-asset-index", null, (AlgoSdk.Transaction x) => x.CreatedAssetIndex, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.CreatedAssetIndex = value, false).Assign("intra-round-offset", null, (AlgoSdk.Transaction x) => x.IntraRoundOffset, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.IntraRoundOffset = value, false).Assign("global-state-delta", "gd", (AlgoSdk.Transaction x) => x.GlobalStateDelta, (ref AlgoSdk.Transaction x, AlgoSdk.EvalDeltaKeyValue[] value) => x.GlobalStateDelta = value, AlgoSdk.ArrayComparer<AlgoSdk.EvalDeltaKeyValue>.Instance, false).Assign("local-state-delta", "ld", (AlgoSdk.Transaction x) => x.LocalStateDelta, (ref AlgoSdk.Transaction x, AlgoSdk.AccountStateDelta[] value) => x.LocalStateDelta = value, AlgoSdk.ArrayComparer<AlgoSdk.AccountStateDelta>.Instance, false).Assign("receiver-rewards", "rr", (AlgoSdk.Transaction x) => x.ReceiverRewards, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.ReceiverRewards = value, false).Assign("round-time", null, (AlgoSdk.Transaction x) => x.RoundTime, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.RoundTime = value, false).Assign("sender-rewards", "rs", (AlgoSdk.Transaction x) => x.SenderRewards, (ref AlgoSdk.Transaction x, System.UInt64 value) => x.SenderRewards = value, false).Assign("payment-transaction", null, (AlgoSdk.Transaction x) => x.PaymentParams, (ref AlgoSdk.Transaction x, AlgoSdk.PaymentTxn.Params value) => x.PaymentParams = value, false).Assign("asset-config-transaction", null, (AlgoSdk.Transaction x) => x.AssetConfigurationParams, (ref AlgoSdk.Transaction x, AlgoSdk.AssetConfigTxn.Params value) => x.AssetConfigurationParams = value, false).Assign("asset-transfer-transaction", null, (AlgoSdk.Transaction x) => x.AssetTransferParams, (ref AlgoSdk.Transaction x, AlgoSdk.AssetTransferTxn.Params value) => x.AssetTransferParams = value, false).Assign("asset-freeze-transaction", null, (AlgoSdk.Transaction x) => x.AssetFreezeParams, (ref AlgoSdk.Transaction x, AlgoSdk.AssetFreezeTxn.Params value) => x.AssetFreezeParams = value, false).Assign("application-transaction", null, (AlgoSdk.Transaction x) => x.ApplicationCallParams, (ref AlgoSdk.Transaction x, AlgoSdk.AppCallTxn.Params value) => x.ApplicationCallParams = value, false).Assign("keyreg-transaction", null, (AlgoSdk.Transaction x) => x.KeyRegistrationParams, (ref AlgoSdk.Transaction x, AlgoSdk.KeyRegTxn.Params value) => x.KeyRegistrationParams = value, false).Assign("signature", null, (AlgoSdk.Transaction x) => x.Signature, (ref AlgoSdk.Transaction x, AlgoSdk.TransactionSignature value) => x.Signature = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionGroup), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TransactionGroup>().Assign("txlist", "txlist", (AlgoSdk.TransactionGroup x) => x.Txns, (ref AlgoSdk.TransactionGroup x, AlgoSdk.TransactionId[] value) => x.Txns = value, AlgoSdk.ArrayComparer<AlgoSdk.TransactionId>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionId[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.TransactionId>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionIdResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TransactionIdResponse>().Assign("txId", "txId", (AlgoSdk.TransactionIdResponse x) => x.TxId, (ref AlgoSdk.TransactionIdResponse x, AlgoSdk.TransactionId value) => x.TxId = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionParams), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TransactionParams>().Assign("last-round", null, (AlgoSdk.TransactionParams x) => x.LastRound, (ref AlgoSdk.TransactionParams x, System.UInt64 value) => x.LastRound = value, false).Assign("consensus-version", null, (AlgoSdk.TransactionParams x) => x.ConsensusVersion, (ref AlgoSdk.TransactionParams x, System.String value) => x.ConsensusVersion = value, AlgoSdk.StringComparer.Instance, false).Assign("fee", null, (AlgoSdk.TransactionParams x) => x.Fee, (ref AlgoSdk.TransactionParams x, System.UInt64 value) => x.Fee = value, false).Assign("genesis-hash", null, (AlgoSdk.TransactionParams x) => x.GenesisHash, (ref AlgoSdk.TransactionParams x, AlgoSdk.GenesisHash value) => x.GenesisHash = value, false).Assign("genesis-id", null, (AlgoSdk.TransactionParams x) => x.GenesisId, (ref AlgoSdk.TransactionParams x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value, false).Assign("min-fee", null, (AlgoSdk.TransactionParams x) => x.MinFee, (ref AlgoSdk.TransactionParams x, System.UInt64 value) => x.MinFee = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TransactionResponse>().Assign("transaction", null, (AlgoSdk.TransactionResponse x) => x.Transaction, (ref AlgoSdk.TransactionResponse x, AlgoSdk.Transaction value) => x.Transaction = value, false).Assign("current-round", null, (AlgoSdk.TransactionResponse x) => x.CurrentRound, (ref AlgoSdk.TransactionResponse x, System.UInt64 value) => x.CurrentRound = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionSignature), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TransactionSignature>().Assign("logicsig", null, (AlgoSdk.TransactionSignature x) => x.LogicSig, (ref AlgoSdk.TransactionSignature x, AlgoSdk.LogicSig value) => x.LogicSig = value, false).Assign("multisig", null, (AlgoSdk.TransactionSignature x) => x.Multisig, (ref AlgoSdk.TransactionSignature x, AlgoSdk.Multisig value) => x.Multisig = value, false).Assign("sig", null, (AlgoSdk.TransactionSignature x) => x.Sig, (ref AlgoSdk.TransactionSignature x, AlgoSdk.Sig value) => x.Sig = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionsResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.TransactionsResponse>().Assign("current-round", null, (AlgoSdk.TransactionsResponse x) => x.CurrentRound, (ref AlgoSdk.TransactionsResponse x, System.UInt64 value) => x.CurrentRound = value, false).Assign("next-token", null, (AlgoSdk.TransactionsResponse x) => x.NextToken, (ref AlgoSdk.TransactionsResponse x, Unity.Collections.FixedString128Bytes value) => x.NextToken = value, false).Assign("transactions", null, (AlgoSdk.TransactionsResponse x) => x.Transactions, (ref AlgoSdk.TransactionsResponse x, AlgoSdk.Transaction[] value) => x.Transactions = value, AlgoSdk.ArrayComparer<AlgoSdk.Transaction>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Version), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Version>().Assign("build", null, (AlgoSdk.Version x) => x.Build, (ref AlgoSdk.Version x, AlgoSdk.BuildVersion value) => x.Build = value, false).Assign("genesis_hash_b64", null, (AlgoSdk.Version x) => x.GenesisHashBase64, (ref AlgoSdk.Version x, Unity.Collections.FixedString64Bytes value) => x.GenesisHashBase64 = value, false).Assign("genesis_id", null, (AlgoSdk.Version x) => x.GenesisId, (ref AlgoSdk.Version x, Unity.Collections.FixedString32Bytes value) => x.GenesisId = value, false).Assign("versions", null, (AlgoSdk.Version x) => x.Versions, (ref AlgoSdk.Version x, Unity.Collections.FixedString32Bytes[] value) => x.Versions = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedString32Bytes>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(Unity.Collections.FixedString32Bytes[]), new AlgoSdk.Formatters.ArrayFormatter<Unity.Collections.FixedString32Bytes>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.VersionsResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.VersionsResponse>().Assign("versions", null, (AlgoSdk.VersionsResponse x) => x.Versions, (ref AlgoSdk.VersionsResponse x, Unity.Collections.FixedString64Bytes[] value) => x.Versions = value, AlgoSdk.ArrayComparer<Unity.Collections.FixedString64Bytes>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(Unity.Collections.FixedString64Bytes[]), new AlgoSdk.Formatters.ArrayFormatter<Unity.Collections.FixedString64Bytes>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Wallet), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Wallet>().Assign("driver_name", null, (AlgoSdk.Wallet x) => x.DriverName, (ref AlgoSdk.Wallet x, Unity.Collections.FixedString64Bytes value) => x.DriverName = value, false).Assign("driver_version", null, (AlgoSdk.Wallet x) => x.DriverVersion, (ref AlgoSdk.Wallet x, System.UInt32 value) => x.DriverVersion = value, false).Assign("id", null, (AlgoSdk.Wallet x) => x.Id, (ref AlgoSdk.Wallet x, Unity.Collections.FixedString128Bytes value) => x.Id = value, false).Assign("mnemonic_ux", null, (AlgoSdk.Wallet x) => x.MnemonicUx, (ref AlgoSdk.Wallet x, AlgoSdk.Optional<System.Boolean> value) => x.MnemonicUx = value, false).Assign("name", null, (AlgoSdk.Wallet x) => x.Name, (ref AlgoSdk.Wallet x, Unity.Collections.FixedString64Bytes value) => x.Name = value, false).Assign("supported_txs", null, (AlgoSdk.Wallet x) => x.SupportedTransactions, (ref AlgoSdk.Wallet x, AlgoSdk.TransactionType[] value) => x.SupportedTransactions = value, AlgoSdk.ArrayComparer<AlgoSdk.TransactionType, AlgoSdk.ByteEnumComparer<AlgoSdk.TransactionType>>.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionType[]), new AlgoSdk.Formatters.ArrayFormatter<AlgoSdk.TransactionType>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletHandle), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletHandle>().Assign("expires_seconds", null, (AlgoSdk.WalletHandle x) => x.ExpiresSeconds, (ref AlgoSdk.WalletHandle x, System.UInt64 value) => x.ExpiresSeconds = value, false).Assign("wallet", null, (AlgoSdk.WalletHandle x) => x.Wallet, (ref AlgoSdk.WalletHandle x, AlgoSdk.Wallet value) => x.Wallet = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletInfoRequest), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletInfoRequest>().Assign("wallet_handle_token", null, (AlgoSdk.WalletInfoRequest x) => x.WalletHandleToken, (ref AlgoSdk.WalletInfoRequest x, Unity.Collections.FixedString128Bytes value) => x.WalletHandleToken = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletInfoResponse), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletInfoResponse>().Assign("wallet_handle", null, (AlgoSdk.WalletInfoResponse x) => x.WalletHandle, (ref AlgoSdk.WalletInfoResponse x, AlgoSdk.WalletHandle value) => x.WalletHandle = value, false).Assign("error", null, (AlgoSdk.WalletInfoResponse x) => x.Error, (ref AlgoSdk.WalletInfoResponse x, AlgoSdk.Optional<System.Boolean> value) => x.Error = value, false).Assign("message", null, (AlgoSdk.WalletInfoResponse x) => x.Message, (ref AlgoSdk.WalletInfoResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.WalletTransaction), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletConnect.WalletTransaction>().Assign("txn", null, (AlgoSdk.WalletConnect.WalletTransaction x) => x.Txn, (ref AlgoSdk.WalletConnect.WalletTransaction x, System.Byte[] value) => x.Txn = value, AlgoSdk.ArrayComparer<byte>.Instance, false).Assign("authAddr", null, (AlgoSdk.WalletConnect.WalletTransaction x) => x.AuthAddr, (ref AlgoSdk.WalletConnect.WalletTransaction x, AlgoSdk.Address value) => x.AuthAddr = value, false).Assign("msig", null, (AlgoSdk.WalletConnect.WalletTransaction x) => x.Msig, (ref AlgoSdk.WalletConnect.WalletTransaction x, AlgoSdk.WalletConnect.MultisigMetadata value) => x.Msig = value, false).Assign("signers", null, (AlgoSdk.WalletConnect.WalletTransaction x) => x.Signers, (ref AlgoSdk.WalletConnect.WalletTransaction x, AlgoSdk.Address[] value) => x.Signers = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance, false).Assign("message", null, (AlgoSdk.WalletConnect.WalletTransaction x) => x.Message, (ref AlgoSdk.WalletConnect.WalletTransaction x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.WCSessionRequestParams), new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.WalletConnect.WCSessionRequestParams>().Assign("peerId", null, (AlgoSdk.WalletConnect.WCSessionRequestParams x) => x.PeerId, (ref AlgoSdk.WalletConnect.WCSessionRequestParams x, System.String value) => x.PeerId = value, AlgoSdk.StringComparer.Instance, false).Assign("peerMeta", null, (AlgoSdk.WalletConnect.WCSessionRequestParams x) => x.PeerMeta, (ref AlgoSdk.WalletConnect.WCSessionRequestParams x, AlgoSdk.WalletConnect.ClientMeta value) => x.PeerMeta = value, false).Assign("chainId", null, (AlgoSdk.WalletConnect.WCSessionRequestParams x) => x.ChainId, (ref AlgoSdk.WalletConnect.WCSessionRequestParams x, AlgoSdk.Optional<System.Int32> value) => x.ChainId = value, false));
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Address), new AlgoSdk.Formatters.AddressFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AddressRole), new AlgoSdk.Formatters.AddressRoleFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.AlgoApiObject), new AlgoSdk.AlgoApiObjectFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.AlgoSignTxnsRequest), new AlgoSdk.WalletConnect.JsonRpcRequestFormatter<AlgoSdk.WalletConnect.AlgoSignTxnsRequest, AlgoSdk.WalletConnect.SignTxnsParams>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.AlgoSignTxnsResponse), new AlgoSdk.WalletConnect.JsonRpcResponseFormatter<AlgoSdk.WalletConnect.AlgoSignTxnsResponse, byte[][]>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.CompiledTeal), new AlgoSdk.CompiledTealFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.ErrorResponse), new AlgoSdk.Formatters.ErrorResponseFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.EvalDeltaAction), new AlgoSdk.Formatters.ByteEnumFormatter<AlgoSdk.EvalDeltaAction>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.GenesisHash), new AlgoSdk.Formatters.GenesisHashFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.JsonRpcResponse), new AlgoSdk.WalletConnect.JsonRpcResponseFormatter<AlgoSdk.WalletConnect.JsonRpcResponse, AlgoSdk.AlgoApiObject>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.OnCompletion), new AlgoSdk.Formatters.OnCompletionFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Optional<bool>), new AlgoSdk.Formatters.OptionalFormatter<bool>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Optional<ulong>), new AlgoSdk.Formatters.OptionalFormatter<ulong>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Optional<uint>), new AlgoSdk.Formatters.OptionalFormatter<uint>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.PrivateKey), new AlgoSdk.Formatters.PrivateKeyFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Sig), new AlgoSdk.Formatters.ByteArrayFormatter<AlgoSdk.Sig>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignatureType), new AlgoSdk.Formatters.SignatureTypeFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Signed<AlgoSdk.AppCallTxn>), new AlgoSdk.Formatters.SignedTransactionFormatter<AlgoSdk.AppCallTxn>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Signed<AlgoSdk.AssetConfigTxn>), new AlgoSdk.Formatters.SignedTransactionFormatter<AlgoSdk.AssetConfigTxn>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Signed<AlgoSdk.AssetFreezeTxn>), new AlgoSdk.Formatters.SignedTransactionFormatter<AlgoSdk.AssetFreezeTxn>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Signed<AlgoSdk.AssetTransferTxn>), new AlgoSdk.Formatters.SignedTransactionFormatter<AlgoSdk.AssetTransferTxn>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Signed<AlgoSdk.KeyRegTxn>), new AlgoSdk.Formatters.SignedTransactionFormatter<AlgoSdk.KeyRegTxn>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.Signed<AlgoSdk.PaymentTxn>), new AlgoSdk.Formatters.SignedTransactionFormatter<AlgoSdk.PaymentTxn>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.SignedTransaction), new AlgoSdk.Formatters.SignedTransactionFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.SignTxnsErrorCode), new AlgoSdk.IntEnumFormatter<AlgoSdk.WalletConnect.SignTxnsErrorCode>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.SignTxnsParams), new AlgoSdk.WalletConnect.SignTxnsParamsFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealBytes), new AlgoSdk.Formatters.ByteArrayFormatter<AlgoSdk.TealBytes>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TealValueType), new AlgoSdk.Formatters.ByteEnumFormatter<AlgoSdk.TealValueType>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionId), new AlgoSdk.Formatters.TransactionIdFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.TransactionType), new AlgoSdk.Formatters.TransactionTypeFormatter());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.VrfPubKey), new AlgoSdk.Formatters.ByteArrayFormatter<AlgoSdk.VrfPubKey>());
            AlgoSdk.AlgoApiFormatterLookup.AddFormatter(typeof(AlgoSdk.WalletConnect.WCSessionRequestRequest), new AlgoSdk.WalletConnect.JsonRpcRequestFormatter<AlgoSdk.WalletConnect.WCSessionRequestRequest, AlgoSdk.WalletConnect.WCSessionRequestParams>());
        }
    }
}
