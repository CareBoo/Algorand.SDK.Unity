// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace AlgoSdk.MsgPack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(10)
            {
                { typeof(global::AlgoSdk.TransactionType), 0 },
                { typeof(global::AlgoSdk.AssetParams), 1 },
                { typeof(global::AlgoSdk.Transaction.AssetAccept), 2 },
                { typeof(global::AlgoSdk.Transaction.AssetClawback), 3 },
                { typeof(global::AlgoSdk.Transaction.AssetConfiguration), 4 },
                { typeof(global::AlgoSdk.Transaction.AssetFreeze), 5 },
                { typeof(global::AlgoSdk.Transaction.AssetTransfer), 6 },
                { typeof(global::AlgoSdk.Transaction.KeyRegistration), 7 },
                { typeof(global::AlgoSdk.Transaction.Payment), 8 },
                { typeof(global::AlgoSdk.VrfPublicKey), 9 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new AlgoSdk.MsgPack.Formatters.AlgoSdk.TransactionTypeFormatter();
                case 1: return new AlgoSdk.MsgPack.Formatters.AlgoSdk.AssetParamsFormatter();
                case 2: return new AlgoSdk.MsgPack.Formatters.AlgoSdk.Transaction_AssetAcceptFormatter();
                case 3: return new AlgoSdk.MsgPack.Formatters.AlgoSdk.Transaction_AssetClawbackFormatter();
                case 4: return new AlgoSdk.MsgPack.Formatters.AlgoSdk.Transaction_AssetConfigurationFormatter();
                case 5: return new AlgoSdk.MsgPack.Formatters.AlgoSdk.Transaction_AssetFreezeFormatter();
                case 6: return new AlgoSdk.MsgPack.Formatters.AlgoSdk.Transaction_AssetTransferFormatter();
                case 7: return new AlgoSdk.MsgPack.Formatters.AlgoSdk.Transaction_KeyRegistrationFormatter();
                case 8: return new AlgoSdk.MsgPack.Formatters.AlgoSdk.Transaction_PaymentFormatter();
                case 9: return new AlgoSdk.MsgPack.Formatters.AlgoSdk.VrfPublicKeyFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace AlgoSdk.MsgPack.Formatters.AlgoSdk
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class TransactionTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlgoSdk.TransactionType>
    {
        public void Serialize(ref MessagePackWriter writer, global::AlgoSdk.TransactionType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((UInt16)value);
        }

        public global::AlgoSdk.TransactionType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::AlgoSdk.TransactionType)reader.ReadUInt16();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace AlgoSdk.MsgPack.Formatters.AlgoSdk
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AssetParamsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlgoSdk.AssetParams>
    {

        public void Serialize(ref MessagePackWriter writer, global::AlgoSdk.AssetParams value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(0);
        }

        public global::AlgoSdk.AssetParams Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlgoSdk.AssetParams();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class VrfPublicKeyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlgoSdk.VrfPublicKey>
    {

        public void Serialize(ref MessagePackWriter writer, global::AlgoSdk.VrfPublicKey value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(0);
        }

        public global::AlgoSdk.VrfPublicKey Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::AlgoSdk.VrfPublicKey();
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace AlgoSdk.MsgPack.Formatters.AlgoSdk
{
    using System;
    using System.Buffers;
    using System.Runtime.InteropServices;
    using global::AlgoSdk.Crypto;
    using MessagePack;
    using Unity.Collections;

    public sealed class Transaction_AssetAcceptFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlgoSdk.Transaction.AssetAccept>
    {
        // fee
        private static global::System.ReadOnlySpan<byte> GetSpan_Fee() => new byte[1 + 3] { 163, 102, 101, 101 };
        // fv
        private static global::System.ReadOnlySpan<byte> GetSpan_FirstValidRound() => new byte[1 + 2] { 162, 102, 118 };
        // gh
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisHash() => new byte[1 + 2] { 162, 103, 104 };
        // lv
        private static global::System.ReadOnlySpan<byte> GetSpan_LastValidRound() => new byte[1 + 2] { 162, 108, 118 };
        // snd
        private static global::System.ReadOnlySpan<byte> GetSpan_Sender() => new byte[1 + 3] { 163, 115, 110, 100 };
        // type
        private static global::System.ReadOnlySpan<byte> GetSpan_TransactionType() => new byte[1 + 4] { 164, 116, 121, 112, 101 };
        // gen
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisId() => new byte[1 + 3] { 163, 103, 101, 110 };
        // grp
        private static global::System.ReadOnlySpan<byte> GetSpan_Group() => new byte[1 + 3] { 163, 103, 114, 112 };
        // lx
        private static global::System.ReadOnlySpan<byte> GetSpan_Lease() => new byte[1 + 2] { 162, 108, 120 };
        // note
        private static global::System.ReadOnlySpan<byte> GetSpan_Note() => new byte[1 + 4] { 164, 110, 111, 116, 101 };
        // rekey
        private static global::System.ReadOnlySpan<byte> GetSpan_RekeyTo() => new byte[1 + 5] { 165, 114, 101, 107, 101, 121 };
        // xaid
        private static global::System.ReadOnlySpan<byte> GetSpan_TransferAsset() => new byte[1 + 4] { 164, 120, 97, 105, 100 };
        // asnd
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetSender() => new byte[1 + 4] { 164, 97, 115, 110, 100 };
        // arcv
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetReceiver() => new byte[1 + 4] { 164, 97, 114, 99, 118 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::AlgoSdk.Transaction.AssetAccept value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(14);
            writer.WriteRaw(GetSpan_Fee());
            writer.Write(value.Fee);
            writer.WriteRaw(GetSpan_FirstValidRound());
            writer.Write(value.FirstValidRound);
            writer.WriteRaw(GetSpan_GenesisHash());
            formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Serialize(ref writer, value.GenesisHash, options);
            writer.WriteRaw(GetSpan_LastValidRound());
            writer.Write(value.LastValidRound);
            writer.WriteRaw(GetSpan_Sender());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.Sender, options);
            writer.WriteRaw(GetSpan_TransactionType());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Serialize(ref writer, value.TransactionType, options);
            writer.WriteRaw(GetSpan_GenesisId());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.GenesisId, options);
            writer.WriteRaw(GetSpan_Group());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Group, options);
            writer.WriteRaw(GetSpan_Lease());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Lease, options);
            writer.WriteRaw(GetSpan_Note());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.Note, options);
            writer.WriteRaw(GetSpan_RekeyTo());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.RekeyTo, options);
            writer.WriteRaw(GetSpan_TransferAsset());
            writer.Write(value.TransferAsset);
            writer.WriteRaw(GetSpan_AssetSender());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.AssetSender, options);
            writer.WriteRaw(GetSpan_AssetReceiver());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.AssetReceiver, options);
        }

        public global::AlgoSdk.Transaction.AssetAccept Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Fee__ = default(ulong);
            var __FirstValidRound__ = default(ulong);
            var __GenesisHash__ = default(Sha512_256_Hash);
            var __LastValidRound__ = default(ulong);
            var __Sender__ = default(global::AlgoSdk.Address);
            var __TransactionType__ = default(global::AlgoSdk.TransactionType);
            var __GenesisId__ = default(NativeText);
            var __Group__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Lease__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Note__ = default(NativeText);
            var __RekeyTo__ = default(NativeReference<global::AlgoSdk.Address>);
            var __TransferAsset__ = default(ulong);
            var __AssetSender__ = default(global::AlgoSdk.Address);
            var __AssetReceiver__ = default(global::AlgoSdk.Address);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                        reader.Skip();
                        continue;
                    case 3:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6645094UL:
                                __Fee__ = reader.ReadUInt64();
                                continue;
                            case 6581875UL:
                                __Sender__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 7234919UL:
                                __GenesisId__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 7369319UL:
                                __Group__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 2:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 30310UL:
                                __FirstValidRound__ = reader.ReadUInt64();
                                continue;
                            case 26727UL:
                                __GenesisHash__ = formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Deserialize(ref reader, options);
                                continue;
                            case 30316UL:
                                __LastValidRound__ = reader.ReadUInt64();
                                continue;
                            case 30828UL:
                                __Lease__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701869940UL:
                                __TransactionType__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Deserialize(ref reader, options);
                                continue;
                            case 1702129518UL:
                                __Note__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 1684627832UL:
                                __TransferAsset__ = reader.ReadUInt64();
                                continue;
                            case 1684960097UL:
                                __AssetSender__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 1986228833UL:
                                __AssetReceiver__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521392579954UL) { goto FAIL; }

                        __RekeyTo__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::AlgoSdk.Transaction.AssetAccept()
            {
                Fee = __Fee__,
                FirstValidRound = __FirstValidRound__,
                GenesisHash = __GenesisHash__,
                LastValidRound = __LastValidRound__,
                Sender = __Sender__,
                GenesisId = __GenesisId__,
                Group = __Group__,
                Lease = __Lease__,
                Note = __Note__,
                RekeyTo = __RekeyTo__,
                TransferAsset = __TransferAsset__,
                AssetSender = __AssetSender__,
                AssetReceiver = __AssetReceiver__,
            };

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Transaction_AssetClawbackFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlgoSdk.Transaction.AssetClawback>
    {
        // fee
        private static global::System.ReadOnlySpan<byte> GetSpan_Fee() => new byte[1 + 3] { 163, 102, 101, 101 };
        // fv
        private static global::System.ReadOnlySpan<byte> GetSpan_FirstValidRound() => new byte[1 + 2] { 162, 102, 118 };
        // gh
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisHash() => new byte[1 + 2] { 162, 103, 104 };
        // lv
        private static global::System.ReadOnlySpan<byte> GetSpan_LastValidRound() => new byte[1 + 2] { 162, 108, 118 };
        // snd
        private static global::System.ReadOnlySpan<byte> GetSpan_Sender() => new byte[1 + 3] { 163, 115, 110, 100 };
        // type
        private static global::System.ReadOnlySpan<byte> GetSpan_TransactionType() => new byte[1 + 4] { 164, 116, 121, 112, 101 };
        // gen
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisId() => new byte[1 + 3] { 163, 103, 101, 110 };
        // grp
        private static global::System.ReadOnlySpan<byte> GetSpan_Group() => new byte[1 + 3] { 163, 103, 114, 112 };
        // lx
        private static global::System.ReadOnlySpan<byte> GetSpan_Lease() => new byte[1 + 2] { 162, 108, 120 };
        // note
        private static global::System.ReadOnlySpan<byte> GetSpan_Note() => new byte[1 + 4] { 164, 110, 111, 116, 101 };
        // rekey
        private static global::System.ReadOnlySpan<byte> GetSpan_RekeyTo() => new byte[1 + 5] { 165, 114, 101, 107, 101, 121 };
        // xaid
        private static global::System.ReadOnlySpan<byte> GetSpan_TransferAsset() => new byte[1 + 4] { 164, 120, 97, 105, 100 };
        // aamt
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetAmount() => new byte[1 + 4] { 164, 97, 97, 109, 116 };
        // asnd
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetSender() => new byte[1 + 4] { 164, 97, 115, 110, 100 };
        // arcv
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetReceiver() => new byte[1 + 4] { 164, 97, 114, 99, 118 };
        // aclose
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetCloseTo() => new byte[1 + 6] { 166, 97, 99, 108, 111, 115, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::AlgoSdk.Transaction.AssetClawback value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(16);
            writer.WriteRaw(GetSpan_Fee());
            writer.Write(value.Fee);
            writer.WriteRaw(GetSpan_FirstValidRound());
            writer.Write(value.FirstValidRound);
            writer.WriteRaw(GetSpan_GenesisHash());
            formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Serialize(ref writer, value.GenesisHash, options);
            writer.WriteRaw(GetSpan_LastValidRound());
            writer.Write(value.LastValidRound);
            writer.WriteRaw(GetSpan_Sender());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.Sender, options);
            writer.WriteRaw(GetSpan_TransactionType());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Serialize(ref writer, value.TransactionType, options);
            writer.WriteRaw(GetSpan_GenesisId());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.GenesisId, options);
            writer.WriteRaw(GetSpan_Group());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Group, options);
            writer.WriteRaw(GetSpan_Lease());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Lease, options);
            writer.WriteRaw(GetSpan_Note());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.Note, options);
            writer.WriteRaw(GetSpan_RekeyTo());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.RekeyTo, options);
            writer.WriteRaw(GetSpan_TransferAsset());
            writer.Write(value.TransferAsset);
            writer.WriteRaw(GetSpan_AssetAmount());
            writer.Write(value.AssetAmount);
            writer.WriteRaw(GetSpan_AssetSender());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.AssetSender, options);
            writer.WriteRaw(GetSpan_AssetReceiver());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.AssetReceiver, options);
            writer.WriteRaw(GetSpan_AssetCloseTo());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.AssetCloseTo, options);
        }

        public global::AlgoSdk.Transaction.AssetClawback Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Fee__ = default(ulong);
            var __FirstValidRound__ = default(ulong);
            var __GenesisHash__ = default(Sha512_256_Hash);
            var __LastValidRound__ = default(ulong);
            var __Sender__ = default(global::AlgoSdk.Address);
            var __TransactionType__ = default(global::AlgoSdk.TransactionType);
            var __GenesisId__ = default(NativeText);
            var __Group__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Lease__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Note__ = default(NativeText);
            var __RekeyTo__ = default(NativeReference<global::AlgoSdk.Address>);
            var __TransferAsset__ = default(ulong);
            var __AssetAmount__ = default(ulong);
            var __AssetSender__ = default(global::AlgoSdk.Address);
            var __AssetReceiver__ = default(global::AlgoSdk.Address);
            var __AssetCloseTo__ = default(NativeReference<global::AlgoSdk.Address>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                        reader.Skip();
                        continue;
                    case 3:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6645094UL:
                                __Fee__ = reader.ReadUInt64();
                                continue;
                            case 6581875UL:
                                __Sender__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 7234919UL:
                                __GenesisId__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 7369319UL:
                                __Group__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 2:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 30310UL:
                                __FirstValidRound__ = reader.ReadUInt64();
                                continue;
                            case 26727UL:
                                __GenesisHash__ = formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Deserialize(ref reader, options);
                                continue;
                            case 30316UL:
                                __LastValidRound__ = reader.ReadUInt64();
                                continue;
                            case 30828UL:
                                __Lease__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701869940UL:
                                __TransactionType__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Deserialize(ref reader, options);
                                continue;
                            case 1702129518UL:
                                __Note__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 1684627832UL:
                                __TransferAsset__ = reader.ReadUInt64();
                                continue;
                            case 1953325409UL:
                                __AssetAmount__ = reader.ReadUInt64();
                                continue;
                            case 1684960097UL:
                                __AssetSender__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 1986228833UL:
                                __AssetReceiver__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521392579954UL) { goto FAIL; }

                        __RekeyTo__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 111546465018721UL) { goto FAIL; }

                        __AssetCloseTo__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::AlgoSdk.Transaction.AssetClawback()
            {
                Fee = __Fee__,
                FirstValidRound = __FirstValidRound__,
                GenesisHash = __GenesisHash__,
                LastValidRound = __LastValidRound__,
                Sender = __Sender__,
                GenesisId = __GenesisId__,
                Group = __Group__,
                Lease = __Lease__,
                Note = __Note__,
                RekeyTo = __RekeyTo__,
                TransferAsset = __TransferAsset__,
                AssetAmount = __AssetAmount__,
                AssetSender = __AssetSender__,
                AssetReceiver = __AssetReceiver__,
                AssetCloseTo = __AssetCloseTo__,
            };

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Transaction_AssetConfigurationFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlgoSdk.Transaction.AssetConfiguration>
    {
        // fee
        private static global::System.ReadOnlySpan<byte> GetSpan_Fee() => new byte[1 + 3] { 163, 102, 101, 101 };
        // fv
        private static global::System.ReadOnlySpan<byte> GetSpan_FirstValidRound() => new byte[1 + 2] { 162, 102, 118 };
        // gh
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisHash() => new byte[1 + 2] { 162, 103, 104 };
        // lv
        private static global::System.ReadOnlySpan<byte> GetSpan_LastValidRound() => new byte[1 + 2] { 162, 108, 118 };
        // snd
        private static global::System.ReadOnlySpan<byte> GetSpan_Sender() => new byte[1 + 3] { 163, 115, 110, 100 };
        // type
        private static global::System.ReadOnlySpan<byte> GetSpan_TransactionType() => new byte[1 + 4] { 164, 116, 121, 112, 101 };
        // gen
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisId() => new byte[1 + 3] { 163, 103, 101, 110 };
        // grp
        private static global::System.ReadOnlySpan<byte> GetSpan_Group() => new byte[1 + 3] { 163, 103, 114, 112 };
        // lx
        private static global::System.ReadOnlySpan<byte> GetSpan_Lease() => new byte[1 + 2] { 162, 108, 120 };
        // note
        private static global::System.ReadOnlySpan<byte> GetSpan_Note() => new byte[1 + 4] { 164, 110, 111, 116, 101 };
        // rekey
        private static global::System.ReadOnlySpan<byte> GetSpan_RekeyTo() => new byte[1 + 5] { 165, 114, 101, 107, 101, 121 };
        // caid
        private static global::System.ReadOnlySpan<byte> GetSpan_ConfigAsset() => new byte[1 + 4] { 164, 99, 97, 105, 100 };
        // apar
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetParams() => new byte[1 + 4] { 164, 97, 112, 97, 114 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::AlgoSdk.Transaction.AssetConfiguration value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(13);
            writer.WriteRaw(GetSpan_Fee());
            writer.Write(value.Fee);
            writer.WriteRaw(GetSpan_FirstValidRound());
            writer.Write(value.FirstValidRound);
            writer.WriteRaw(GetSpan_GenesisHash());
            formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Serialize(ref writer, value.GenesisHash, options);
            writer.WriteRaw(GetSpan_LastValidRound());
            writer.Write(value.LastValidRound);
            writer.WriteRaw(GetSpan_Sender());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.Sender, options);
            writer.WriteRaw(GetSpan_TransactionType());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Serialize(ref writer, value.TransactionType, options);
            writer.WriteRaw(GetSpan_GenesisId());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.GenesisId, options);
            writer.WriteRaw(GetSpan_Group());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Group, options);
            writer.WriteRaw(GetSpan_Lease());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Lease, options);
            writer.WriteRaw(GetSpan_Note());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.Note, options);
            writer.WriteRaw(GetSpan_RekeyTo());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.RekeyTo, options);
            writer.WriteRaw(GetSpan_ConfigAsset());
            writer.Write(value.ConfigAsset);
            writer.WriteRaw(GetSpan_AssetParams());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.AssetParams>().Serialize(ref writer, value.AssetParams, options);
        }

        public global::AlgoSdk.Transaction.AssetConfiguration Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Fee__ = default(ulong);
            var __FirstValidRound__ = default(ulong);
            var __GenesisHash__ = default(Sha512_256_Hash);
            var __LastValidRound__ = default(ulong);
            var __Sender__ = default(global::AlgoSdk.Address);
            var __TransactionType__ = default(global::AlgoSdk.TransactionType);
            var __GenesisId__ = default(NativeText);
            var __Group__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Lease__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Note__ = default(NativeText);
            var __RekeyTo__ = default(NativeReference<global::AlgoSdk.Address>);
            var __ConfigAsset__ = default(ulong);
            var __AssetParams__ = default(global::AlgoSdk.AssetParams);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                        reader.Skip();
                        continue;
                    case 3:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6645094UL:
                                __Fee__ = reader.ReadUInt64();
                                continue;
                            case 6581875UL:
                                __Sender__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 7234919UL:
                                __GenesisId__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 7369319UL:
                                __Group__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 2:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 30310UL:
                                __FirstValidRound__ = reader.ReadUInt64();
                                continue;
                            case 26727UL:
                                __GenesisHash__ = formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Deserialize(ref reader, options);
                                continue;
                            case 30316UL:
                                __LastValidRound__ = reader.ReadUInt64();
                                continue;
                            case 30828UL:
                                __Lease__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701869940UL:
                                __TransactionType__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Deserialize(ref reader, options);
                                continue;
                            case 1702129518UL:
                                __Note__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 1684627811UL:
                                __ConfigAsset__ = reader.ReadUInt64();
                                continue;
                            case 1918988385UL:
                                __AssetParams__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.AssetParams>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521392579954UL) { goto FAIL; }

                        __RekeyTo__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::AlgoSdk.Transaction.AssetConfiguration()
            {
                Fee = __Fee__,
                FirstValidRound = __FirstValidRound__,
                GenesisHash = __GenesisHash__,
                LastValidRound = __LastValidRound__,
                Sender = __Sender__,
                GenesisId = __GenesisId__,
                Group = __Group__,
                Lease = __Lease__,
                Note = __Note__,
                RekeyTo = __RekeyTo__,
                ConfigAsset = __ConfigAsset__,
                AssetParams = __AssetParams__,
            };

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Transaction_AssetFreezeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlgoSdk.Transaction.AssetFreeze>
    {
        // fee
        private static global::System.ReadOnlySpan<byte> GetSpan_Fee() => new byte[1 + 3] { 163, 102, 101, 101 };
        // fv
        private static global::System.ReadOnlySpan<byte> GetSpan_FirstValidRound() => new byte[1 + 2] { 162, 102, 118 };
        // gh
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisHash() => new byte[1 + 2] { 162, 103, 104 };
        // lv
        private static global::System.ReadOnlySpan<byte> GetSpan_LastValidRound() => new byte[1 + 2] { 162, 108, 118 };
        // snd
        private static global::System.ReadOnlySpan<byte> GetSpan_Sender() => new byte[1 + 3] { 163, 115, 110, 100 };
        // type
        private static global::System.ReadOnlySpan<byte> GetSpan_TransactionType() => new byte[1 + 4] { 164, 116, 121, 112, 101 };
        // gen
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisId() => new byte[1 + 3] { 163, 103, 101, 110 };
        // grp
        private static global::System.ReadOnlySpan<byte> GetSpan_Group() => new byte[1 + 3] { 163, 103, 114, 112 };
        // lx
        private static global::System.ReadOnlySpan<byte> GetSpan_Lease() => new byte[1 + 2] { 162, 108, 120 };
        // note
        private static global::System.ReadOnlySpan<byte> GetSpan_Note() => new byte[1 + 4] { 164, 110, 111, 116, 101 };
        // rekey
        private static global::System.ReadOnlySpan<byte> GetSpan_RekeyTo() => new byte[1 + 5] { 165, 114, 101, 107, 101, 121 };
        // fadd
        private static global::System.ReadOnlySpan<byte> GetSpan_FreezeAccount() => new byte[1 + 4] { 164, 102, 97, 100, 100 };
        // faid
        private static global::System.ReadOnlySpan<byte> GetSpan_FreezeAssetId() => new byte[1 + 4] { 164, 102, 97, 105, 100 };
        // afrz
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetFrozen() => new byte[1 + 4] { 164, 97, 102, 114, 122 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::AlgoSdk.Transaction.AssetFreeze value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(14);
            writer.WriteRaw(GetSpan_Fee());
            writer.Write(value.Fee);
            writer.WriteRaw(GetSpan_FirstValidRound());
            writer.Write(value.FirstValidRound);
            writer.WriteRaw(GetSpan_GenesisHash());
            formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Serialize(ref writer, value.GenesisHash, options);
            writer.WriteRaw(GetSpan_LastValidRound());
            writer.Write(value.LastValidRound);
            writer.WriteRaw(GetSpan_Sender());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.Sender, options);
            writer.WriteRaw(GetSpan_TransactionType());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Serialize(ref writer, value.TransactionType, options);
            writer.WriteRaw(GetSpan_GenesisId());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.GenesisId, options);
            writer.WriteRaw(GetSpan_Group());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Group, options);
            writer.WriteRaw(GetSpan_Lease());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Lease, options);
            writer.WriteRaw(GetSpan_Note());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.Note, options);
            writer.WriteRaw(GetSpan_RekeyTo());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.RekeyTo, options);
            writer.WriteRaw(GetSpan_FreezeAccount());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.FreezeAccount, options);
            writer.WriteRaw(GetSpan_FreezeAssetId());
            writer.Write(value.FreezeAssetId);
            writer.WriteRaw(GetSpan_AssetFrozen());
            writer.Write(value.AssetFrozen);
        }

        public global::AlgoSdk.Transaction.AssetFreeze Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Fee__ = default(ulong);
            var __FirstValidRound__ = default(ulong);
            var __GenesisHash__ = default(Sha512_256_Hash);
            var __LastValidRound__ = default(ulong);
            var __Sender__ = default(global::AlgoSdk.Address);
            var __TransactionType__ = default(global::AlgoSdk.TransactionType);
            var __GenesisId__ = default(NativeText);
            var __Group__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Lease__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Note__ = default(NativeText);
            var __RekeyTo__ = default(NativeReference<global::AlgoSdk.Address>);
            var __FreezeAccount__ = default(global::AlgoSdk.Address);
            var __FreezeAssetId__ = default(ulong);
            var __AssetFrozen__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                        reader.Skip();
                        continue;
                    case 3:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6645094UL:
                                __Fee__ = reader.ReadUInt64();
                                continue;
                            case 6581875UL:
                                __Sender__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 7234919UL:
                                __GenesisId__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 7369319UL:
                                __Group__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 2:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 30310UL:
                                __FirstValidRound__ = reader.ReadUInt64();
                                continue;
                            case 26727UL:
                                __GenesisHash__ = formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Deserialize(ref reader, options);
                                continue;
                            case 30316UL:
                                __LastValidRound__ = reader.ReadUInt64();
                                continue;
                            case 30828UL:
                                __Lease__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701869940UL:
                                __TransactionType__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Deserialize(ref reader, options);
                                continue;
                            case 1702129518UL:
                                __Note__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 1684300134UL:
                                __FreezeAccount__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 1684627814UL:
                                __FreezeAssetId__ = reader.ReadUInt64();
                                continue;
                            case 2054317665UL:
                                __AssetFrozen__ = reader.ReadBoolean();
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521392579954UL) { goto FAIL; }

                        __RekeyTo__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::AlgoSdk.Transaction.AssetFreeze()
            {
                Fee = __Fee__,
                FirstValidRound = __FirstValidRound__,
                GenesisHash = __GenesisHash__,
                LastValidRound = __LastValidRound__,
                Sender = __Sender__,
                GenesisId = __GenesisId__,
                Group = __Group__,
                Lease = __Lease__,
                Note = __Note__,
                RekeyTo = __RekeyTo__,
                FreezeAccount = __FreezeAccount__,
                FreezeAssetId = __FreezeAssetId__,
                AssetFrozen = __AssetFrozen__,
            };

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Transaction_AssetTransferFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlgoSdk.Transaction.AssetTransfer>
    {
        // fee
        private static global::System.ReadOnlySpan<byte> GetSpan_Fee() => new byte[1 + 3] { 163, 102, 101, 101 };
        // fv
        private static global::System.ReadOnlySpan<byte> GetSpan_FirstValidRound() => new byte[1 + 2] { 162, 102, 118 };
        // gh
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisHash() => new byte[1 + 2] { 162, 103, 104 };
        // lv
        private static global::System.ReadOnlySpan<byte> GetSpan_LastValidRound() => new byte[1 + 2] { 162, 108, 118 };
        // snd
        private static global::System.ReadOnlySpan<byte> GetSpan_Sender() => new byte[1 + 3] { 163, 115, 110, 100 };
        // type
        private static global::System.ReadOnlySpan<byte> GetSpan_TransactionType() => new byte[1 + 4] { 164, 116, 121, 112, 101 };
        // gen
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisId() => new byte[1 + 3] { 163, 103, 101, 110 };
        // grp
        private static global::System.ReadOnlySpan<byte> GetSpan_Group() => new byte[1 + 3] { 163, 103, 114, 112 };
        // lx
        private static global::System.ReadOnlySpan<byte> GetSpan_Lease() => new byte[1 + 2] { 162, 108, 120 };
        // note
        private static global::System.ReadOnlySpan<byte> GetSpan_Note() => new byte[1 + 4] { 164, 110, 111, 116, 101 };
        // rekey
        private static global::System.ReadOnlySpan<byte> GetSpan_RekeyTo() => new byte[1 + 5] { 165, 114, 101, 107, 101, 121 };
        // xaid
        private static global::System.ReadOnlySpan<byte> GetSpan_TransferAsset() => new byte[1 + 4] { 164, 120, 97, 105, 100 };
        // aamt
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetAmount() => new byte[1 + 4] { 164, 97, 97, 109, 116 };
        // asnd
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetSender() => new byte[1 + 4] { 164, 97, 115, 110, 100 };
        // arcv
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetReceiver() => new byte[1 + 4] { 164, 97, 114, 99, 118 };
        // aclose
        private static global::System.ReadOnlySpan<byte> GetSpan_AssetCloseTo() => new byte[1 + 6] { 166, 97, 99, 108, 111, 115, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::AlgoSdk.Transaction.AssetTransfer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(16);
            writer.WriteRaw(GetSpan_Fee());
            writer.Write(value.Fee);
            writer.WriteRaw(GetSpan_FirstValidRound());
            writer.Write(value.FirstValidRound);
            writer.WriteRaw(GetSpan_GenesisHash());
            formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Serialize(ref writer, value.GenesisHash, options);
            writer.WriteRaw(GetSpan_LastValidRound());
            writer.Write(value.LastValidRound);
            writer.WriteRaw(GetSpan_Sender());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.Sender, options);
            writer.WriteRaw(GetSpan_TransactionType());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Serialize(ref writer, value.TransactionType, options);
            writer.WriteRaw(GetSpan_GenesisId());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.GenesisId, options);
            writer.WriteRaw(GetSpan_Group());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Group, options);
            writer.WriteRaw(GetSpan_Lease());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Lease, options);
            writer.WriteRaw(GetSpan_Note());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.Note, options);
            writer.WriteRaw(GetSpan_RekeyTo());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.RekeyTo, options);
            writer.WriteRaw(GetSpan_TransferAsset());
            writer.Write(value.TransferAsset);
            writer.WriteRaw(GetSpan_AssetAmount());
            writer.Write(value.AssetAmount);
            writer.WriteRaw(GetSpan_AssetSender());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.AssetSender, options);
            writer.WriteRaw(GetSpan_AssetReceiver());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.AssetReceiver, options);
            writer.WriteRaw(GetSpan_AssetCloseTo());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.AssetCloseTo, options);
        }

        public global::AlgoSdk.Transaction.AssetTransfer Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Fee__ = default(ulong);
            var __FirstValidRound__ = default(ulong);
            var __GenesisHash__ = default(Sha512_256_Hash);
            var __LastValidRound__ = default(ulong);
            var __Sender__ = default(global::AlgoSdk.Address);
            var __TransactionType__ = default(global::AlgoSdk.TransactionType);
            var __GenesisId__ = default(NativeText);
            var __Group__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Lease__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Note__ = default(NativeText);
            var __RekeyTo__ = default(NativeReference<global::AlgoSdk.Address>);
            var __TransferAsset__ = default(ulong);
            var __AssetAmount__ = default(ulong);
            var __AssetSender__ = default(global::AlgoSdk.Address);
            var __AssetReceiver__ = default(global::AlgoSdk.Address);
            var __AssetCloseTo__ = default(NativeReference<global::AlgoSdk.Address>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                        reader.Skip();
                        continue;
                    case 3:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6645094UL:
                                __Fee__ = reader.ReadUInt64();
                                continue;
                            case 6581875UL:
                                __Sender__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 7234919UL:
                                __GenesisId__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 7369319UL:
                                __Group__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 2:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 30310UL:
                                __FirstValidRound__ = reader.ReadUInt64();
                                continue;
                            case 26727UL:
                                __GenesisHash__ = formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Deserialize(ref reader, options);
                                continue;
                            case 30316UL:
                                __LastValidRound__ = reader.ReadUInt64();
                                continue;
                            case 30828UL:
                                __Lease__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701869940UL:
                                __TransactionType__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Deserialize(ref reader, options);
                                continue;
                            case 1702129518UL:
                                __Note__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 1684627832UL:
                                __TransferAsset__ = reader.ReadUInt64();
                                continue;
                            case 1953325409UL:
                                __AssetAmount__ = reader.ReadUInt64();
                                continue;
                            case 1684960097UL:
                                __AssetSender__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 1986228833UL:
                                __AssetReceiver__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521392579954UL) { goto FAIL; }

                        __RekeyTo__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 111546465018721UL) { goto FAIL; }

                        __AssetCloseTo__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::AlgoSdk.Transaction.AssetTransfer()
            {
                Fee = __Fee__,
                FirstValidRound = __FirstValidRound__,
                GenesisHash = __GenesisHash__,
                LastValidRound = __LastValidRound__,
                Sender = __Sender__,
                GenesisId = __GenesisId__,
                Group = __Group__,
                Lease = __Lease__,
                Note = __Note__,
                RekeyTo = __RekeyTo__,
                TransferAsset = __TransferAsset__,
                AssetAmount = __AssetAmount__,
                AssetSender = __AssetSender__,
                AssetReceiver = __AssetReceiver__,
                AssetCloseTo = __AssetCloseTo__,
            };

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Transaction_KeyRegistrationFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlgoSdk.Transaction.KeyRegistration>
    {
        // fee
        private static global::System.ReadOnlySpan<byte> GetSpan_Fee() => new byte[1 + 3] { 163, 102, 101, 101 };
        // fv
        private static global::System.ReadOnlySpan<byte> GetSpan_FirstValidRound() => new byte[1 + 2] { 162, 102, 118 };
        // gh
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisHash() => new byte[1 + 2] { 162, 103, 104 };
        // lv
        private static global::System.ReadOnlySpan<byte> GetSpan_LastValidRound() => new byte[1 + 2] { 162, 108, 118 };
        // snd
        private static global::System.ReadOnlySpan<byte> GetSpan_Sender() => new byte[1 + 3] { 163, 115, 110, 100 };
        // type
        private static global::System.ReadOnlySpan<byte> GetSpan_TransactionType() => new byte[1 + 4] { 164, 116, 121, 112, 101 };
        // gen
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisId() => new byte[1 + 3] { 163, 103, 101, 110 };
        // grp
        private static global::System.ReadOnlySpan<byte> GetSpan_Group() => new byte[1 + 3] { 163, 103, 114, 112 };
        // lx
        private static global::System.ReadOnlySpan<byte> GetSpan_Lease() => new byte[1 + 2] { 162, 108, 120 };
        // note
        private static global::System.ReadOnlySpan<byte> GetSpan_Note() => new byte[1 + 4] { 164, 110, 111, 116, 101 };
        // rekey
        private static global::System.ReadOnlySpan<byte> GetSpan_RekeyTo() => new byte[1 + 5] { 165, 114, 101, 107, 101, 121 };
        // votekey
        private static global::System.ReadOnlySpan<byte> GetSpan_VotePublicKey() => new byte[1 + 7] { 167, 118, 111, 116, 101, 107, 101, 121 };
        // selkey
        private static global::System.ReadOnlySpan<byte> GetSpan_SelectionPublicKey() => new byte[1 + 6] { 166, 115, 101, 108, 107, 101, 121 };
        // votefst
        private static global::System.ReadOnlySpan<byte> GetSpan_VoteFirst() => new byte[1 + 7] { 167, 118, 111, 116, 101, 102, 115, 116 };
        // votelst
        private static global::System.ReadOnlySpan<byte> GetSpan_VoteLast() => new byte[1 + 7] { 167, 118, 111, 116, 101, 108, 115, 116 };
        // votekd
        private static global::System.ReadOnlySpan<byte> GetSpan_VoteKeyDilution() => new byte[1 + 6] { 166, 118, 111, 116, 101, 107, 100 };
        // nonpart
        private static global::System.ReadOnlySpan<byte> GetSpan_NonParticipation() => new byte[1 + 7] { 167, 110, 111, 110, 112, 97, 114, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::AlgoSdk.Transaction.KeyRegistration value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(17);
            writer.WriteRaw(GetSpan_Fee());
            writer.Write(value.Fee);
            writer.WriteRaw(GetSpan_FirstValidRound());
            writer.Write(value.FirstValidRound);
            writer.WriteRaw(GetSpan_GenesisHash());
            formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Serialize(ref writer, value.GenesisHash, options);
            writer.WriteRaw(GetSpan_LastValidRound());
            writer.Write(value.LastValidRound);
            writer.WriteRaw(GetSpan_Sender());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.Sender, options);
            writer.WriteRaw(GetSpan_TransactionType());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Serialize(ref writer, value.TransactionType, options);
            writer.WriteRaw(GetSpan_GenesisId());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.GenesisId, options);
            writer.WriteRaw(GetSpan_Group());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Group, options);
            writer.WriteRaw(GetSpan_Lease());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Lease, options);
            writer.WriteRaw(GetSpan_Note());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.Note, options);
            writer.WriteRaw(GetSpan_RekeyTo());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.RekeyTo, options);
            writer.WriteRaw(GetSpan_VotePublicKey());
            formatterResolver.GetFormatterWithVerify<Ed25519.PublicKey>().Serialize(ref writer, value.VotePublicKey, options);
            writer.WriteRaw(GetSpan_SelectionPublicKey());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.VrfPublicKey>().Serialize(ref writer, value.SelectionPublicKey, options);
            writer.WriteRaw(GetSpan_VoteFirst());
            writer.Write(value.VoteFirst);
            writer.WriteRaw(GetSpan_VoteLast());
            writer.Write(value.VoteLast);
            writer.WriteRaw(GetSpan_VoteKeyDilution());
            writer.Write(value.VoteKeyDilution);
            writer.WriteRaw(GetSpan_NonParticipation());
            formatterResolver.GetFormatterWithVerify<NativeReference<bool>>().Serialize(ref writer, value.NonParticipation, options);
        }

        public global::AlgoSdk.Transaction.KeyRegistration Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Fee__ = default(ulong);
            var __FirstValidRound__ = default(ulong);
            var __GenesisHash__ = default(Sha512_256_Hash);
            var __LastValidRound__ = default(ulong);
            var __Sender__ = default(global::AlgoSdk.Address);
            var __TransactionType__ = default(global::AlgoSdk.TransactionType);
            var __GenesisId__ = default(NativeText);
            var __Group__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Lease__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Note__ = default(NativeText);
            var __RekeyTo__ = default(NativeReference<global::AlgoSdk.Address>);
            var __VotePublicKey__ = default(Ed25519.PublicKey);
            var __SelectionPublicKey__ = default(global::AlgoSdk.VrfPublicKey);
            var __VoteFirst__ = default(ulong);
            var __VoteLast__ = default(ulong);
            var __VoteKeyDilution__ = default(ulong);
            var __NonParticipation__ = default(NativeReference<bool>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                        reader.Skip();
                        continue;
                    case 3:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6645094UL:
                                __Fee__ = reader.ReadUInt64();
                                continue;
                            case 6581875UL:
                                __Sender__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 7234919UL:
                                __GenesisId__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 7369319UL:
                                __Group__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 2:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 30310UL:
                                __FirstValidRound__ = reader.ReadUInt64();
                                continue;
                            case 26727UL:
                                __GenesisHash__ = formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Deserialize(ref reader, options);
                                continue;
                            case 30316UL:
                                __LastValidRound__ = reader.ReadUInt64();
                                continue;
                            case 30828UL:
                                __Lease__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701869940UL:
                                __TransactionType__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Deserialize(ref reader, options);
                                continue;
                            case 1702129518UL:
                                __Note__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521392579954UL) { goto FAIL; }

                        __RekeyTo__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 34169984120024950UL:
                                __VotePublicKey__ = formatterResolver.GetFormatterWithVerify<Ed25519.PublicKey>().Deserialize(ref reader, options);
                                continue;
                            case 32777980924424054UL:
                                __VoteFirst__ = reader.ReadUInt64();
                                continue;
                            case 32778006694227830UL:
                                __VoteLast__ = reader.ReadUInt64();
                                continue;
                            case 32776860122115950UL:
                                __NonParticipation__ = formatterResolver.GetFormatterWithVerify<NativeReference<bool>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 133476500923763UL:
                                __SelectionPublicKey__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.VrfPublicKey>().Deserialize(ref reader, options);
                                continue;
                            case 110412426407798UL:
                                __VoteKeyDilution__ = reader.ReadUInt64();
                                continue;
                        }

                }
            }

            var ____result = new global::AlgoSdk.Transaction.KeyRegistration()
            {
                Fee = __Fee__,
                FirstValidRound = __FirstValidRound__,
                GenesisHash = __GenesisHash__,
                LastValidRound = __LastValidRound__,
                Sender = __Sender__,
                GenesisId = __GenesisId__,
                Group = __Group__,
                Lease = __Lease__,
                Note = __Note__,
                RekeyTo = __RekeyTo__,
                VotePublicKey = __VotePublicKey__,
                SelectionPublicKey = __SelectionPublicKey__,
                VoteFirst = __VoteFirst__,
                VoteLast = __VoteLast__,
                VoteKeyDilution = __VoteKeyDilution__,
                NonParticipation = __NonParticipation__,
            };

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Transaction_PaymentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AlgoSdk.Transaction.Payment>
    {
        // fee
        private static global::System.ReadOnlySpan<byte> GetSpan_Fee() => new byte[1 + 3] { 163, 102, 101, 101 };
        // fv
        private static global::System.ReadOnlySpan<byte> GetSpan_FirstValidRound() => new byte[1 + 2] { 162, 102, 118 };
        // gh
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisHash() => new byte[1 + 2] { 162, 103, 104 };
        // lv
        private static global::System.ReadOnlySpan<byte> GetSpan_LastValidRound() => new byte[1 + 2] { 162, 108, 118 };
        // snd
        private static global::System.ReadOnlySpan<byte> GetSpan_Sender() => new byte[1 + 3] { 163, 115, 110, 100 };
        // type
        private static global::System.ReadOnlySpan<byte> GetSpan_TransactionType() => new byte[1 + 4] { 164, 116, 121, 112, 101 };
        // gen
        private static global::System.ReadOnlySpan<byte> GetSpan_GenesisId() => new byte[1 + 3] { 163, 103, 101, 110 };
        // grp
        private static global::System.ReadOnlySpan<byte> GetSpan_Group() => new byte[1 + 3] { 163, 103, 114, 112 };
        // lx
        private static global::System.ReadOnlySpan<byte> GetSpan_Lease() => new byte[1 + 2] { 162, 108, 120 };
        // note
        private static global::System.ReadOnlySpan<byte> GetSpan_Note() => new byte[1 + 4] { 164, 110, 111, 116, 101 };
        // rekey
        private static global::System.ReadOnlySpan<byte> GetSpan_RekeyTo() => new byte[1 + 5] { 165, 114, 101, 107, 101, 121 };
        // rcv
        private static global::System.ReadOnlySpan<byte> GetSpan_Receiver() => new byte[1 + 3] { 163, 114, 99, 118 };
        // amt
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 3] { 163, 97, 109, 116 };
        // close
        private static global::System.ReadOnlySpan<byte> GetSpan_CloseRemainderTo() => new byte[1 + 5] { 165, 99, 108, 111, 115, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::AlgoSdk.Transaction.Payment value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(14);
            writer.WriteRaw(GetSpan_Fee());
            writer.Write(value.Fee);
            writer.WriteRaw(GetSpan_FirstValidRound());
            writer.Write(value.FirstValidRound);
            writer.WriteRaw(GetSpan_GenesisHash());
            formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Serialize(ref writer, value.GenesisHash, options);
            writer.WriteRaw(GetSpan_LastValidRound());
            writer.Write(value.LastValidRound);
            writer.WriteRaw(GetSpan_Sender());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.Sender, options);
            writer.WriteRaw(GetSpan_TransactionType());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Serialize(ref writer, value.TransactionType, options);
            writer.WriteRaw(GetSpan_GenesisId());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.GenesisId, options);
            writer.WriteRaw(GetSpan_Group());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Group, options);
            writer.WriteRaw(GetSpan_Lease());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.Lease, options);
            writer.WriteRaw(GetSpan_Note());
            formatterResolver.GetFormatterWithVerify<NativeText>().Serialize(ref writer, value.Note, options);
            writer.WriteRaw(GetSpan_RekeyTo());
            formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.RekeyTo, options);
            writer.WriteRaw(GetSpan_Receiver());
            formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Serialize(ref writer, value.Receiver, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
            writer.WriteRaw(GetSpan_CloseRemainderTo());
            formatterResolver.GetFormatterWithVerify<Unity.Collections.NativeReference<global::AlgoSdk.Address>>().Serialize(ref writer, value.CloseRemainderTo, options);
        }

        public global::AlgoSdk.Transaction.Payment Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Fee__ = default(ulong);
            var __FirstValidRound__ = default(ulong);
            var __GenesisHash__ = default(Sha512_256_Hash);
            var __LastValidRound__ = default(ulong);
            var __Sender__ = default(global::AlgoSdk.Address);
            var __TransactionType__ = default(global::AlgoSdk.TransactionType);
            var __GenesisId__ = default(NativeText);
            var __Group__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Lease__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Note__ = default(NativeText);
            var __RekeyTo__ = default(NativeReference<global::AlgoSdk.Address>);
            var __Receiver__ = default(global::AlgoSdk.Address);
            var __Amount__ = default(ulong);
            var __CloseRemainderTo__ = default(Unity.Collections.NativeReference<global::AlgoSdk.Address>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                        reader.Skip();
                        continue;
                    case 3:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6645094UL:
                                __Fee__ = reader.ReadUInt64();
                                continue;
                            case 6581875UL:
                                __Sender__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 7234919UL:
                                __GenesisId__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                            case 7369319UL:
                                __Group__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                            case 7758706UL:
                                __Receiver__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.Address>().Deserialize(ref reader, options);
                                continue;
                            case 7630177UL:
                                __Amount__ = reader.ReadUInt64();
                                continue;
                        }
                    case 2:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 30310UL:
                                __FirstValidRound__ = reader.ReadUInt64();
                                continue;
                            case 26727UL:
                                __GenesisHash__ = formatterResolver.GetFormatterWithVerify<Sha512_256_Hash>().Deserialize(ref reader, options);
                                continue;
                            case 30316UL:
                                __LastValidRound__ = reader.ReadUInt64();
                                continue;
                            case 30828UL:
                                __Lease__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701869940UL:
                                __TransactionType__ = formatterResolver.GetFormatterWithVerify<global::AlgoSdk.TransactionType>().Deserialize(ref reader, options);
                                continue;
                            case 1702129518UL:
                                __Note__ = formatterResolver.GetFormatterWithVerify<NativeText>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 521392579954UL:
                                __RekeyTo__ = formatterResolver.GetFormatterWithVerify<NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                            case 435728378979UL:
                                __CloseRemainderTo__ = formatterResolver.GetFormatterWithVerify<Unity.Collections.NativeReference<global::AlgoSdk.Address>>().Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            var ____result = new global::AlgoSdk.Transaction.Payment()
            {
                Fee = __Fee__,
                FirstValidRound = __FirstValidRound__,
                GenesisHash = __GenesisHash__,
                LastValidRound = __LastValidRound__,
                Sender = __Sender__,
                GenesisId = __GenesisId__,
                Group = __Group__,
                Lease = __Lease__,
                Note = __Note__,
                RekeyTo = __RekeyTo__,
                Receiver = __Receiver__,
                Amount = __Amount__,
                CloseRemainderTo = __CloseRemainderTo__,
            };

            reader.Depth--;
            return ____result;
        }
    }
}
