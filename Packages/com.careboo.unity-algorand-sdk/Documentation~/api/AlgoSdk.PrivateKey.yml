### YamlMime:ManagedReference
items:
- uid: AlgoSdk.PrivateKey
  commentId: T:AlgoSdk.PrivateKey
  id: PrivateKey
  parent: AlgoSdk
  children:
  - AlgoSdk.PrivateKey.Equals(AlgoSdk.PrivateKey)
  - AlgoSdk.PrivateKey.FromString(System.String)
  - AlgoSdk.PrivateKey.GetUnsafePtr
  - AlgoSdk.PrivateKey.Item(System.Int32)
  - AlgoSdk.PrivateKey.Length
  - AlgoSdk.PrivateKey.ToAddress
  - AlgoSdk.PrivateKey.ToKeyPair
  - AlgoSdk.PrivateKey.ToMnemonic
  - AlgoSdk.PrivateKey.ToPublicKey
  - AlgoSdk.PrivateKey.ToString
  langs:
  - csharp
  - vb
  name: PrivateKey
  nameWithType: PrivateKey
  fullName: AlgoSdk.PrivateKey
  type: Struct
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: PrivateKey
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 10
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [Serializable]

      [AlgoApiFormatter(typeof(PrivateKeyFormatter), "C:\\Users\\jason\\Projects\\CareBoo\\Unity.AlgoSdk\\Packages\\com.careboo.unity-algorand-sdk\\CareBoo.AlgoSdk\\PrivateKey.cs", 12)]

      public struct PrivateKey : IEquatable<PrivateKey>, IByteArray, IContiguousArray<byte>, IArray<byte>
    content.vb: >-
      <Serializable>

      <AlgoApiFormatter(GetType(PrivateKeyFormatter), "C:\Users\jason\Projects\CareBoo\Unity.AlgoSdk\Packages\com.careboo.unity-algorand-sdk\CareBoo.AlgoSdk\PrivateKey.cs", 12)>

      Public Structure PrivateKey
          Implements IEquatable(Of PrivateKey), IByteArray, IContiguousArray(Of Byte), IArray(Of Byte)
  implements:
  - System.IEquatable{AlgoSdk.PrivateKey}
  - AlgoSdk.LowLevel.IByteArray
  - AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  - AlgoSdk.LowLevel.IArray{System.Byte}
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - AlgoSdk.PrivateKey.AlgoSdk.Base64Encoding.CopyToBase64``2({T}@)
  - AlgoSdk.PrivateKey.AlgoSdk.Base64Encoding.CopyFromBase64``2({T}@,System.Int32)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  - type: AlgoSdk.AlgoApiFormatterAttribute
    ctor: AlgoSdk.AlgoApiFormatterAttribute.#ctor(System.Type,System.String,System.Int32)
    arguments:
    - type: System.Type
      value: AlgoSdk.Formatters.PrivateKeyFormatter
    - type: System.String
      value: C:\Users\jason\Projects\CareBoo\Unity.AlgoSdk\Packages\com.careboo.unity-algorand-sdk\CareBoo.AlgoSdk\PrivateKey.cs
    - type: System.Int32
      value: 12
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: AlgoSdk.PrivateKey.GetUnsafePtr
  commentId: M:AlgoSdk.PrivateKey.GetUnsafePtr
  id: GetUnsafePtr
  parent: AlgoSdk.PrivateKey
  langs:
  - csharp
  - vb
  name: GetUnsafePtr()
  nameWithType: PrivateKey.GetUnsafePtr()
  fullName: AlgoSdk.PrivateKey.GetUnsafePtr()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: GetUnsafePtr
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 19
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public void *GetUnsafePtr()
    return:
      type: System.Void*
    content.vb: 'Public Function GetUnsafePtr As '
  overload: AlgoSdk.PrivateKey.GetUnsafePtr*
  implements:
  - AlgoSdk.LowLevel.IContiguousArray{System.Byte}.GetUnsafePtr
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.PrivateKey.Length
  commentId: P:AlgoSdk.PrivateKey.Length
  id: Length
  parent: AlgoSdk.PrivateKey
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: PrivateKey.Length
  fullName: AlgoSdk.PrivateKey.Length
  type: Property
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Length
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 21
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: AlgoSdk.PrivateKey.Length*
  implements:
  - AlgoSdk.LowLevel.IArray{System.Byte}.Length
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AlgoSdk.PrivateKey.Item(System.Int32)
  commentId: P:AlgoSdk.PrivateKey.Item(System.Int32)
  id: Item(System.Int32)
  parent: AlgoSdk.PrivateKey
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: PrivateKey.Item[Int32]
  fullName: AlgoSdk.PrivateKey.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: this[]
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 23
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public byte this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Byte
    content.vb: Public Property Item(index As Integer) As Byte
  overload: AlgoSdk.PrivateKey.Item*
  implements:
  - AlgoSdk.LowLevel.IArray{System.Byte}.Item(System.Int32)
  nameWithType.vb: PrivateKey.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: AlgoSdk.PrivateKey.Item(System.Int32)
  name.vb: Item(Int32)
- uid: AlgoSdk.PrivateKey.ToMnemonic
  commentId: M:AlgoSdk.PrivateKey.ToMnemonic
  id: ToMnemonic
  parent: AlgoSdk.PrivateKey
  langs:
  - csharp
  - vb
  name: ToMnemonic()
  nameWithType: PrivateKey.ToMnemonic()
  fullName: AlgoSdk.PrivateKey.ToMnemonic()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToMnemonic
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 29
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public Mnemonic ToMnemonic()
    return:
      type: AlgoSdk.Mnemonic
    content.vb: Public Function ToMnemonic As Mnemonic
  overload: AlgoSdk.PrivateKey.ToMnemonic*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.PrivateKey.ToKeyPair
  commentId: M:AlgoSdk.PrivateKey.ToKeyPair
  id: ToKeyPair
  parent: AlgoSdk.PrivateKey
  langs:
  - csharp
  - vb
  name: ToKeyPair()
  nameWithType: PrivateKey.ToKeyPair()
  fullName: AlgoSdk.PrivateKey.ToKeyPair()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToKeyPair
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 41
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public Ed25519.KeyPair ToKeyPair()
    return:
      type: AlgoSdk.Crypto.Ed25519.KeyPair
    content.vb: Public Function ToKeyPair As Ed25519.KeyPair
  overload: AlgoSdk.PrivateKey.ToKeyPair*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.PrivateKey.ToPublicKey
  commentId: M:AlgoSdk.PrivateKey.ToPublicKey
  id: ToPublicKey
  parent: AlgoSdk.PrivateKey
  langs:
  - csharp
  - vb
  name: ToPublicKey()
  nameWithType: PrivateKey.ToPublicKey()
  fullName: AlgoSdk.PrivateKey.ToPublicKey()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToPublicKey
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 46
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public Ed25519.PublicKey ToPublicKey()
    return:
      type: AlgoSdk.Crypto.Ed25519.PublicKey
    content.vb: Public Function ToPublicKey As Ed25519.PublicKey
  overload: AlgoSdk.PrivateKey.ToPublicKey*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.PrivateKey.ToAddress
  commentId: M:AlgoSdk.PrivateKey.ToAddress
  id: ToAddress
  parent: AlgoSdk.PrivateKey
  langs:
  - csharp
  - vb
  name: ToAddress()
  nameWithType: PrivateKey.ToAddress()
  fullName: AlgoSdk.PrivateKey.ToAddress()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToAddress
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 51
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public Address ToAddress()
    return:
      type: AlgoSdk.Address
    content.vb: Public Function ToAddress As Address
  overload: AlgoSdk.PrivateKey.ToAddress*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.PrivateKey.Equals(AlgoSdk.PrivateKey)
  commentId: M:AlgoSdk.PrivateKey.Equals(AlgoSdk.PrivateKey)
  id: Equals(AlgoSdk.PrivateKey)
  parent: AlgoSdk.PrivateKey
  langs:
  - csharp
  - vb
  name: Equals(PrivateKey)
  nameWithType: PrivateKey.Equals(PrivateKey)
  fullName: AlgoSdk.PrivateKey.Equals(AlgoSdk.PrivateKey)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 56
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public bool Equals(PrivateKey other)
    parameters:
    - id: other
      type: AlgoSdk.PrivateKey
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As PrivateKey) As Boolean
  overload: AlgoSdk.PrivateKey.Equals*
  implements:
  - System.IEquatable{AlgoSdk.PrivateKey}.Equals(AlgoSdk.PrivateKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.PrivateKey.ToString
  commentId: M:AlgoSdk.PrivateKey.ToString
  id: ToString
  parent: AlgoSdk.PrivateKey
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PrivateKey.ToString()
  fullName: AlgoSdk.PrivateKey.ToString()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToString
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 64
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: AlgoSdk.PrivateKey.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AlgoSdk.PrivateKey.FromString(System.String)
  commentId: M:AlgoSdk.PrivateKey.FromString(System.String)
  id: FromString(System.String)
  parent: AlgoSdk.PrivateKey
  langs:
  - csharp
  - vb
  name: FromString(String)
  nameWithType: PrivateKey.FromString(String)
  fullName: AlgoSdk.PrivateKey.FromString(System.String)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/PrivateKey.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: FromString
    path: ../CareBoo.AlgoSdk/PrivateKey.cs
    startLine: 75
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static PrivateKey FromString(string keyString)
    parameters:
    - id: keyString
      type: System.String
    return:
      type: AlgoSdk.PrivateKey
    content.vb: Public Shared Function FromString(keyString As String) As PrivateKey
  overload: AlgoSdk.PrivateKey.FromString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AlgoSdk
  commentId: N:AlgoSdk
  name: AlgoSdk
  nameWithType: AlgoSdk
  fullName: AlgoSdk
- uid: System.IEquatable{AlgoSdk.PrivateKey}
  commentId: T:System.IEquatable{AlgoSdk.PrivateKey}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<PrivateKey>
  nameWithType: IEquatable<PrivateKey>
  fullName: System.IEquatable<AlgoSdk.PrivateKey>
  nameWithType.vb: IEquatable(Of PrivateKey)
  fullName.vb: System.IEquatable(Of AlgoSdk.PrivateKey)
  name.vb: IEquatable(Of PrivateKey)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AlgoSdk.PrivateKey
    name: PrivateKey
    nameWithType: PrivateKey
    fullName: AlgoSdk.PrivateKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AlgoSdk.PrivateKey
    name: PrivateKey
    nameWithType: PrivateKey
    fullName: AlgoSdk.PrivateKey
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.LowLevel.IByteArray
  commentId: T:AlgoSdk.LowLevel.IByteArray
  parent: AlgoSdk.LowLevel
  name: IByteArray
  nameWithType: IByteArray
  fullName: AlgoSdk.LowLevel.IByteArray
- uid: AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  commentId: T:AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  parent: AlgoSdk.LowLevel
  definition: AlgoSdk.LowLevel.IContiguousArray`1
  name: IContiguousArray<Byte>
  nameWithType: IContiguousArray<Byte>
  fullName: AlgoSdk.LowLevel.IContiguousArray<System.Byte>
  nameWithType.vb: IContiguousArray(Of Byte)
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of System.Byte)
  name.vb: IContiguousArray(Of Byte)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.LowLevel.IArray{System.Byte}
  commentId: T:AlgoSdk.LowLevel.IArray{System.Byte}
  parent: AlgoSdk.LowLevel
  definition: AlgoSdk.LowLevel.IArray`1
  name: IArray<Byte>
  nameWithType: IArray<Byte>
  fullName: AlgoSdk.LowLevel.IArray<System.Byte>
  nameWithType.vb: IArray(Of Byte)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of System.Byte)
  name.vb: IArray(Of Byte)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.PrivateKey.AlgoSdk.Base64Encoding.CopyToBase64``2({T}@)
  commentId: M:AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  parent: AlgoSdk.Base64Encoding
  definition: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  name: CopyToBase64<PrivateKey, T>(T)
  nameWithType: Base64Encoding.CopyToBase64<PrivateKey, T>(T)
  fullName: AlgoSdk.Base64Encoding.CopyToBase64<AlgoSdk.PrivateKey, T>(T)
  nameWithType.vb: Base64Encoding.CopyToBase64(Of PrivateKey, T)(T)
  fullName.vb: AlgoSdk.Base64Encoding.CopyToBase64(Of AlgoSdk.PrivateKey, T)(T)
  name.vb: CopyToBase64(Of PrivateKey, T)(T)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``1@)
    name: CopyToBase64<PrivateKey, T>
    nameWithType: Base64Encoding.CopyToBase64<PrivateKey, T>
    fullName: AlgoSdk.Base64Encoding.CopyToBase64<AlgoSdk.PrivateKey, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``1@)
    name: CopyToBase64(Of PrivateKey, T)
    nameWithType: Base64Encoding.CopyToBase64(Of PrivateKey, T)
    fullName: AlgoSdk.Base64Encoding.CopyToBase64(Of AlgoSdk.PrivateKey, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.PrivateKey.AlgoSdk.Base64Encoding.CopyFromBase64``2({T}@,System.Int32)
  commentId: M:AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  parent: AlgoSdk.Base64Encoding
  definition: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  name: CopyFromBase64<PrivateKey, T>(T, Int32)
  nameWithType: Base64Encoding.CopyFromBase64<PrivateKey, T>(T, Int32)
  fullName: AlgoSdk.Base64Encoding.CopyFromBase64<AlgoSdk.PrivateKey, T>(T, System.Int32)
  nameWithType.vb: Base64Encoding.CopyFromBase64(Of PrivateKey, T)(T, Int32)
  fullName.vb: AlgoSdk.Base64Encoding.CopyFromBase64(Of AlgoSdk.PrivateKey, T)(T, System.Int32)
  name.vb: CopyFromBase64(Of PrivateKey, T)(T, Int32)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``1@,System.Int32)
    name: CopyFromBase64<PrivateKey, T>
    nameWithType: Base64Encoding.CopyFromBase64<PrivateKey, T>
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64<AlgoSdk.PrivateKey, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``1@,System.Int32)
    name: CopyFromBase64(Of PrivateKey, T)
    nameWithType: Base64Encoding.CopyFromBase64(Of PrivateKey, T)
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64(Of AlgoSdk.PrivateKey, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AlgoSdk.LowLevel
  commentId: N:AlgoSdk.LowLevel
  name: AlgoSdk.LowLevel
  nameWithType: AlgoSdk.LowLevel
  fullName: AlgoSdk.LowLevel
- uid: AlgoSdk.LowLevel.IContiguousArray`1
  commentId: T:AlgoSdk.LowLevel.IContiguousArray`1
  name: IContiguousArray<T>
  nameWithType: IContiguousArray<T>
  fullName: AlgoSdk.LowLevel.IContiguousArray<T>
  nameWithType.vb: IContiguousArray(Of T)
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of T)
  name.vb: IContiguousArray(Of T)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.LowLevel.IArray`1
  commentId: T:AlgoSdk.LowLevel.IArray`1
  name: IArray<T>
  nameWithType: IArray<T>
  fullName: AlgoSdk.LowLevel.IArray<T>
  nameWithType.vb: IArray(Of T)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of T)
  name.vb: IArray(Of T)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  commentId: M:AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  name: CopyToBase64<TBytes, T>(TBytes, T)
  nameWithType: Base64Encoding.CopyToBase64<TBytes, T>(TBytes, T)
  fullName: AlgoSdk.Base64Encoding.CopyToBase64<TBytes, T>(TBytes, T)
  nameWithType.vb: Base64Encoding.CopyToBase64(Of TBytes, T)(TBytes, T)
  fullName.vb: AlgoSdk.Base64Encoding.CopyToBase64(Of TBytes, T)(TBytes, T)
  name.vb: CopyToBase64(Of TBytes, T)(TBytes, T)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
    name: CopyToBase64<TBytes, T>
    nameWithType: Base64Encoding.CopyToBase64<TBytes, T>
    fullName: AlgoSdk.Base64Encoding.CopyToBase64<TBytes, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TBytes
    nameWithType: TBytes
    fullName: TBytes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
    name: CopyToBase64(Of TBytes, T)
    nameWithType: Base64Encoding.CopyToBase64(Of TBytes, T)
    fullName: AlgoSdk.Base64Encoding.CopyToBase64(Of TBytes, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TBytes
    nameWithType: TBytes
    fullName: TBytes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Base64Encoding
  commentId: T:AlgoSdk.Base64Encoding
  parent: AlgoSdk
  name: Base64Encoding
  nameWithType: Base64Encoding
  fullName: AlgoSdk.Base64Encoding
- uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  commentId: M:AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  isExternal: true
  name: CopyFromBase64<TByteArray, T>(TByteArray, T, Int32)
  nameWithType: Base64Encoding.CopyFromBase64<TByteArray, T>(TByteArray, T, Int32)
  fullName: AlgoSdk.Base64Encoding.CopyFromBase64<TByteArray, T>(TByteArray, T, System.Int32)
  nameWithType.vb: Base64Encoding.CopyFromBase64(Of TByteArray, T)(TByteArray, T, Int32)
  fullName.vb: AlgoSdk.Base64Encoding.CopyFromBase64(Of TByteArray, T)(TByteArray, T, System.Int32)
  name.vb: CopyFromBase64(Of TByteArray, T)(TByteArray, T, Int32)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
    name: CopyFromBase64<TByteArray, T>
    nameWithType: Base64Encoding.CopyFromBase64<TByteArray, T>
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64<TByteArray, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TByteArray
    nameWithType: TByteArray
    fullName: TByteArray
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
    name: CopyFromBase64(Of TByteArray, T)
    nameWithType: Base64Encoding.CopyFromBase64(Of TByteArray, T)
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64(Of TByteArray, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TByteArray
    nameWithType: TByteArray
    fullName: TByteArray
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.PrivateKey.GetUnsafePtr*
  commentId: Overload:AlgoSdk.PrivateKey.GetUnsafePtr
  name: GetUnsafePtr
  nameWithType: PrivateKey.GetUnsafePtr
  fullName: AlgoSdk.PrivateKey.GetUnsafePtr
- uid: AlgoSdk.LowLevel.IContiguousArray{System.Byte}.GetUnsafePtr
  commentId: M:AlgoSdk.LowLevel.IContiguousArray{System.Byte}.GetUnsafePtr
  parent: AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  definition: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
  name: GetUnsafePtr()
  nameWithType: IContiguousArray<Byte>.GetUnsafePtr()
  fullName: AlgoSdk.LowLevel.IContiguousArray<System.Byte>.GetUnsafePtr()
  nameWithType.vb: IContiguousArray(Of Byte).GetUnsafePtr()
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of System.Byte).GetUnsafePtr()
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray<Byte>.GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray<System.Byte>.GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray(Of Byte).GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray(Of System.Byte).GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Void*
  isExternal: true
  name: Void*
  nameWithType: Void*
  fullName: System.Void*
  spec.csharp:
  - uid: System.Void
    name: Void
    nameWithType: Void
    fullName: System.Void
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    nameWithType: Void
    fullName: System.Void
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
  commentId: M:AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
  name: GetUnsafePtr()
  nameWithType: IContiguousArray<T>.GetUnsafePtr()
  fullName: AlgoSdk.LowLevel.IContiguousArray<T>.GetUnsafePtr()
  nameWithType.vb: IContiguousArray(Of T).GetUnsafePtr()
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of T).GetUnsafePtr()
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray<T>.GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray<T>.GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray(Of T).GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray(Of T).GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.PrivateKey.Length*
  commentId: Overload:AlgoSdk.PrivateKey.Length
  name: Length
  nameWithType: PrivateKey.Length
  fullName: AlgoSdk.PrivateKey.Length
- uid: AlgoSdk.LowLevel.IArray{System.Byte}.Length
  commentId: P:AlgoSdk.LowLevel.IArray{System.Byte}.Length
  parent: AlgoSdk.LowLevel.IArray{System.Byte}
  definition: AlgoSdk.LowLevel.IArray`1.Length
  name: Length
  nameWithType: IArray<Byte>.Length
  fullName: AlgoSdk.LowLevel.IArray<System.Byte>.Length
  nameWithType.vb: IArray(Of Byte).Length
  fullName.vb: AlgoSdk.LowLevel.IArray(Of System.Byte).Length
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AlgoSdk.LowLevel.IArray`1.Length
  commentId: P:AlgoSdk.LowLevel.IArray`1.Length
  name: Length
  nameWithType: IArray<T>.Length
  fullName: AlgoSdk.LowLevel.IArray<T>.Length
  nameWithType.vb: IArray(Of T).Length
  fullName.vb: AlgoSdk.LowLevel.IArray(Of T).Length
- uid: AlgoSdk.PrivateKey.Item*
  commentId: Overload:AlgoSdk.PrivateKey.Item
  name: Item
  nameWithType: PrivateKey.Item
  fullName: AlgoSdk.PrivateKey.Item
- uid: AlgoSdk.LowLevel.IArray{System.Byte}.Item(System.Int32)
  commentId: P:AlgoSdk.LowLevel.IArray{System.Byte}.Item(System.Int32)
  parent: AlgoSdk.LowLevel.IArray{System.Byte}
  definition: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IArray<Byte>.Item[Int32]
  fullName: AlgoSdk.LowLevel.IArray<System.Byte>.Item[System.Int32]
  nameWithType.vb: IArray(Of Byte).Item(Int32)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of System.Byte).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray<Byte>.Item
    fullName: AlgoSdk.LowLevel.IArray<System.Byte>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray(Of Byte).Item
    fullName: AlgoSdk.LowLevel.IArray(Of System.Byte).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
  commentId: P:AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IArray<T>.Item[Int32]
  fullName: AlgoSdk.LowLevel.IArray<T>.Item[System.Int32]
  nameWithType.vb: IArray(Of T).Item(Int32)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray<T>.Item
    fullName: AlgoSdk.LowLevel.IArray<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray(Of T).Item
    fullName: AlgoSdk.LowLevel.IArray(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.PrivateKey.ToMnemonic*
  commentId: Overload:AlgoSdk.PrivateKey.ToMnemonic
  name: ToMnemonic
  nameWithType: PrivateKey.ToMnemonic
  fullName: AlgoSdk.PrivateKey.ToMnemonic
- uid: AlgoSdk.Mnemonic
  commentId: T:AlgoSdk.Mnemonic
  parent: AlgoSdk
  name: Mnemonic
  nameWithType: Mnemonic
  fullName: AlgoSdk.Mnemonic
- uid: AlgoSdk.PrivateKey.ToKeyPair*
  commentId: Overload:AlgoSdk.PrivateKey.ToKeyPair
  name: ToKeyPair
  nameWithType: PrivateKey.ToKeyPair
  fullName: AlgoSdk.PrivateKey.ToKeyPair
- uid: AlgoSdk.Crypto.Ed25519.KeyPair
  commentId: T:AlgoSdk.Crypto.Ed25519.KeyPair
  parent: AlgoSdk.Crypto
  name: Ed25519.KeyPair
  nameWithType: Ed25519.KeyPair
  fullName: AlgoSdk.Crypto.Ed25519.KeyPair
- uid: AlgoSdk.Crypto
  commentId: N:AlgoSdk.Crypto
  name: AlgoSdk.Crypto
  nameWithType: AlgoSdk.Crypto
  fullName: AlgoSdk.Crypto
- uid: AlgoSdk.PrivateKey.ToPublicKey*
  commentId: Overload:AlgoSdk.PrivateKey.ToPublicKey
  name: ToPublicKey
  nameWithType: PrivateKey.ToPublicKey
  fullName: AlgoSdk.PrivateKey.ToPublicKey
- uid: AlgoSdk.Crypto.Ed25519.PublicKey
  commentId: T:AlgoSdk.Crypto.Ed25519.PublicKey
  parent: AlgoSdk.Crypto
  name: Ed25519.PublicKey
  nameWithType: Ed25519.PublicKey
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey
- uid: AlgoSdk.PrivateKey.ToAddress*
  commentId: Overload:AlgoSdk.PrivateKey.ToAddress
  name: ToAddress
  nameWithType: PrivateKey.ToAddress
  fullName: AlgoSdk.PrivateKey.ToAddress
- uid: AlgoSdk.Address
  commentId: T:AlgoSdk.Address
  parent: AlgoSdk
  name: Address
  nameWithType: Address
  fullName: AlgoSdk.Address
- uid: AlgoSdk.PrivateKey.Equals*
  commentId: Overload:AlgoSdk.PrivateKey.Equals
  name: Equals
  nameWithType: PrivateKey.Equals
  fullName: AlgoSdk.PrivateKey.Equals
- uid: System.IEquatable{AlgoSdk.PrivateKey}.Equals(AlgoSdk.PrivateKey)
  commentId: M:System.IEquatable{AlgoSdk.PrivateKey}.Equals(AlgoSdk.PrivateKey)
  parent: System.IEquatable{AlgoSdk.PrivateKey}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(PrivateKey)
  nameWithType: IEquatable<PrivateKey>.Equals(PrivateKey)
  fullName: System.IEquatable<AlgoSdk.PrivateKey>.Equals(AlgoSdk.PrivateKey)
  nameWithType.vb: IEquatable(Of PrivateKey).Equals(PrivateKey)
  fullName.vb: System.IEquatable(Of AlgoSdk.PrivateKey).Equals(AlgoSdk.PrivateKey)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<PrivateKey>.Equals
    fullName: System.IEquatable<AlgoSdk.PrivateKey>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.PrivateKey
    name: PrivateKey
    nameWithType: PrivateKey
    fullName: AlgoSdk.PrivateKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of PrivateKey).Equals
    fullName: System.IEquatable(Of AlgoSdk.PrivateKey).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.PrivateKey
    name: PrivateKey
    nameWithType: PrivateKey
    fullName: AlgoSdk.PrivateKey
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.PrivateKey
  commentId: T:AlgoSdk.PrivateKey
  parent: AlgoSdk
  name: PrivateKey
  nameWithType: PrivateKey
  fullName: AlgoSdk.PrivateKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.PrivateKey.ToString*
  commentId: Overload:AlgoSdk.PrivateKey.ToString
  name: ToString
  nameWithType: PrivateKey.ToString
  fullName: AlgoSdk.PrivateKey.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AlgoSdk.PrivateKey.FromString*
  commentId: Overload:AlgoSdk.PrivateKey.FromString
  name: FromString
  nameWithType: PrivateKey.FromString
  fullName: AlgoSdk.PrivateKey.FromString
