### YamlMime:ManagedReference
items:
- uid: AlgoSdk.Account
  commentId: T:AlgoSdk.Account
  id: Account
  parent: AlgoSdk
  children:
  - AlgoSdk.Account.Address
  - AlgoSdk.Account.Amount
  - AlgoSdk.Account.AmountWithoutPendingRewards
  - AlgoSdk.Account.ApplicationsLocalState
  - AlgoSdk.Account.ApplicationsTotalExtraPages
  - AlgoSdk.Account.ApplicationsTotalSchema
  - AlgoSdk.Account.Assets
  - AlgoSdk.Account.AuthAddress
  - AlgoSdk.Account.ClosedAtRound
  - AlgoSdk.Account.CreatedApplications
  - AlgoSdk.Account.CreatedAssets
  - AlgoSdk.Account.CreatedAtRound
  - AlgoSdk.Account.Deleted
  - AlgoSdk.Account.Equals(AlgoSdk.Account)
  - AlgoSdk.Account.Participation
  - AlgoSdk.Account.PendingRewards
  - AlgoSdk.Account.RewardBase
  - AlgoSdk.Account.Rewards
  - AlgoSdk.Account.Round
  - AlgoSdk.Account.SignatureType
  - AlgoSdk.Account.Status
  langs:
  - csharp
  - vb
  name: Account
  nameWithType: Account
  fullName: AlgoSdk.Account
  type: Struct
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Account
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 8
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nInformation regarding an Algorand account at a given round.\n"
  example: []
  syntax:
    content: 'public struct Account : IEquatable<Account>'
    content.vb: >-
      Public Structure Account
          Implements IEquatable(Of Account)
  implements:
  - System.IEquatable{AlgoSdk.Account}
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: AlgoSdk.Account.Address
  commentId: F:AlgoSdk.Account.Address
  id: Address
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: Account.Address
  fullName: AlgoSdk.Account.Address
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Address
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 16
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nThe public key of the account.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("address", null, false)]

      public Address Address
    return:
      type: AlgoSdk.Address
    content.vb: >-
      <AlgoApiField("address", Nothing, False)>

      Public Address As Address
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: address
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.Amount
  commentId: F:AlgoSdk.Account.Amount
  id: Amount
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: Amount
  nameWithType: Account.Amount
  fullName: AlgoSdk.Account.Amount
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Amount
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 22
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nThe amount of microalgos belonging to this account including pending rewards.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("amount", null, false)]

      public ulong Amount
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("amount", Nothing, False)>

      Public Amount As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: amount
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.AmountWithoutPendingRewards
  commentId: F:AlgoSdk.Account.AmountWithoutPendingRewards
  id: AmountWithoutPendingRewards
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: AmountWithoutPendingRewards
  nameWithType: Account.AmountWithoutPendingRewards
  fullName: AlgoSdk.Account.AmountWithoutPendingRewards
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: AmountWithoutPendingRewards
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 28
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nThe amount of microalgos belonging to this account not including pending rewards.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("amount-without-pending-rewards", null, false)]

      public ulong AmountWithoutPendingRewards
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("amount-without-pending-rewards", Nothing, False)>

      Public AmountWithoutPendingRewards As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: amount-without-pending-rewards
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.ApplicationsLocalState
  commentId: F:AlgoSdk.Account.ApplicationsLocalState
  id: ApplicationsLocalState
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: ApplicationsLocalState
  nameWithType: Account.ApplicationsLocalState
  fullName: AlgoSdk.Account.ApplicationsLocalState
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ApplicationsLocalState
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 34
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nLocal application data stored in this account.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("apps-local-state", null, false)]

      public ApplicationLocalState[] ApplicationsLocalState
    return:
      type: AlgoSdk.ApplicationLocalState[]
    content.vb: >-
      <AlgoApiField("apps-local-state", Nothing, False)>

      Public ApplicationsLocalState As ApplicationLocalState()
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: apps-local-state
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.ApplicationsTotalExtraPages
  commentId: F:AlgoSdk.Account.ApplicationsTotalExtraPages
  id: ApplicationsTotalExtraPages
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: ApplicationsTotalExtraPages
  nameWithType: Account.ApplicationsTotalExtraPages
  fullName: AlgoSdk.Account.ApplicationsTotalExtraPages
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ApplicationsTotalExtraPages
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 40
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nThe total number of extra program pages for this account.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("apps-total-extra-pages", null, false)]

      public ulong ApplicationsTotalExtraPages
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("apps-total-extra-pages", Nothing, False)>

      Public ApplicationsTotalExtraPages As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: apps-total-extra-pages
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.ApplicationsTotalSchema
  commentId: F:AlgoSdk.Account.ApplicationsTotalSchema
  id: ApplicationsTotalSchema
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: ApplicationsTotalSchema
  nameWithType: Account.ApplicationsTotalSchema
  fullName: AlgoSdk.Account.ApplicationsTotalSchema
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ApplicationsTotalSchema
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 46
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nThe sum of all local and global schemas in this account.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("apps-total-schema", null, false)]

      public StateSchema ApplicationsTotalSchema
    return:
      type: AlgoSdk.StateSchema
    content.vb: >-
      <AlgoApiField("apps-total-schema", Nothing, False)>

      Public ApplicationsTotalSchema As StateSchema
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: apps-total-schema
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.Assets
  commentId: F:AlgoSdk.Account.Assets
  id: Assets
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: Assets
  nameWithType: Account.Assets
  fullName: AlgoSdk.Account.Assets
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Assets
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 52
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nAssets held by this account.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("assets", null, false)]

      public AssetHolding[] Assets
    return:
      type: AlgoSdk.AssetHolding[]
    content.vb: >-
      <AlgoApiField("assets", Nothing, False)>

      Public Assets As AssetHolding()
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: assets
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.AuthAddress
  commentId: F:AlgoSdk.Account.AuthAddress
  id: AuthAddress
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: AuthAddress
  nameWithType: Account.AuthAddress
  fullName: AlgoSdk.Account.AuthAddress
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: AuthAddress
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 60
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nThe address against which signing should be checked.\nIf empty, the address of the current account is used.\nThis field can be updated in any transaction by setting the RekeyTo field.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("auth-addr", null, false)]

      public Address AuthAddress
    return:
      type: AlgoSdk.Address
    content.vb: >-
      <AlgoApiField("auth-addr", Nothing, False)>

      Public AuthAddress As Address
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: auth-addr
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.ClosedAtRound
  commentId: F:AlgoSdk.Account.ClosedAtRound
  id: ClosedAtRound
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: ClosedAtRound
  nameWithType: Account.ClosedAtRound
  fullName: AlgoSdk.Account.ClosedAtRound
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ClosedAtRound
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 66
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\n\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("closed-at-round", null, true)]

      public ulong ClosedAtRound
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("closed-at-round", Nothing, True)>

      Public ClosedAtRound As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: closed-at-round
    - type: System.String
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.CreatedApplications
  commentId: F:AlgoSdk.Account.CreatedApplications
  id: CreatedApplications
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: CreatedApplications
  nameWithType: Account.CreatedApplications
  fullName: AlgoSdk.Account.CreatedApplications
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CreatedApplications
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 72
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nParameters of applications created by this account including app global data.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("created-apps", null, false)]

      public Application[] CreatedApplications
    return:
      type: AlgoSdk.Application[]
    content.vb: >-
      <AlgoApiField("created-apps", Nothing, False)>

      Public CreatedApplications As Application()
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: created-apps
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.CreatedAssets
  commentId: F:AlgoSdk.Account.CreatedAssets
  id: CreatedAssets
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: CreatedAssets
  nameWithType: Account.CreatedAssets
  fullName: AlgoSdk.Account.CreatedAssets
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CreatedAssets
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 78
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nParameters of assets created by this account.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("created-assets", null, false)]

      public Asset[] CreatedAssets
    return:
      type: AlgoSdk.Asset[]
    content.vb: >-
      <AlgoApiField("created-assets", Nothing, False)>

      Public CreatedAssets As Asset()
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: created-assets
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.CreatedAtRound
  commentId: F:AlgoSdk.Account.CreatedAtRound
  id: CreatedAtRound
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: CreatedAtRound
  nameWithType: Account.CreatedAtRound
  fullName: AlgoSdk.Account.CreatedAtRound
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CreatedAtRound
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 81
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("created-at-round", null, true)]

      public ulong CreatedAtRound
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("created-at-round", Nothing, True)>

      Public CreatedAtRound As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: created-at-round
    - type: System.String
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.Deleted
  commentId: F:AlgoSdk.Account.Deleted
  id: Deleted
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: Deleted
  nameWithType: Account.Deleted
  fullName: AlgoSdk.Account.Deleted
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Deleted
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 84
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("deleted", null, true)]

      public Optional<bool> Deleted
    return:
      type: AlgoSdk.Optional{System.Boolean}
    content.vb: "<AlgoApiField(\"deleted\", Nothing, True)>\nPublic Deleted As "
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: deleted
    - type: System.String
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.Participation
  commentId: F:AlgoSdk.Account.Participation
  id: Participation
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: Participation
  nameWithType: Account.Participation
  fullName: AlgoSdk.Account.Participation
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Participation
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 87
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("participation", null, false)]

      public AccountParticipation Participation
    return:
      type: AlgoSdk.AccountParticipation
    content.vb: >-
      <AlgoApiField("participation", Nothing, False)>

      Public Participation As AccountParticipation
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: participation
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.PendingRewards
  commentId: F:AlgoSdk.Account.PendingRewards
  id: PendingRewards
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: PendingRewards
  nameWithType: Account.PendingRewards
  fullName: AlgoSdk.Account.PendingRewards
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: PendingRewards
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 93
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nAmount of MicroAlgos of pending rewards in this account.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("pending-rewards", null, false)]

      public ulong PendingRewards
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("pending-rewards", Nothing, False)>

      Public PendingRewards As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: pending-rewards
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.RewardBase
  commentId: F:AlgoSdk.Account.RewardBase
  id: RewardBase
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: RewardBase
  nameWithType: Account.RewardBase
  fullName: AlgoSdk.Account.RewardBase
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: RewardBase
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 99
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nUsed as part of the rewards computation. Only applicable to accounts which are participating.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("reward-base", null, false)]

      public ulong RewardBase
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("reward-base", Nothing, False)>

      Public RewardBase As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: reward-base
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.Rewards
  commentId: F:AlgoSdk.Account.Rewards
  id: Rewards
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: Rewards
  nameWithType: Account.Rewards
  fullName: AlgoSdk.Account.Rewards
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Rewards
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 105
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nTotal rewards of MicroAlgos the account has received, including pending rewards.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("rewards", null, false)]

      public ulong Rewards
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("rewards", Nothing, False)>

      Public Rewards As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: rewards
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.Round
  commentId: F:AlgoSdk.Account.Round
  id: Round
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: Round
  nameWithType: Account.Round
  fullName: AlgoSdk.Account.Round
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Round
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 111
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nThe round for which this information is relevant.\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("round", null, false)]

      public ulong Round
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("round", Nothing, False)>

      Public Round As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: round
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.SignatureType
  commentId: F:AlgoSdk.Account.SignatureType
  id: SignatureType
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: SignatureType
  nameWithType: Account.SignatureType
  fullName: AlgoSdk.Account.SignatureType
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: SignatureType
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 122
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nIndicates what type of signature is used by this account, must be one of:\n<ul><li></li><li></li><li></li></ul>\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("sig-type", null, false)]

      public SignatureType SignatureType
    return:
      type: AlgoSdk.SignatureType
    content.vb: >-
      <AlgoApiField("sig-type", Nothing, False)>

      Public SignatureType As SignatureType
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: sig-type
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.Status
  commentId: F:AlgoSdk.Account.Status
  id: Status
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: Account.Status
  fullName: AlgoSdk.Account.Status
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Status
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 142
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nDelegation status of the account&apos;s MicroAlgos\n<table><tbody><tr><td>Offline</td><td>indicates that the associated account is delegated.</td></tr><tr><td>Online</td><td>indicates that the associated account used as part of the delegation pool.</td></tr><tr><td>NotParticipating</td><td>indicates that the associated account is neither a delegator nor a delegate.</td></tr></tbody></table>\n"
  example: []
  syntax:
    content: >-
      [AlgoApiField("status", null, false)]

      public FixedString32Bytes Status
    return:
      type: Unity.Collections.FixedString32Bytes
    content.vb: >-
      <AlgoApiField("status", Nothing, False)>

      Public Status As FixedString32Bytes
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: status
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Account.Equals(AlgoSdk.Account)
  commentId: M:AlgoSdk.Account.Equals(AlgoSdk.Account)
  id: Equals(AlgoSdk.Account)
  parent: AlgoSdk.Account
  langs:
  - csharp
  - vb
  name: Equals(Account)
  nameWithType: Account.Equals(Account)
  fullName: AlgoSdk.Account.Equals(AlgoSdk.Account)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Account.cs
    startLine: 144
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public bool Equals(Account other)
    parameters:
    - id: other
      type: AlgoSdk.Account
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Account) As Boolean
  overload: AlgoSdk.Account.Equals*
  implements:
  - System.IEquatable{AlgoSdk.Account}.Equals(AlgoSdk.Account)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AlgoSdk
  commentId: N:AlgoSdk
  name: AlgoSdk
  nameWithType: AlgoSdk
  fullName: AlgoSdk
- uid: System.IEquatable{AlgoSdk.Account}
  commentId: T:System.IEquatable{AlgoSdk.Account}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Account>
  nameWithType: IEquatable<Account>
  fullName: System.IEquatable<AlgoSdk.Account>
  nameWithType.vb: IEquatable(Of Account)
  fullName.vb: System.IEquatable(Of AlgoSdk.Account)
  name.vb: IEquatable(Of Account)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AlgoSdk.Account
    name: Account
    nameWithType: Account
    fullName: AlgoSdk.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AlgoSdk.Account
    name: Account
    nameWithType: Account
    fullName: AlgoSdk.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AlgoSdk.Address
  commentId: T:AlgoSdk.Address
  parent: AlgoSdk
  name: Address
  nameWithType: Address
  fullName: AlgoSdk.Address
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: AlgoSdk.ApplicationLocalState[]
  isExternal: true
  name: ApplicationLocalState[]
  nameWithType: ApplicationLocalState[]
  fullName: AlgoSdk.ApplicationLocalState[]
  nameWithType.vb: ApplicationLocalState()
  fullName.vb: AlgoSdk.ApplicationLocalState()
  name.vb: ApplicationLocalState()
  spec.csharp:
  - uid: AlgoSdk.ApplicationLocalState
    name: ApplicationLocalState
    nameWithType: ApplicationLocalState
    fullName: AlgoSdk.ApplicationLocalState
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AlgoSdk.ApplicationLocalState
    name: ApplicationLocalState
    nameWithType: ApplicationLocalState
    fullName: AlgoSdk.ApplicationLocalState
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AlgoSdk.StateSchema
  commentId: T:AlgoSdk.StateSchema
  parent: AlgoSdk
  name: StateSchema
  nameWithType: StateSchema
  fullName: AlgoSdk.StateSchema
- uid: AlgoSdk.AssetHolding[]
  isExternal: true
  name: AssetHolding[]
  nameWithType: AssetHolding[]
  fullName: AlgoSdk.AssetHolding[]
  nameWithType.vb: AssetHolding()
  fullName.vb: AlgoSdk.AssetHolding()
  name.vb: AssetHolding()
  spec.csharp:
  - uid: AlgoSdk.AssetHolding
    name: AssetHolding
    nameWithType: AssetHolding
    fullName: AlgoSdk.AssetHolding
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AlgoSdk.AssetHolding
    name: AssetHolding
    nameWithType: AssetHolding
    fullName: AlgoSdk.AssetHolding
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AlgoSdk.Application[]
  isExternal: true
  name: Application[]
  nameWithType: Application[]
  fullName: AlgoSdk.Application[]
  nameWithType.vb: Application()
  fullName.vb: AlgoSdk.Application()
  name.vb: Application()
  spec.csharp:
  - uid: AlgoSdk.Application
    name: Application
    nameWithType: Application
    fullName: AlgoSdk.Application
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AlgoSdk.Application
    name: Application
    nameWithType: Application
    fullName: AlgoSdk.Application
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AlgoSdk.Asset[]
  isExternal: true
  name: Asset[]
  nameWithType: Asset[]
  fullName: AlgoSdk.Asset[]
  nameWithType.vb: Asset()
  fullName.vb: AlgoSdk.Asset()
  name.vb: Asset()
  spec.csharp:
  - uid: AlgoSdk.Asset
    name: Asset
    nameWithType: Asset
    fullName: AlgoSdk.Asset
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AlgoSdk.Asset
    name: Asset
    nameWithType: Asset
    fullName: AlgoSdk.Asset
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AlgoSdk.Optional{System.Boolean}
  commentId: T:AlgoSdk.Optional{System.Boolean}
  parent: AlgoSdk
  definition: AlgoSdk.Optional`1
  name: Optional<Boolean>
  nameWithType: Optional<Boolean>
  fullName: AlgoSdk.Optional<System.Boolean>
  nameWithType.vb: Optional(Of Boolean)
  fullName.vb: AlgoSdk.Optional(Of System.Boolean)
  name.vb: Optional(Of Boolean)
  spec.csharp:
  - uid: AlgoSdk.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: AlgoSdk.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: AlgoSdk.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Optional`1
  commentId: T:AlgoSdk.Optional`1
  parent: AlgoSdk
  name: Optional<T>
  nameWithType: Optional<T>
  fullName: AlgoSdk.Optional<T>
  nameWithType.vb: Optional(Of T)
  fullName.vb: AlgoSdk.Optional(Of T)
  name.vb: Optional(Of T)
  spec.csharp:
  - uid: AlgoSdk.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: AlgoSdk.Optional
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: AlgoSdk.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.AccountParticipation
  commentId: T:AlgoSdk.AccountParticipation
  parent: AlgoSdk
  name: AccountParticipation
  nameWithType: AccountParticipation
  fullName: AlgoSdk.AccountParticipation
- uid: AlgoSdk.SignatureType
  commentId: T:AlgoSdk.SignatureType
  parent: AlgoSdk
  name: SignatureType
  nameWithType: SignatureType
  fullName: AlgoSdk.SignatureType
- uid: Unity.Collections.FixedString32Bytes
  commentId: T:Unity.Collections.FixedString32Bytes
  parent: Unity.Collections
  name: FixedString32Bytes
  nameWithType: FixedString32Bytes
  fullName: Unity.Collections.FixedString32Bytes
- uid: Unity.Collections
  commentId: N:Unity.Collections
  name: Unity.Collections
  nameWithType: Unity.Collections
  fullName: Unity.Collections
- uid: AlgoSdk.Account.Equals*
  commentId: Overload:AlgoSdk.Account.Equals
  name: Equals
  nameWithType: Account.Equals
  fullName: AlgoSdk.Account.Equals
- uid: System.IEquatable{AlgoSdk.Account}.Equals(AlgoSdk.Account)
  commentId: M:System.IEquatable{AlgoSdk.Account}.Equals(AlgoSdk.Account)
  parent: System.IEquatable{AlgoSdk.Account}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Account)
  nameWithType: IEquatable<Account>.Equals(Account)
  fullName: System.IEquatable<AlgoSdk.Account>.Equals(AlgoSdk.Account)
  nameWithType.vb: IEquatable(Of Account).Equals(Account)
  fullName.vb: System.IEquatable(Of AlgoSdk.Account).Equals(AlgoSdk.Account)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Account>.Equals
    fullName: System.IEquatable<AlgoSdk.Account>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.Account
    name: Account
    nameWithType: Account
    fullName: AlgoSdk.Account
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Account).Equals
    fullName: System.IEquatable(Of AlgoSdk.Account).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.Account
    name: Account
    nameWithType: Account
    fullName: AlgoSdk.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Account
  commentId: T:AlgoSdk.Account
  parent: AlgoSdk
  name: Account
  nameWithType: Account
  fullName: AlgoSdk.Account
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
