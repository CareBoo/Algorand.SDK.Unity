### YamlMime:ManagedReference
items:
- uid: AlgoSdk.LowLevel.ByteArray
  commentId: T:AlgoSdk.LowLevel.ByteArray
  id: ByteArray
  parent: AlgoSdk.LowLevel
  children:
  - AlgoSdk.LowLevel.ByteArray.CheckElementAccess(System.Int32,System.Int32)
  - AlgoSdk.LowLevel.ByteArray.CopyFrom``1(``0@,System.Byte[],System.Int32,System.Int32)
  - AlgoSdk.LowLevel.ByteArray.CopyFrom``1(``0@,Unity.Collections.NativeArray{System.Byte},System.Int32,System.Int32)
  - AlgoSdk.LowLevel.ByteArray.CopyFrom``2(``0@,``1,System.Int32,System.Int32)
  - AlgoSdk.LowLevel.ByteArray.CopyTo``2(``0,``1@)
  - AlgoSdk.LowLevel.ByteArray.CopyTo``2(``0,``1@,System.Int32,System.Int32)
  - AlgoSdk.LowLevel.ByteArray.Equals``1(``0@,``0@)
  - AlgoSdk.LowLevel.ByteArray.Equals``1(``0@,System.Object)
  - AlgoSdk.LowLevel.ByteArray.EqualsOther``2(``0@,``1@)
  - AlgoSdk.LowLevel.ByteArray.GetByteAt``1(``0@,System.Int32)
  - AlgoSdk.LowLevel.ByteArray.GetHashCode``1(``0@)
  - AlgoSdk.LowLevel.ByteArray.ReadByteAt``1(``0@,System.Int32)
  - AlgoSdk.LowLevel.ByteArray.SetByteAt``1(``0@,System.Int32,System.Byte)
  - AlgoSdk.LowLevel.ByteArray.ToArray``1(``0@)
  langs:
  - csharp
  - vb
  name: ByteArray
  nameWithType: ByteArray
  fullName: AlgoSdk.LowLevel.ByteArray
  type: Class
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ByteArray
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 50
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: public static class ByteArray
    content.vb: Public Module ByteArray
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AlgoSdk.LowLevel.ByteArray.CheckElementAccess(System.Int32,System.Int32)
  commentId: M:AlgoSdk.LowLevel.ByteArray.CheckElementAccess(System.Int32,System.Int32)
  id: CheckElementAccess(System.Int32,System.Int32)
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: CheckElementAccess(Int32, Int32)
  nameWithType: ByteArray.CheckElementAccess(Int32, Int32)
  fullName: AlgoSdk.LowLevel.ByteArray.CheckElementAccess(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CheckElementAccess
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 52
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      [Conditional("ENABLE_UNITY_COLLECTIONS_CHECKS")]

      public static void CheckElementAccess(int index, int length)
    parameters:
    - id: index
      type: System.Int32
    - id: length
      type: System.Int32
    content.vb: >-
      <Conditional("ENABLE_UNITY_COLLECTIONS_CHECKS")>

      Public Shared Sub CheckElementAccess(index As Integer, length As Integer)
  overload: AlgoSdk.LowLevel.ByteArray.CheckElementAccess*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ENABLE_UNITY_COLLECTIONS_CHECKS
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AlgoSdk.LowLevel.ByteArray.GetByteAt``1(``0@,System.Int32)
  commentId: M:AlgoSdk.LowLevel.ByteArray.GetByteAt``1(``0@,System.Int32)
  id: GetByteAt``1(``0@,System.Int32)
  isExtensionMethod: true
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: GetByteAt<TByteArray>(ref TByteArray, Int32)
  nameWithType: ByteArray.GetByteAt<TByteArray>(ref TByteArray, Int32)
  fullName: AlgoSdk.LowLevel.ByteArray.GetByteAt<TByteArray>(ref TByteArray, System.Int32)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: GetByteAt
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 59
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static byte GetByteAt<TByteArray>(this ref TByteArray bytes, int index)
          where TByteArray : struct, IByteArray
    parameters:
    - id: bytes
      type: '{TByteArray}'
    - id: index
      type: System.Int32
    typeParameters:
    - id: TByteArray
    return:
      type: System.Byte
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetByteAt(Of TByteArray As {Structure, IByteArray})(ByRef bytes As TByteArray, index As Integer) As Byte
  overload: AlgoSdk.LowLevel.ByteArray.GetByteAt*
  nameWithType.vb: ByteArray.GetByteAt(Of TByteArray)(ByRef TByteArray, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.GetByteAt(Of TByteArray)(ByRef TByteArray, System.Int32)
  name.vb: GetByteAt(Of TByteArray)(ByRef TByteArray, Int32)
- uid: AlgoSdk.LowLevel.ByteArray.SetByteAt``1(``0@,System.Int32,System.Byte)
  commentId: M:AlgoSdk.LowLevel.ByteArray.SetByteAt``1(``0@,System.Int32,System.Byte)
  id: SetByteAt``1(``0@,System.Int32,System.Byte)
  isExtensionMethod: true
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: SetByteAt<TByteArray>(ref TByteArray, Int32, Byte)
  nameWithType: ByteArray.SetByteAt<TByteArray>(ref TByteArray, Int32, Byte)
  fullName: AlgoSdk.LowLevel.ByteArray.SetByteAt<TByteArray>(ref TByteArray, System.Int32, System.Byte)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: SetByteAt
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 69
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static void SetByteAt<TByteArray>(this ref TByteArray bytes, int index, byte value)
          where TByteArray : struct, IByteArray
    parameters:
    - id: bytes
      type: '{TByteArray}'
    - id: index
      type: System.Int32
    - id: value
      type: System.Byte
    typeParameters:
    - id: TByteArray
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetByteAt(Of TByteArray As {Structure, IByteArray})(ByRef bytes As TByteArray, index As Integer, value As Byte)
  overload: AlgoSdk.LowLevel.ByteArray.SetByteAt*
  nameWithType.vb: ByteArray.SetByteAt(Of TByteArray)(ByRef TByteArray, Int32, Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.SetByteAt(Of TByteArray)(ByRef TByteArray, System.Int32, System.Byte)
  name.vb: SetByteAt(Of TByteArray)(ByRef TByteArray, Int32, Byte)
- uid: AlgoSdk.LowLevel.ByteArray.ReadByteAt``1(``0@,System.Int32)
  commentId: M:AlgoSdk.LowLevel.ByteArray.ReadByteAt``1(``0@,System.Int32)
  id: ReadByteAt``1(``0@,System.Int32)
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: ReadByteAt<TByteArray>(TByteArray, Int32)
  nameWithType: ByteArray.ReadByteAt<TByteArray>(TByteArray, Int32)
  fullName: AlgoSdk.LowLevel.ByteArray.ReadByteAt<TByteArray>(TByteArray, System.Int32)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ReadByteAt
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 79
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static byte ReadByteAt<TByteArray>(in TByteArray bytes, int index)
          where TByteArray : struct, IByteArray
    parameters:
    - id: bytes
      type: '{TByteArray}'
    - id: index
      type: System.Int32
    typeParameters:
    - id: TByteArray
    return:
      type: System.Byte
    content.vb: Public Shared Function ReadByteAt(Of TByteArray As {Structure, IByteArray})(ByRef bytes As TByteArray, index As Integer) As Byte
  overload: AlgoSdk.LowLevel.ByteArray.ReadByteAt*
  nameWithType.vb: ByteArray.ReadByteAt(Of TByteArray)(ByRef TByteArray, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.ReadByteAt(Of TByteArray)(ByRef TByteArray, System.Int32)
  name.vb: ReadByteAt(Of TByteArray)(ByRef TByteArray, Int32)
- uid: AlgoSdk.LowLevel.ByteArray.CopyFrom``2(``0@,``1,System.Int32,System.Int32)
  commentId: M:AlgoSdk.LowLevel.ByteArray.CopyFrom``2(``0@,``1,System.Int32,System.Int32)
  id: CopyFrom``2(``0@,``1,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: CopyFrom<T, U>(ref T, U, Int32, Int32)
  nameWithType: ByteArray.CopyFrom<T, U>(ref T, U, Int32, Int32)
  fullName: AlgoSdk.LowLevel.ByteArray.CopyFrom<T, U>(ref T, U, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CopyFrom
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 89
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static void CopyFrom<T, U>(this ref T target, U source, int start, int length = 2147483647)
          where T : struct, IByteArray where U : struct, IByteArray
    parameters:
    - id: target
      type: '{T}'
    - id: source
      type: '{U}'
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    - id: U
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CopyFrom(Of T As {Structure, IByteArray}, U As {Structure, IByteArray})(ByRef target As T, source As U, start As Integer, length As Integer = 2147483647)
  overload: AlgoSdk.LowLevel.ByteArray.CopyFrom*
  nameWithType.vb: ByteArray.CopyFrom(Of T, U)(ByRef T, U, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.CopyFrom(Of T, U)(ByRef T, U, System.Int32, System.Int32)
  name.vb: CopyFrom(Of T, U)(ByRef T, U, Int32, Int32)
- uid: AlgoSdk.LowLevel.ByteArray.CopyFrom``1(``0@,System.Byte[],System.Int32,System.Int32)
  commentId: M:AlgoSdk.LowLevel.ByteArray.CopyFrom``1(``0@,System.Byte[],System.Int32,System.Int32)
  id: CopyFrom``1(``0@,System.Byte[],System.Int32,System.Int32)
  isExtensionMethod: true
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: CopyFrom<T>(ref T, Byte[], Int32, Int32)
  nameWithType: ByteArray.CopyFrom<T>(ref T, Byte[], Int32, Int32)
  fullName: AlgoSdk.LowLevel.ByteArray.CopyFrom<T>(ref T, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CopyFrom
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 101
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static void CopyFrom<T>(this ref T target, byte[] source, int start, int length = 2147483647)
          where T : struct, IByteArray
    parameters:
    - id: target
      type: '{T}'
    - id: source
      type: System.Byte[]
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CopyFrom(Of T As {Structure, IByteArray})(ByRef target As T, source As Byte(), start As Integer, length As Integer = 2147483647)
  overload: AlgoSdk.LowLevel.ByteArray.CopyFrom*
  nameWithType.vb: ByteArray.CopyFrom(Of T)(ByRef T, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.CopyFrom(Of T)(ByRef T, System.Byte(), System.Int32, System.Int32)
  name.vb: CopyFrom(Of T)(ByRef T, Byte(), Int32, Int32)
- uid: AlgoSdk.LowLevel.ByteArray.CopyFrom``1(``0@,Unity.Collections.NativeArray{System.Byte},System.Int32,System.Int32)
  commentId: M:AlgoSdk.LowLevel.ByteArray.CopyFrom``1(``0@,Unity.Collections.NativeArray{System.Byte},System.Int32,System.Int32)
  id: CopyFrom``1(``0@,Unity.Collections.NativeArray{System.Byte},System.Int32,System.Int32)
  isExtensionMethod: true
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: CopyFrom<T>(ref T, NativeArray<Byte>, Int32, Int32)
  nameWithType: ByteArray.CopyFrom<T>(ref T, NativeArray<Byte>, Int32, Int32)
  fullName: AlgoSdk.LowLevel.ByteArray.CopyFrom<T>(ref T, Unity.Collections.NativeArray<System.Byte>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CopyFrom
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 112
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static void CopyFrom<T>(this ref T target, NativeArray<byte> source, int start, int length = 2147483647)
          where T : struct, IByteArray
    parameters:
    - id: target
      type: '{T}'
    - id: source
      type: Unity.Collections.NativeArray{System.Byte}
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CopyFrom(Of T As {Structure, IByteArray})(ByRef target As T, source As NativeArray(Of Byte), start As Integer, length As Integer = 2147483647)
  overload: AlgoSdk.LowLevel.ByteArray.CopyFrom*
  nameWithType.vb: ByteArray.CopyFrom(Of T)(ByRef T, NativeArray(Of Byte), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.CopyFrom(Of T)(ByRef T, Unity.Collections.NativeArray(Of System.Byte), System.Int32, System.Int32)
  name.vb: CopyFrom(Of T)(ByRef T, NativeArray(Of Byte), Int32, Int32)
- uid: AlgoSdk.LowLevel.ByteArray.CopyTo``2(``0,``1@,System.Int32,System.Int32)
  commentId: M:AlgoSdk.LowLevel.ByteArray.CopyTo``2(``0,``1@,System.Int32,System.Int32)
  id: CopyTo``2(``0,``1@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: CopyTo<T, U>(T, ref U, Int32, Int32)
  nameWithType: ByteArray.CopyTo<T, U>(T, ref U, Int32, Int32)
  fullName: AlgoSdk.LowLevel.ByteArray.CopyTo<T, U>(T, ref U, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CopyTo
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 123
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static void CopyTo<T, U>(this T source, ref U target, int start, int length = 2147483647)
          where T : struct, IByteArray where U : struct, IByteArray
    parameters:
    - id: source
      type: '{T}'
    - id: target
      type: '{U}'
    - id: start
      type: System.Int32
    - id: length
      type: System.Int32
    typeParameters:
    - id: T
    - id: U
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CopyTo(Of T As {Structure, IByteArray}, U As {Structure, IByteArray})(source As T, ByRef target As U, start As Integer, length As Integer = 2147483647)
  overload: AlgoSdk.LowLevel.ByteArray.CopyTo*
  nameWithType.vb: ByteArray.CopyTo(Of T, U)(T, ByRef U, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.CopyTo(Of T, U)(T, ByRef U, System.Int32, System.Int32)
  name.vb: CopyTo(Of T, U)(T, ByRef U, Int32, Int32)
- uid: AlgoSdk.LowLevel.ByteArray.CopyTo``2(``0,``1@)
  commentId: M:AlgoSdk.LowLevel.ByteArray.CopyTo``2(``0,``1@)
  id: CopyTo``2(``0,``1@)
  isExtensionMethod: true
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: CopyTo<T, U>(T, ref U)
  nameWithType: ByteArray.CopyTo<T, U>(T, ref U)
  fullName: AlgoSdk.LowLevel.ByteArray.CopyTo<T, U>(T, ref U)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CopyTo
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 136
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static void CopyTo<T, U>(this T from, ref U to)
          where T : struct, IByteArray where U : struct, IByteArray
    parameters:
    - id: from
      type: '{T}'
    - id: to
      type: '{U}'
    typeParameters:
    - id: T
    - id: U
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CopyTo(Of T As {Structure, IByteArray}, U As {Structure, IByteArray})(from As T, ByRef to As U)
  overload: AlgoSdk.LowLevel.ByteArray.CopyTo*
  nameWithType.vb: ByteArray.CopyTo(Of T, U)(T, ByRef U)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.CopyTo(Of T, U)(T, ByRef U)
  name.vb: CopyTo(Of T, U)(T, ByRef U)
- uid: AlgoSdk.LowLevel.ByteArray.ToArray``1(``0@)
  commentId: M:AlgoSdk.LowLevel.ByteArray.ToArray``1(``0@)
  id: ToArray``1(``0@)
  isExtensionMethod: true
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: ToArray<TByteArray>(ref TByteArray)
  nameWithType: ByteArray.ToArray<TByteArray>(ref TByteArray)
  fullName: AlgoSdk.LowLevel.ByteArray.ToArray<TByteArray>(ref TByteArray)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToArray
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 145
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static byte[] ToArray<TByteArray>(this ref TByteArray bytes)
          where TByteArray : struct, IArray<byte>
    parameters:
    - id: bytes
      type: '{TByteArray}'
    typeParameters:
    - id: TByteArray
    return:
      type: System.Byte[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToArray(Of TByteArray As {Structure, IArray(Of Byte)})(ByRef bytes As TByteArray) As Byte()
  overload: AlgoSdk.LowLevel.ByteArray.ToArray*
  nameWithType.vb: ByteArray.ToArray(Of TByteArray)(ByRef TByteArray)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.ToArray(Of TByteArray)(ByRef TByteArray)
  name.vb: ToArray(Of TByteArray)(ByRef TByteArray)
- uid: AlgoSdk.LowLevel.ByteArray.Equals``1(``0@,``0@)
  commentId: M:AlgoSdk.LowLevel.ByteArray.Equals``1(``0@,``0@)
  id: Equals``1(``0@,``0@)
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: Equals<TByteArray>(TByteArray, TByteArray)
  nameWithType: ByteArray.Equals<TByteArray>(TByteArray, TByteArray)
  fullName: AlgoSdk.LowLevel.ByteArray.Equals<TByteArray>(TByteArray, TByteArray)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 154
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static bool Equals<TByteArray>(in TByteArray x, in TByteArray y)
          where TByteArray : struct, IByteArray
    parameters:
    - id: x
      type: '{TByteArray}'
    - id: y
      type: '{TByteArray}'
    typeParameters:
    - id: TByteArray
    return:
      type: System.Boolean
    content.vb: Public Shared Function Equals(Of TByteArray As {Structure, IByteArray})(ByRef x As TByteArray, ByRef y As TByteArray) As Boolean
  overload: AlgoSdk.LowLevel.ByteArray.Equals*
  nameWithType.vb: ByteArray.Equals(Of TByteArray)(ByRef TByteArray, ByRef TByteArray)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.Equals(Of TByteArray)(ByRef TByteArray, ByRef TByteArray)
  name.vb: Equals(Of TByteArray)(ByRef TByteArray, ByRef TByteArray)
- uid: AlgoSdk.LowLevel.ByteArray.EqualsOther``2(``0@,``1@)
  commentId: M:AlgoSdk.LowLevel.ByteArray.EqualsOther``2(``0@,``1@)
  id: EqualsOther``2(``0@,``1@)
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: EqualsOther<T, U>(T, U)
  nameWithType: ByteArray.EqualsOther<T, U>(T, U)
  fullName: AlgoSdk.LowLevel.ByteArray.EqualsOther<T, U>(T, U)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: EqualsOther
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 160
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static bool EqualsOther<T, U>(in T x, in U y)
          where T : struct, IByteArray where U : struct, IByteArray
    parameters:
    - id: x
      type: '{T}'
    - id: y
      type: '{U}'
    typeParameters:
    - id: T
    - id: U
    return:
      type: System.Boolean
    content.vb: Public Shared Function EqualsOther(Of T As {Structure, IByteArray}, U As {Structure, IByteArray})(ByRef x As T, ByRef y As U) As Boolean
  overload: AlgoSdk.LowLevel.ByteArray.EqualsOther*
  nameWithType.vb: ByteArray.EqualsOther(Of T, U)(ByRef T, ByRef U)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.EqualsOther(Of T, U)(ByRef T, ByRef U)
  name.vb: EqualsOther(Of T, U)(ByRef T, ByRef U)
- uid: AlgoSdk.LowLevel.ByteArray.Equals``1(``0@,System.Object)
  commentId: M:AlgoSdk.LowLevel.ByteArray.Equals``1(``0@,System.Object)
  id: Equals``1(``0@,System.Object)
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: Equals<TByteArray>(TByteArray, Object)
  nameWithType: ByteArray.Equals<TByteArray>(TByteArray, Object)
  fullName: AlgoSdk.LowLevel.ByteArray.Equals<TByteArray>(TByteArray, System.Object)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 174
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static bool Equals<TByteArray>(in TByteArray x, object obj)
          where TByteArray : struct, IByteArray
    parameters:
    - id: x
      type: '{TByteArray}'
    - id: obj
      type: System.Object
    typeParameters:
    - id: TByteArray
    return:
      type: System.Boolean
    content.vb: Public Shared Function Equals(Of TByteArray As {Structure, IByteArray})(ByRef x As TByteArray, obj As Object) As Boolean
  overload: AlgoSdk.LowLevel.ByteArray.Equals*
  nameWithType.vb: ByteArray.Equals(Of TByteArray)(ByRef TByteArray, Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.Equals(Of TByteArray)(ByRef TByteArray, System.Object)
  name.vb: Equals(Of TByteArray)(ByRef TByteArray, Object)
- uid: AlgoSdk.LowLevel.ByteArray.GetHashCode``1(``0@)
  commentId: M:AlgoSdk.LowLevel.ByteArray.GetHashCode``1(``0@)
  id: GetHashCode``1(``0@)
  parent: AlgoSdk.LowLevel.ByteArray
  langs:
  - csharp
  - vb
  name: GetHashCode<TByteArray>(TByteArray)
  nameWithType: ByteArray.GetHashCode<TByteArray>(TByteArray)
  fullName: AlgoSdk.LowLevel.ByteArray.GetHashCode<TByteArray>(TByteArray)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.LowLevel/ByteArray.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: GetHashCode
    path: ../CareBoo.AlgoSdk.LowLevel/ByteArray.cs
    startLine: 182
  assemblies:
  - CareBoo.AlgoSdk.LowLevel
  namespace: AlgoSdk.LowLevel
  syntax:
    content: >-
      public static int GetHashCode<TByteArray>(in TByteArray bytes)
          where TByteArray : struct, IByteArray
    parameters:
    - id: bytes
      type: '{TByteArray}'
    typeParameters:
    - id: TByteArray
    return:
      type: System.Int32
    content.vb: Public Shared Function GetHashCode(Of TByteArray As {Structure, IByteArray})(ByRef bytes As TByteArray) As Integer
  overload: AlgoSdk.LowLevel.ByteArray.GetHashCode*
  nameWithType.vb: ByteArray.GetHashCode(Of TByteArray)(ByRef TByteArray)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.LowLevel.ByteArray.GetHashCode(Of TByteArray)(ByRef TByteArray)
  name.vb: GetHashCode(Of TByteArray)(ByRef TByteArray)
references:
- uid: AlgoSdk.LowLevel
  commentId: N:AlgoSdk.LowLevel
  name: AlgoSdk.LowLevel
  nameWithType: AlgoSdk.LowLevel
  fullName: AlgoSdk.LowLevel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AlgoSdk.LowLevel.ByteArray.CheckElementAccess*
  commentId: Overload:AlgoSdk.LowLevel.ByteArray.CheckElementAccess
  name: CheckElementAccess
  nameWithType: ByteArray.CheckElementAccess
  fullName: AlgoSdk.LowLevel.ByteArray.CheckElementAccess
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AlgoSdk.LowLevel.ByteArray.GetByteAt*
  commentId: Overload:AlgoSdk.LowLevel.ByteArray.GetByteAt
  name: GetByteAt
  nameWithType: ByteArray.GetByteAt
  fullName: AlgoSdk.LowLevel.ByteArray.GetByteAt
- uid: '{TByteArray}'
  commentId: '!:TByteArray'
  definition: TByteArray
  name: TByteArray
  nameWithType: TByteArray
  fullName: TByteArray
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: TByteArray
  name: TByteArray
  nameWithType: TByteArray
  fullName: TByteArray
- uid: AlgoSdk.LowLevel.ByteArray.SetByteAt*
  commentId: Overload:AlgoSdk.LowLevel.ByteArray.SetByteAt
  name: SetByteAt
  nameWithType: ByteArray.SetByteAt
  fullName: AlgoSdk.LowLevel.ByteArray.SetByteAt
- uid: AlgoSdk.LowLevel.ByteArray.ReadByteAt*
  commentId: Overload:AlgoSdk.LowLevel.ByteArray.ReadByteAt
  name: ReadByteAt
  nameWithType: ByteArray.ReadByteAt
  fullName: AlgoSdk.LowLevel.ByteArray.ReadByteAt
- uid: AlgoSdk.LowLevel.ByteArray.CopyFrom*
  commentId: Overload:AlgoSdk.LowLevel.ByteArray.CopyFrom
  name: CopyFrom
  nameWithType: ByteArray.CopyFrom
  fullName: AlgoSdk.LowLevel.ByteArray.CopyFrom
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{U}'
  commentId: '!:U'
  definition: U
  name: U
  nameWithType: U
  fullName: U
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: U
  name: U
  nameWithType: U
  fullName: U
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Unity.Collections.NativeArray{System.Byte}
  commentId: T:Unity.Collections.NativeArray{System.Byte}
  parent: Unity.Collections
  definition: Unity.Collections.NativeArray`1
  name: NativeArray<Byte>
  nameWithType: NativeArray<Byte>
  fullName: Unity.Collections.NativeArray<System.Byte>
  nameWithType.vb: NativeArray(Of Byte)
  fullName.vb: Unity.Collections.NativeArray(Of System.Byte)
  name.vb: NativeArray(Of Byte)
  spec.csharp:
  - uid: Unity.Collections.NativeArray`1
    name: NativeArray
    nameWithType: NativeArray
    fullName: Unity.Collections.NativeArray
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Unity.Collections.NativeArray`1
    name: NativeArray
    nameWithType: NativeArray
    fullName: Unity.Collections.NativeArray
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Collections.NativeArray`1
  commentId: T:Unity.Collections.NativeArray`1
  isExternal: true
  name: NativeArray<T>
  nameWithType: NativeArray<T>
  fullName: Unity.Collections.NativeArray<T>
  nameWithType.vb: NativeArray(Of T)
  fullName.vb: Unity.Collections.NativeArray(Of T)
  name.vb: NativeArray(Of T)
  spec.csharp:
  - uid: Unity.Collections.NativeArray`1
    name: NativeArray
    nameWithType: NativeArray
    fullName: Unity.Collections.NativeArray
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Unity.Collections.NativeArray`1
    name: NativeArray
    nameWithType: NativeArray
    fullName: Unity.Collections.NativeArray
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Collections
  commentId: N:Unity.Collections
  name: Unity.Collections
  nameWithType: Unity.Collections
  fullName: Unity.Collections
- uid: AlgoSdk.LowLevel.ByteArray.CopyTo*
  commentId: Overload:AlgoSdk.LowLevel.ByteArray.CopyTo
  name: CopyTo
  nameWithType: ByteArray.CopyTo
  fullName: AlgoSdk.LowLevel.ByteArray.CopyTo
- uid: AlgoSdk.LowLevel.ByteArray.ToArray*
  commentId: Overload:AlgoSdk.LowLevel.ByteArray.ToArray
  name: ToArray
  nameWithType: ByteArray.ToArray
  fullName: AlgoSdk.LowLevel.ByteArray.ToArray
- uid: AlgoSdk.LowLevel.ByteArray.Equals*
  commentId: Overload:AlgoSdk.LowLevel.ByteArray.Equals
  name: Equals
  nameWithType: ByteArray.Equals
  fullName: AlgoSdk.LowLevel.ByteArray.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AlgoSdk.LowLevel.ByteArray.EqualsOther*
  commentId: Overload:AlgoSdk.LowLevel.ByteArray.EqualsOther
  name: EqualsOther
  nameWithType: ByteArray.EqualsOther
  fullName: AlgoSdk.LowLevel.ByteArray.EqualsOther
- uid: AlgoSdk.LowLevel.ByteArray.GetHashCode*
  commentId: Overload:AlgoSdk.LowLevel.ByteArray.GetHashCode
  name: GetHashCode
  nameWithType: ByteArray.GetHashCode
  fullName: AlgoSdk.LowLevel.ByteArray.GetHashCode
