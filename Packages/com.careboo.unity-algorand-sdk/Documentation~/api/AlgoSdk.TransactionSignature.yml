### YamlMime:ManagedReference
items:
- uid: AlgoSdk.TransactionSignature
  commentId: T:AlgoSdk.TransactionSignature
  id: TransactionSignature
  parent: AlgoSdk
  children:
  - AlgoSdk.TransactionSignature.Equals(AlgoSdk.TransactionSignature)
  - AlgoSdk.TransactionSignature.LogicSig
  - AlgoSdk.TransactionSignature.Multisig
  - AlgoSdk.TransactionSignature.op_Implicit(AlgoSdk.LogicSig)~AlgoSdk.TransactionSignature
  - AlgoSdk.TransactionSignature.op_Implicit(AlgoSdk.Multisig)~AlgoSdk.TransactionSignature
  - AlgoSdk.TransactionSignature.op_Implicit(AlgoSdk.Sig)~AlgoSdk.TransactionSignature
  - AlgoSdk.TransactionSignature.Sig
  langs:
  - csharp
  - vb
  name: TransactionSignature
  nameWithType: TransactionSignature
  fullName: AlgoSdk.TransactionSignature
  type: Struct
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: TransactionSignature
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
    startLine: 4
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: 'public struct TransactionSignature : IEquatable<TransactionSignature>'
    content.vb: >-
      Public Structure TransactionSignature
          Implements IEquatable(Of TransactionSignature)
  implements:
  - System.IEquatable{AlgoSdk.TransactionSignature}
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: AlgoSdk.TransactionSignature.LogicSig
  commentId: F:AlgoSdk.TransactionSignature.LogicSig
  id: LogicSig
  parent: AlgoSdk.TransactionSignature
  langs:
  - csharp
  - vb
  name: LogicSig
  nameWithType: TransactionSignature.LogicSig
  fullName: AlgoSdk.TransactionSignature.LogicSig
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: LogicSig
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
    startLine: 9
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("logicsig", null, true)]

      public LogicSig LogicSig
    return:
      type: AlgoSdk.LogicSig
    content.vb: >-
      <AlgoApiField("logicsig", Nothing, True)>

      Public LogicSig As LogicSig
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: logicsig
    - type: System.String
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.TransactionSignature.Multisig
  commentId: F:AlgoSdk.TransactionSignature.Multisig
  id: Multisig
  parent: AlgoSdk.TransactionSignature
  langs:
  - csharp
  - vb
  name: Multisig
  nameWithType: TransactionSignature.Multisig
  fullName: AlgoSdk.TransactionSignature.Multisig
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Multisig
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
    startLine: 12
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("multisig", null, true)]

      public Multisig Multisig
    return:
      type: AlgoSdk.Multisig
    content.vb: >-
      <AlgoApiField("multisig", Nothing, True)>

      Public Multisig As Multisig
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: multisig
    - type: System.String
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.TransactionSignature.Sig
  commentId: F:AlgoSdk.TransactionSignature.Sig
  id: Sig
  parent: AlgoSdk.TransactionSignature
  langs:
  - csharp
  - vb
  name: Sig
  nameWithType: TransactionSignature.Sig
  fullName: AlgoSdk.TransactionSignature.Sig
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Sig
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
    startLine: 15
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("sig", null, true)]

      public Sig Sig
    return:
      type: AlgoSdk.Sig
    content.vb: >-
      <AlgoApiField("sig", Nothing, True)>

      Public Sig As Sig
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: sig
    - type: System.String
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.TransactionSignature.Equals(AlgoSdk.TransactionSignature)
  commentId: M:AlgoSdk.TransactionSignature.Equals(AlgoSdk.TransactionSignature)
  id: Equals(AlgoSdk.TransactionSignature)
  parent: AlgoSdk.TransactionSignature
  langs:
  - csharp
  - vb
  name: Equals(TransactionSignature)
  nameWithType: TransactionSignature.Equals(TransactionSignature)
  fullName: AlgoSdk.TransactionSignature.Equals(AlgoSdk.TransactionSignature)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
    startLine: 17
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public bool Equals(TransactionSignature other)
    parameters:
    - id: other
      type: AlgoSdk.TransactionSignature
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As TransactionSignature) As Boolean
  overload: AlgoSdk.TransactionSignature.Equals*
  implements:
  - System.IEquatable{AlgoSdk.TransactionSignature}.Equals(AlgoSdk.TransactionSignature)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.TransactionSignature.op_Implicit(AlgoSdk.LogicSig)~AlgoSdk.TransactionSignature
  commentId: M:AlgoSdk.TransactionSignature.op_Implicit(AlgoSdk.LogicSig)~AlgoSdk.TransactionSignature
  id: op_Implicit(AlgoSdk.LogicSig)~AlgoSdk.TransactionSignature
  parent: AlgoSdk.TransactionSignature
  langs:
  - csharp
  - vb
  name: Implicit(LogicSig to TransactionSignature)
  nameWithType: TransactionSignature.Implicit(LogicSig to TransactionSignature)
  fullName: AlgoSdk.TransactionSignature.Implicit(AlgoSdk.LogicSig to AlgoSdk.TransactionSignature)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Implicit
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
    startLine: 25
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static implicit operator TransactionSignature(LogicSig lsig)
    parameters:
    - id: lsig
      type: AlgoSdk.LogicSig
    return:
      type: AlgoSdk.TransactionSignature
    content.vb: Public Shared Widening Operator CType(lsig As LogicSig) As TransactionSignature
  overload: AlgoSdk.TransactionSignature.op_Implicit*
  nameWithType.vb: TransactionSignature.Widening(LogicSig to TransactionSignature)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.TransactionSignature.Widening(AlgoSdk.LogicSig to AlgoSdk.TransactionSignature)
  name.vb: Widening(LogicSig to TransactionSignature)
- uid: AlgoSdk.TransactionSignature.op_Implicit(AlgoSdk.Multisig)~AlgoSdk.TransactionSignature
  commentId: M:AlgoSdk.TransactionSignature.op_Implicit(AlgoSdk.Multisig)~AlgoSdk.TransactionSignature
  id: op_Implicit(AlgoSdk.Multisig)~AlgoSdk.TransactionSignature
  parent: AlgoSdk.TransactionSignature
  langs:
  - csharp
  - vb
  name: Implicit(Multisig to TransactionSignature)
  nameWithType: TransactionSignature.Implicit(Multisig to TransactionSignature)
  fullName: AlgoSdk.TransactionSignature.Implicit(AlgoSdk.Multisig to AlgoSdk.TransactionSignature)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Implicit
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
    startLine: 30
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static implicit operator TransactionSignature(Multisig msig)
    parameters:
    - id: msig
      type: AlgoSdk.Multisig
    return:
      type: AlgoSdk.TransactionSignature
    content.vb: Public Shared Widening Operator CType(msig As Multisig) As TransactionSignature
  overload: AlgoSdk.TransactionSignature.op_Implicit*
  nameWithType.vb: TransactionSignature.Widening(Multisig to TransactionSignature)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.TransactionSignature.Widening(AlgoSdk.Multisig to AlgoSdk.TransactionSignature)
  name.vb: Widening(Multisig to TransactionSignature)
- uid: AlgoSdk.TransactionSignature.op_Implicit(AlgoSdk.Sig)~AlgoSdk.TransactionSignature
  commentId: M:AlgoSdk.TransactionSignature.op_Implicit(AlgoSdk.Sig)~AlgoSdk.TransactionSignature
  id: op_Implicit(AlgoSdk.Sig)~AlgoSdk.TransactionSignature
  parent: AlgoSdk.TransactionSignature
  langs:
  - csharp
  - vb
  name: Implicit(Sig to TransactionSignature)
  nameWithType: TransactionSignature.Implicit(Sig to TransactionSignature)
  fullName: AlgoSdk.TransactionSignature.Implicit(AlgoSdk.Sig to AlgoSdk.TransactionSignature)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Implicit
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Transaction/TransactionSignature.cs
    startLine: 35
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static implicit operator TransactionSignature(Sig sig)
    parameters:
    - id: sig
      type: AlgoSdk.Sig
    return:
      type: AlgoSdk.TransactionSignature
    content.vb: Public Shared Widening Operator CType(sig As Sig) As TransactionSignature
  overload: AlgoSdk.TransactionSignature.op_Implicit*
  nameWithType.vb: TransactionSignature.Widening(Sig to TransactionSignature)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.TransactionSignature.Widening(AlgoSdk.Sig to AlgoSdk.TransactionSignature)
  name.vb: Widening(Sig to TransactionSignature)
references:
- uid: AlgoSdk
  commentId: N:AlgoSdk
  name: AlgoSdk
  nameWithType: AlgoSdk
  fullName: AlgoSdk
- uid: System.IEquatable{AlgoSdk.TransactionSignature}
  commentId: T:System.IEquatable{AlgoSdk.TransactionSignature}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<TransactionSignature>
  nameWithType: IEquatable<TransactionSignature>
  fullName: System.IEquatable<AlgoSdk.TransactionSignature>
  nameWithType.vb: IEquatable(Of TransactionSignature)
  fullName.vb: System.IEquatable(Of AlgoSdk.TransactionSignature)
  name.vb: IEquatable(Of TransactionSignature)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AlgoSdk.TransactionSignature
    name: TransactionSignature
    nameWithType: TransactionSignature
    fullName: AlgoSdk.TransactionSignature
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AlgoSdk.TransactionSignature
    name: TransactionSignature
    nameWithType: TransactionSignature
    fullName: AlgoSdk.TransactionSignature
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AlgoSdk.LogicSig
  commentId: T:AlgoSdk.LogicSig
  parent: AlgoSdk
  name: LogicSig
  nameWithType: LogicSig
  fullName: AlgoSdk.LogicSig
- uid: AlgoSdk.Multisig
  commentId: T:AlgoSdk.Multisig
  parent: AlgoSdk
  name: Multisig
  nameWithType: Multisig
  fullName: AlgoSdk.Multisig
- uid: AlgoSdk.Sig
  commentId: T:AlgoSdk.Sig
  parent: AlgoSdk
  name: Sig
  nameWithType: Sig
  fullName: AlgoSdk.Sig
- uid: AlgoSdk.TransactionSignature.Equals*
  commentId: Overload:AlgoSdk.TransactionSignature.Equals
  name: Equals
  nameWithType: TransactionSignature.Equals
  fullName: AlgoSdk.TransactionSignature.Equals
- uid: System.IEquatable{AlgoSdk.TransactionSignature}.Equals(AlgoSdk.TransactionSignature)
  commentId: M:System.IEquatable{AlgoSdk.TransactionSignature}.Equals(AlgoSdk.TransactionSignature)
  parent: System.IEquatable{AlgoSdk.TransactionSignature}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(TransactionSignature)
  nameWithType: IEquatable<TransactionSignature>.Equals(TransactionSignature)
  fullName: System.IEquatable<AlgoSdk.TransactionSignature>.Equals(AlgoSdk.TransactionSignature)
  nameWithType.vb: IEquatable(Of TransactionSignature).Equals(TransactionSignature)
  fullName.vb: System.IEquatable(Of AlgoSdk.TransactionSignature).Equals(AlgoSdk.TransactionSignature)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<TransactionSignature>.Equals
    fullName: System.IEquatable<AlgoSdk.TransactionSignature>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.TransactionSignature
    name: TransactionSignature
    nameWithType: TransactionSignature
    fullName: AlgoSdk.TransactionSignature
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of TransactionSignature).Equals
    fullName: System.IEquatable(Of AlgoSdk.TransactionSignature).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.TransactionSignature
    name: TransactionSignature
    nameWithType: TransactionSignature
    fullName: AlgoSdk.TransactionSignature
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.TransactionSignature
  commentId: T:AlgoSdk.TransactionSignature
  parent: AlgoSdk
  name: TransactionSignature
  nameWithType: TransactionSignature
  fullName: AlgoSdk.TransactionSignature
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.TransactionSignature.op_Implicit*
  commentId: Overload:AlgoSdk.TransactionSignature.op_Implicit
  name: Implicit
  nameWithType: TransactionSignature.Implicit
  fullName: AlgoSdk.TransactionSignature.Implicit
  nameWithType.vb: TransactionSignature.Widening
  fullName.vb: AlgoSdk.TransactionSignature.Widening
  name.vb: Widening
