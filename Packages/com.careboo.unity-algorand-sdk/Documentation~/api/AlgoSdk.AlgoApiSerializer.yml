### YamlMime:ManagedReference
items:
- uid: AlgoSdk.AlgoApiSerializer
  commentId: T:AlgoSdk.AlgoApiSerializer
  id: AlgoApiSerializer
  parent: AlgoSdk
  children:
  - AlgoSdk.AlgoApiSerializer.Deserialize``1(System.Byte[],AlgoSdk.ContentType)
  - AlgoSdk.AlgoApiSerializer.Deserialize``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly,AlgoSdk.ContentType)
  - AlgoSdk.AlgoApiSerializer.DeserializeJson``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly)
  - AlgoSdk.AlgoApiSerializer.DeserializeJson``1(Unity.Collections.NativeText)
  - AlgoSdk.AlgoApiSerializer.DeserializeMessagePack``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly)
  - AlgoSdk.AlgoApiSerializer.SerializeJson``1(``0)
  - AlgoSdk.AlgoApiSerializer.SerializeJson``1(``0,Unity.Collections.Allocator)
  - AlgoSdk.AlgoApiSerializer.SerializeMessagePack``1(``0)
  - AlgoSdk.AlgoApiSerializer.SerializeMessagePack``1(``0,Unity.Collections.Allocator)
  langs:
  - csharp
  - vb
  name: AlgoApiSerializer
  nameWithType: AlgoApiSerializer
  fullName: AlgoSdk.AlgoApiSerializer
  type: Class
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: AlgoApiSerializer
    path: ../CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
    startLine: 11
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nContains functions for serializing and deserializing AlgoSdk types\n"
  example: []
  syntax:
    content: public static class AlgoApiSerializer
    content.vb: Public Module AlgoApiSerializer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AlgoSdk.AlgoApiSerializer.Deserialize``1(System.Byte[],AlgoSdk.ContentType)
  commentId: M:AlgoSdk.AlgoApiSerializer.Deserialize``1(System.Byte[],AlgoSdk.ContentType)
  id: Deserialize``1(System.Byte[],AlgoSdk.ContentType)
  parent: AlgoSdk.AlgoApiSerializer
  langs:
  - csharp
  - vb
  name: Deserialize<T>(Byte[], ContentType)
  nameWithType: AlgoApiSerializer.Deserialize<T>(Byte[], ContentType)
  fullName: AlgoSdk.AlgoApiSerializer.Deserialize<T>(System.Byte[], AlgoSdk.ContentType)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Deserialize
    path: ../CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
    startLine: 20
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nDeserializes raw data based on its <xref href=\"AlgoSdk.ContentType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static T Deserialize<T>(byte[] bytes, ContentType contentType)
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The raw data to deserialize
    - id: contentType
      type: AlgoSdk.ContentType
      description: The content type of the raw data (Json | MessagePack)
    typeParameters:
    - id: T
      description: The type to deserialize to
    return:
      type: '{T}'
      description: The data deserialized as T
    content.vb: Public Shared Function Deserialize(Of T)(bytes As Byte(), contentType As ContentType) As T
  overload: AlgoSdk.AlgoApiSerializer.Deserialize*
  nameWithType.vb: AlgoApiSerializer.Deserialize(Of T)(Byte(), ContentType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.AlgoApiSerializer.Deserialize(Of T)(System.Byte(), AlgoSdk.ContentType)
  name.vb: Deserialize(Of T)(Byte(), ContentType)
- uid: AlgoSdk.AlgoApiSerializer.Deserialize``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly,AlgoSdk.ContentType)
  commentId: M:AlgoSdk.AlgoApiSerializer.Deserialize``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly,AlgoSdk.ContentType)
  id: Deserialize``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly,AlgoSdk.ContentType)
  parent: AlgoSdk.AlgoApiSerializer
  langs:
  - csharp
  - vb
  name: Deserialize<T>(NativeArray<Byte>.ReadOnly, ContentType)
  nameWithType: AlgoApiSerializer.Deserialize<T>(NativeArray<Byte>.ReadOnly, ContentType)
  fullName: AlgoSdk.AlgoApiSerializer.Deserialize<T>(Unity.Collections.NativeArray<System.Byte>.ReadOnly, AlgoSdk.ContentType)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Deserialize
    path: ../CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
    startLine: 35
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nDeserializes raw data based on its <xref href=\"AlgoSdk.ContentType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static T Deserialize<T>(NativeArray<byte>.ReadOnly bytes, ContentType contentType)
    parameters:
    - id: bytes
      type: Unity.Collections.NativeArray{System.Byte}.ReadOnly
      description: The raw data to deserialize
    - id: contentType
      type: AlgoSdk.ContentType
      description: The content type of the raw data (Json | MessagePack)
    typeParameters:
    - id: T
      description: The type to deserialize to
    return:
      type: '{T}'
      description: The data deserialized as T
    content.vb: Public Shared Function Deserialize(Of T)(bytes As NativeArray(Of Byte).ReadOnly, contentType As ContentType) As T
  overload: AlgoSdk.AlgoApiSerializer.Deserialize*
  nameWithType.vb: AlgoApiSerializer.Deserialize(Of T)(NativeArray(Of Byte).ReadOnly, ContentType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.AlgoApiSerializer.Deserialize(Of T)(Unity.Collections.NativeArray(Of System.Byte).ReadOnly, AlgoSdk.ContentType)
  name.vb: Deserialize(Of T)(NativeArray(Of Byte).ReadOnly, ContentType)
- uid: AlgoSdk.AlgoApiSerializer.DeserializeJson``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly)
  commentId: M:AlgoSdk.AlgoApiSerializer.DeserializeJson``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly)
  id: DeserializeJson``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly)
  parent: AlgoSdk.AlgoApiSerializer
  langs:
  - csharp
  - vb
  name: DeserializeJson<T>(NativeArray<Byte>.ReadOnly)
  nameWithType: AlgoApiSerializer.DeserializeJson<T>(NativeArray<Byte>.ReadOnly)
  fullName: AlgoSdk.AlgoApiSerializer.DeserializeJson<T>(Unity.Collections.NativeArray<System.Byte>.ReadOnly)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: DeserializeJson
    path: ../CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
    startLine: 52
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nDeserialize JSON encoded as UTF8 bytes\n"
  example: []
  syntax:
    content: public static T DeserializeJson<T>(NativeArray<byte>.ReadOnly bytes)
    parameters:
    - id: bytes
      type: Unity.Collections.NativeArray{System.Byte}.ReadOnly
      description: UTF8 Bytes that can be decoded into JSON
    typeParameters:
    - id: T
      description: The type to deserialize the data into
    return:
      type: '{T}'
      description: The data deserialized as T
    content.vb: Public Shared Function DeserializeJson(Of T)(bytes As NativeArray(Of Byte).ReadOnly) As T
  overload: AlgoSdk.AlgoApiSerializer.DeserializeJson*
  nameWithType.vb: AlgoApiSerializer.DeserializeJson(Of T)(NativeArray(Of Byte).ReadOnly)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.AlgoApiSerializer.DeserializeJson(Of T)(Unity.Collections.NativeArray(Of System.Byte).ReadOnly)
  name.vb: DeserializeJson(Of T)(NativeArray(Of Byte).ReadOnly)
- uid: AlgoSdk.AlgoApiSerializer.DeserializeJson``1(Unity.Collections.NativeText)
  commentId: M:AlgoSdk.AlgoApiSerializer.DeserializeJson``1(Unity.Collections.NativeText)
  id: DeserializeJson``1(Unity.Collections.NativeText)
  parent: AlgoSdk.AlgoApiSerializer
  langs:
  - csharp
  - vb
  name: DeserializeJson<T>(NativeText)
  nameWithType: AlgoApiSerializer.DeserializeJson<T>(NativeText)
  fullName: AlgoSdk.AlgoApiSerializer.DeserializeJson<T>(Unity.Collections.NativeText)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: DeserializeJson
    path: ../CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
    startLine: 76
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nDeserialize JSON text into an object\n"
  example: []
  syntax:
    content: public static T DeserializeJson<T>(NativeText text)
    parameters:
    - id: text
      type: Unity.Collections.NativeText
      description: The JSON text
    typeParameters:
    - id: T
      description: The type of the object that will be deserialized into
    return:
      type: '{T}'
      description: The data deserialized as T
    content.vb: Public Shared Function DeserializeJson(Of T)(text As NativeText) As T
  overload: AlgoSdk.AlgoApiSerializer.DeserializeJson*
  nameWithType.vb: AlgoApiSerializer.DeserializeJson(Of T)(NativeText)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.AlgoApiSerializer.DeserializeJson(Of T)(Unity.Collections.NativeText)
  name.vb: DeserializeJson(Of T)(NativeText)
- uid: AlgoSdk.AlgoApiSerializer.DeserializeMessagePack``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly)
  commentId: M:AlgoSdk.AlgoApiSerializer.DeserializeMessagePack``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly)
  id: DeserializeMessagePack``1(Unity.Collections.NativeArray{System.Byte}.ReadOnly)
  parent: AlgoSdk.AlgoApiSerializer
  langs:
  - csharp
  - vb
  name: DeserializeMessagePack<T>(NativeArray<Byte>.ReadOnly)
  nameWithType: AlgoApiSerializer.DeserializeMessagePack<T>(NativeArray<Byte>.ReadOnly)
  fullName: AlgoSdk.AlgoApiSerializer.DeserializeMessagePack<T>(Unity.Collections.NativeArray<System.Byte>.ReadOnly)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: DeserializeMessagePack
    path: ../CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
    startLine: 88
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nDeserialize messagepack bytes into an object\n"
  example: []
  syntax:
    content: public static T DeserializeMessagePack<T>(NativeArray<byte>.ReadOnly bytes)
    parameters:
    - id: bytes
      type: Unity.Collections.NativeArray{System.Byte}.ReadOnly
      description: The messagepack bytes
    typeParameters:
    - id: T
      description: The type of the object that will be deserialized into
    return:
      type: '{T}'
      description: The data deserialized as T
    content.vb: Public Shared Function DeserializeMessagePack(Of T)(bytes As NativeArray(Of Byte).ReadOnly) As T
  overload: AlgoSdk.AlgoApiSerializer.DeserializeMessagePack*
  nameWithType.vb: AlgoApiSerializer.DeserializeMessagePack(Of T)(NativeArray(Of Byte).ReadOnly)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.AlgoApiSerializer.DeserializeMessagePack(Of T)(Unity.Collections.NativeArray(Of System.Byte).ReadOnly)
  name.vb: DeserializeMessagePack(Of T)(NativeArray(Of Byte).ReadOnly)
- uid: AlgoSdk.AlgoApiSerializer.SerializeMessagePack``1(``0,Unity.Collections.Allocator)
  commentId: M:AlgoSdk.AlgoApiSerializer.SerializeMessagePack``1(``0,Unity.Collections.Allocator)
  id: SerializeMessagePack``1(``0,Unity.Collections.Allocator)
  parent: AlgoSdk.AlgoApiSerializer
  langs:
  - csharp
  - vb
  name: SerializeMessagePack<T>(T, Allocator)
  nameWithType: AlgoApiSerializer.SerializeMessagePack<T>(T, Allocator)
  fullName: AlgoSdk.AlgoApiSerializer.SerializeMessagePack<T>(T, Unity.Collections.Allocator)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: SerializeMessagePack
    path: ../CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
    startLine: 101
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nSerialize an object into messagepack bytes\n"
  example: []
  syntax:
    content: public static NativeList<byte> SerializeMessagePack<T>(T obj, Allocator allocator)
    parameters:
    - id: obj
      type: '{T}'
      description: The object to serialize
    - id: allocator
      type: Unity.Collections.Allocator
      description: The allocator to use for the created list of message pack bytes
    typeParameters:
    - id: T
      description: The type of the object that is serialized
    return:
      type: Unity.Collections.NativeList{System.Byte}
      description: A <xref href="Unity.Collections.NativeList%601" data-throw-if-not-resolved="false"></xref> allocated using the given allocator
    content.vb: Public Shared Function SerializeMessagePack(Of T)(obj As T, allocator As Allocator) As NativeList(Of Byte)
  overload: AlgoSdk.AlgoApiSerializer.SerializeMessagePack*
  nameWithType.vb: AlgoApiSerializer.SerializeMessagePack(Of T)(T, Allocator)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.AlgoApiSerializer.SerializeMessagePack(Of T)(T, Unity.Collections.Allocator)
  name.vb: SerializeMessagePack(Of T)(T, Allocator)
- uid: AlgoSdk.AlgoApiSerializer.SerializeMessagePack``1(``0)
  commentId: M:AlgoSdk.AlgoApiSerializer.SerializeMessagePack``1(``0)
  id: SerializeMessagePack``1(``0)
  parent: AlgoSdk.AlgoApiSerializer
  langs:
  - csharp
  - vb
  name: SerializeMessagePack<T>(T)
  nameWithType: AlgoApiSerializer.SerializeMessagePack<T>(T)
  fullName: AlgoSdk.AlgoApiSerializer.SerializeMessagePack<T>(T)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: SerializeMessagePack
    path: ../CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
    startLine: 115
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nSerialize an object into messagepack bytes\n"
  example: []
  syntax:
    content: public static byte[] SerializeMessagePack<T>(T obj)
    parameters:
    - id: obj
      type: '{T}'
      description: The object to serialize
    typeParameters:
    - id: T
      description: The type of the object that is serialized
    return:
      type: System.Byte[]
      description: The message pack message as an array of bytes
    content.vb: Public Shared Function SerializeMessagePack(Of T)(obj As T) As Byte()
  overload: AlgoSdk.AlgoApiSerializer.SerializeMessagePack*
  nameWithType.vb: AlgoApiSerializer.SerializeMessagePack(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.AlgoApiSerializer.SerializeMessagePack(Of T)(T)
  name.vb: SerializeMessagePack(Of T)(T)
- uid: AlgoSdk.AlgoApiSerializer.SerializeJson``1(``0,Unity.Collections.Allocator)
  commentId: M:AlgoSdk.AlgoApiSerializer.SerializeJson``1(``0,Unity.Collections.Allocator)
  id: SerializeJson``1(``0,Unity.Collections.Allocator)
  parent: AlgoSdk.AlgoApiSerializer
  langs:
  - csharp
  - vb
  name: SerializeJson<T>(T, Allocator)
  nameWithType: AlgoApiSerializer.SerializeJson<T>(T, Allocator)
  fullName: AlgoSdk.AlgoApiSerializer.SerializeJson<T>(T, Unity.Collections.Allocator)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: SerializeJson
    path: ../CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
    startLine: 128
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nSerialize an object into json text\n"
  example: []
  syntax:
    content: public static NativeText SerializeJson<T>(T obj, Allocator allocator)
    parameters:
    - id: obj
      type: '{T}'
      description: The object to serialize
    - id: allocator
      type: Unity.Collections.Allocator
      description: The allocator to use for the created text of json
    typeParameters:
    - id: T
      description: The type of the object that is serialized
    return:
      type: Unity.Collections.NativeText
      description: A <xref href="Unity.Collections.NativeText" data-throw-if-not-resolved="false"></xref> allocated from the given allocator
    content.vb: Public Shared Function SerializeJson(Of T)(obj As T, allocator As Allocator) As NativeText
  overload: AlgoSdk.AlgoApiSerializer.SerializeJson*
  nameWithType.vb: AlgoApiSerializer.SerializeJson(Of T)(T, Allocator)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.AlgoApiSerializer.SerializeJson(Of T)(T, Unity.Collections.Allocator)
  name.vb: SerializeJson(Of T)(T, Allocator)
- uid: AlgoSdk.AlgoApiSerializer.SerializeJson``1(``0)
  commentId: M:AlgoSdk.AlgoApiSerializer.SerializeJson``1(``0)
  id: SerializeJson``1(``0)
  parent: AlgoSdk.AlgoApiSerializer
  langs:
  - csharp
  - vb
  name: SerializeJson<T>(T)
  nameWithType: AlgoApiSerializer.SerializeJson<T>(T)
  fullName: AlgoSdk.AlgoApiSerializer.SerializeJson<T>(T)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: SerializeJson
    path: ../CareBoo.AlgoSdk/AlgoApi/AlgoApiSerializer.cs
    startLine: 142
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  summary: "\nSerialize an object into json text\n"
  example: []
  syntax:
    content: public static string SerializeJson<T>(T obj)
    parameters:
    - id: obj
      type: '{T}'
      description: The object to serialize
    typeParameters:
    - id: T
      description: The type of the object that is serialized
    return:
      type: System.String
      description: json text as a string
    content.vb: Public Shared Function SerializeJson(Of T)(obj As T) As String
  overload: AlgoSdk.AlgoApiSerializer.SerializeJson*
  nameWithType.vb: AlgoApiSerializer.SerializeJson(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.AlgoApiSerializer.SerializeJson(Of T)(T)
  name.vb: SerializeJson(Of T)(T)
references:
- uid: AlgoSdk
  commentId: N:AlgoSdk
  name: AlgoSdk
  nameWithType: AlgoSdk
  fullName: AlgoSdk
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AlgoSdk.ContentType
  commentId: T:AlgoSdk.ContentType
  parent: AlgoSdk
  name: ContentType
  nameWithType: ContentType
  fullName: AlgoSdk.ContentType
- uid: AlgoSdk.AlgoApiSerializer.Deserialize*
  commentId: Overload:AlgoSdk.AlgoApiSerializer.Deserialize
  name: Deserialize
  nameWithType: AlgoApiSerializer.Deserialize
  fullName: AlgoSdk.AlgoApiSerializer.Deserialize
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Unity.Collections.NativeArray{System.Byte}.ReadOnly
  commentId: T:Unity.Collections.NativeArray{System.Byte}.ReadOnly
  parent: Unity.Collections
  definition: Unity.Collections.NativeArray`1.ReadOnly
  name: NativeArray.ReadOnly<>
  nameWithType: NativeArray.ReadOnly<>
  fullName: Unity.Collections.NativeArray.ReadOnly<>
  nameWithType.vb: NativeArray.ReadOnly(Of )
  fullName.vb: Unity.Collections.NativeArray.ReadOnly(Of )
  name.vb: NativeArray.ReadOnly(Of )
  spec.csharp:
  - uid: Unity.Collections.NativeArray`1.ReadOnly
    name: NativeArray.ReadOnly
    nameWithType: NativeArray.ReadOnly
    fullName: Unity.Collections.NativeArray.ReadOnly
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Unity.Collections.NativeArray`1.ReadOnly
    name: NativeArray.ReadOnly
    nameWithType: NativeArray.ReadOnly
    fullName: Unity.Collections.NativeArray.ReadOnly
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Collections.NativeArray`1.ReadOnly
  commentId: T:Unity.Collections.NativeArray`1.ReadOnly
  isExternal: true
  name: NativeArray.ReadOnly<>
  nameWithType: NativeArray.ReadOnly<>
  fullName: Unity.Collections.NativeArray.ReadOnly<>
  nameWithType.vb: NativeArray.ReadOnly(Of )
  fullName.vb: Unity.Collections.NativeArray.ReadOnly(Of )
  name.vb: NativeArray.ReadOnly(Of )
  spec.csharp:
  - uid: Unity.Collections.NativeArray`1.ReadOnly
    name: NativeArray.ReadOnly
    nameWithType: NativeArray.ReadOnly
    fullName: Unity.Collections.NativeArray.ReadOnly
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Unity.Collections.NativeArray`1.ReadOnly
    name: NativeArray.ReadOnly
    nameWithType: NativeArray.ReadOnly
    fullName: Unity.Collections.NativeArray.ReadOnly
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Collections
  commentId: N:Unity.Collections
  name: Unity.Collections
  nameWithType: Unity.Collections
  fullName: Unity.Collections
- uid: AlgoSdk.AlgoApiSerializer.DeserializeJson*
  commentId: Overload:AlgoSdk.AlgoApiSerializer.DeserializeJson
  name: DeserializeJson
  nameWithType: AlgoApiSerializer.DeserializeJson
  fullName: AlgoSdk.AlgoApiSerializer.DeserializeJson
- uid: Unity.Collections.NativeText
  commentId: T:Unity.Collections.NativeText
  parent: Unity.Collections
  name: NativeText
  nameWithType: NativeText
  fullName: Unity.Collections.NativeText
- uid: AlgoSdk.AlgoApiSerializer.DeserializeMessagePack*
  commentId: Overload:AlgoSdk.AlgoApiSerializer.DeserializeMessagePack
  name: DeserializeMessagePack
  nameWithType: AlgoApiSerializer.DeserializeMessagePack
  fullName: AlgoSdk.AlgoApiSerializer.DeserializeMessagePack
- uid: Unity.Collections.NativeList`1
  commentId: T:Unity.Collections.NativeList`1
  name: NativeList<T>
  nameWithType: NativeList<T>
  fullName: Unity.Collections.NativeList<T>
  nameWithType.vb: NativeList(Of T)
  fullName.vb: Unity.Collections.NativeList(Of T)
  name.vb: NativeList(Of T)
  spec.csharp:
  - uid: Unity.Collections.NativeList`1
    name: NativeList
    nameWithType: NativeList
    fullName: Unity.Collections.NativeList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Unity.Collections.NativeList`1
    name: NativeList
    nameWithType: NativeList
    fullName: Unity.Collections.NativeList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.AlgoApiSerializer.SerializeMessagePack*
  commentId: Overload:AlgoSdk.AlgoApiSerializer.SerializeMessagePack
  name: SerializeMessagePack
  nameWithType: AlgoApiSerializer.SerializeMessagePack
  fullName: AlgoSdk.AlgoApiSerializer.SerializeMessagePack
- uid: Unity.Collections.Allocator
  commentId: T:Unity.Collections.Allocator
  parent: Unity.Collections
  isExternal: true
  name: Allocator
  nameWithType: Allocator
  fullName: Unity.Collections.Allocator
- uid: Unity.Collections.NativeList{System.Byte}
  commentId: T:Unity.Collections.NativeList{System.Byte}
  parent: Unity.Collections
  definition: Unity.Collections.NativeList`1
  name: NativeList<Byte>
  nameWithType: NativeList<Byte>
  fullName: Unity.Collections.NativeList<System.Byte>
  nameWithType.vb: NativeList(Of Byte)
  fullName.vb: Unity.Collections.NativeList(Of System.Byte)
  name.vb: NativeList(Of Byte)
  spec.csharp:
  - uid: Unity.Collections.NativeList`1
    name: NativeList
    nameWithType: NativeList
    fullName: Unity.Collections.NativeList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Unity.Collections.NativeList`1
    name: NativeList
    nameWithType: NativeList
    fullName: Unity.Collections.NativeList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.AlgoApiSerializer.SerializeJson*
  commentId: Overload:AlgoSdk.AlgoApiSerializer.SerializeJson
  name: SerializeJson
  nameWithType: AlgoApiSerializer.SerializeJson
  fullName: AlgoSdk.AlgoApiSerializer.SerializeJson
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
