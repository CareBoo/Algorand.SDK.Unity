### YamlMime:ManagedReference
items:
- uid: AlgoSdk.Mnemonic
  commentId: T:AlgoSdk.Mnemonic
  id: Mnemonic
  parent: AlgoSdk
  children:
  - AlgoSdk.Mnemonic.BitsPerWord
  - AlgoSdk.Mnemonic.ChecksumIndex
  - AlgoSdk.Mnemonic.Equals(AlgoSdk.Mnemonic)
  - AlgoSdk.Mnemonic.FromKey(AlgoSdk.PrivateKey)
  - AlgoSdk.Mnemonic.FromString(System.String)
  - AlgoSdk.Mnemonic.Item(System.Int32)
  - AlgoSdk.Mnemonic.Length
  - AlgoSdk.Mnemonic.op_Implicit(AlgoSdk.Mnemonic)~System.String
  - AlgoSdk.Mnemonic.op_Implicit(System.String)~AlgoSdk.Mnemonic
  - AlgoSdk.Mnemonic.ToPrivateKey
  - AlgoSdk.Mnemonic.ToString
  langs:
  - csharp
  - vb
  name: Mnemonic
  nameWithType: Mnemonic
  fullName: AlgoSdk.Mnemonic
  type: Struct
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.ShortWord.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Mnemonic
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.ShortWord.cs
    startLine: 2
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [Serializable]

      public struct Mnemonic : IEquatable<Mnemonic>
    content.vb: >-
      <Serializable>

      Public Structure Mnemonic
          Implements IEquatable(Of Mnemonic)
  implements:
  - System.IEquatable{AlgoSdk.Mnemonic}
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: AlgoSdk.Mnemonic.Length
  commentId: F:AlgoSdk.Mnemonic.Length
  id: Length
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Mnemonic.Length
  fullName: AlgoSdk.Mnemonic.Length
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Length
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 27
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public const int Length = 25
    return:
      type: System.Int32
    content.vb: Public Const Length As Integer = 25
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: AlgoSdk.Mnemonic.ChecksumIndex
  commentId: F:AlgoSdk.Mnemonic.ChecksumIndex
  id: ChecksumIndex
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: ChecksumIndex
  nameWithType: Mnemonic.ChecksumIndex
  fullName: AlgoSdk.Mnemonic.ChecksumIndex
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ChecksumIndex
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 28
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public const int ChecksumIndex = 24
    return:
      type: System.Int32
    content.vb: Public Const ChecksumIndex As Integer = 24
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: AlgoSdk.Mnemonic.BitsPerWord
  commentId: F:AlgoSdk.Mnemonic.BitsPerWord
  id: BitsPerWord
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: BitsPerWord
  nameWithType: Mnemonic.BitsPerWord
  fullName: AlgoSdk.Mnemonic.BitsPerWord
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: BitsPerWord
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 29
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public const int BitsPerWord = 11
    return:
      type: System.Int32
    content.vb: Public Const BitsPerWord As Integer = 11
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: AlgoSdk.Mnemonic.Item(System.Int32)
  commentId: P:AlgoSdk.Mnemonic.Item(System.Int32)
  id: Item(System.Int32)
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: Mnemonic.Item[Int32]
  fullName: AlgoSdk.Mnemonic.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: this[]
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 40
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public Mnemonic.Word this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: AlgoSdk.Mnemonic.Word
    content.vb: Public Property Item(index As Integer) As Mnemonic.Word
  overload: AlgoSdk.Mnemonic.Item*
  nameWithType.vb: Mnemonic.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: AlgoSdk.Mnemonic.Item(System.Int32)
  name.vb: Item(Int32)
- uid: AlgoSdk.Mnemonic.ToString
  commentId: M:AlgoSdk.Mnemonic.ToString
  id: ToString
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Mnemonic.ToString()
  fullName: AlgoSdk.Mnemonic.ToString()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToString
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 60
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: AlgoSdk.Mnemonic.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AlgoSdk.Mnemonic.ToPrivateKey
  commentId: M:AlgoSdk.Mnemonic.ToPrivateKey
  id: ToPrivateKey
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: ToPrivateKey()
  nameWithType: Mnemonic.ToPrivateKey()
  fullName: AlgoSdk.Mnemonic.ToPrivateKey()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToPrivateKey
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 68
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public PrivateKey ToPrivateKey()
    return:
      type: AlgoSdk.PrivateKey
    content.vb: Public Function ToPrivateKey As PrivateKey
  overload: AlgoSdk.Mnemonic.ToPrivateKey*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Mnemonic.Equals(AlgoSdk.Mnemonic)
  commentId: M:AlgoSdk.Mnemonic.Equals(AlgoSdk.Mnemonic)
  id: Equals(AlgoSdk.Mnemonic)
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: Equals(Mnemonic)
  nameWithType: Mnemonic.Equals(Mnemonic)
  fullName: AlgoSdk.Mnemonic.Equals(AlgoSdk.Mnemonic)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 93
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public bool Equals(Mnemonic other)
    parameters:
    - id: other
      type: AlgoSdk.Mnemonic
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Mnemonic) As Boolean
  overload: AlgoSdk.Mnemonic.Equals*
  implements:
  - System.IEquatable{AlgoSdk.Mnemonic}.Equals(AlgoSdk.Mnemonic)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Mnemonic.FromString(System.String)
  commentId: M:AlgoSdk.Mnemonic.FromString(System.String)
  id: FromString(System.String)
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: FromString(String)
  nameWithType: Mnemonic.FromString(String)
  fullName: AlgoSdk.Mnemonic.FromString(System.String)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: FromString
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 101
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static Mnemonic FromString(string mnemonicString)
    parameters:
    - id: mnemonicString
      type: System.String
    return:
      type: AlgoSdk.Mnemonic
    content.vb: Public Shared Function FromString(mnemonicString As String) As Mnemonic
  overload: AlgoSdk.Mnemonic.FromString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AlgoSdk.Mnemonic.op_Implicit(AlgoSdk.Mnemonic)~System.String
  commentId: M:AlgoSdk.Mnemonic.op_Implicit(AlgoSdk.Mnemonic)~System.String
  id: op_Implicit(AlgoSdk.Mnemonic)~System.String
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: Implicit(Mnemonic to String)
  nameWithType: Mnemonic.Implicit(Mnemonic to String)
  fullName: AlgoSdk.Mnemonic.Implicit(AlgoSdk.Mnemonic to System.String)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Implicit
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 117
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static implicit operator string (Mnemonic mnemonic)
    parameters:
    - id: mnemonic
      type: AlgoSdk.Mnemonic
    return:
      type: System.String
    content.vb: Public Shared Widening Operator CType(mnemonic As Mnemonic) As String
  overload: AlgoSdk.Mnemonic.op_Implicit*
  nameWithType.vb: Mnemonic.Widening(Mnemonic to String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Mnemonic.Widening(AlgoSdk.Mnemonic to System.String)
  name.vb: Widening(Mnemonic to String)
- uid: AlgoSdk.Mnemonic.op_Implicit(System.String)~AlgoSdk.Mnemonic
  commentId: M:AlgoSdk.Mnemonic.op_Implicit(System.String)~AlgoSdk.Mnemonic
  id: op_Implicit(System.String)~AlgoSdk.Mnemonic
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: Implicit(String to Mnemonic)
  nameWithType: Mnemonic.Implicit(String to Mnemonic)
  fullName: AlgoSdk.Mnemonic.Implicit(System.String to AlgoSdk.Mnemonic)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Implicit
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 122
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static implicit operator Mnemonic(string mnemonicString)
    parameters:
    - id: mnemonicString
      type: System.String
    return:
      type: AlgoSdk.Mnemonic
    content.vb: Public Shared Widening Operator CType(mnemonicString As String) As Mnemonic
  overload: AlgoSdk.Mnemonic.op_Implicit*
  nameWithType.vb: Mnemonic.Widening(String to Mnemonic)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Mnemonic.Widening(System.String to AlgoSdk.Mnemonic)
  name.vb: Widening(String to Mnemonic)
- uid: AlgoSdk.Mnemonic.FromKey(AlgoSdk.PrivateKey)
  commentId: M:AlgoSdk.Mnemonic.FromKey(AlgoSdk.PrivateKey)
  id: FromKey(AlgoSdk.PrivateKey)
  parent: AlgoSdk.Mnemonic
  langs:
  - csharp
  - vb
  name: FromKey(PrivateKey)
  nameWithType: Mnemonic.FromKey(PrivateKey)
  fullName: AlgoSdk.Mnemonic.FromKey(AlgoSdk.PrivateKey)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: FromKey
    path: ../CareBoo.AlgoSdk/Mnemonic/Mnemonic.cs
    startLine: 127
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static Mnemonic FromKey(PrivateKey key)
    parameters:
    - id: key
      type: AlgoSdk.PrivateKey
    return:
      type: AlgoSdk.Mnemonic
    content.vb: Public Shared Function FromKey(key As PrivateKey) As Mnemonic
  overload: AlgoSdk.Mnemonic.FromKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AlgoSdk
  commentId: N:AlgoSdk
  name: AlgoSdk
  nameWithType: AlgoSdk
  fullName: AlgoSdk
- uid: System.IEquatable{AlgoSdk.Mnemonic}
  commentId: T:System.IEquatable{AlgoSdk.Mnemonic}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Mnemonic>
  nameWithType: IEquatable<Mnemonic>
  fullName: System.IEquatable<AlgoSdk.Mnemonic>
  nameWithType.vb: IEquatable(Of Mnemonic)
  fullName.vb: System.IEquatable(Of AlgoSdk.Mnemonic)
  name.vb: IEquatable(Of Mnemonic)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AlgoSdk.Mnemonic
    name: Mnemonic
    nameWithType: Mnemonic
    fullName: AlgoSdk.Mnemonic
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AlgoSdk.Mnemonic
    name: Mnemonic
    nameWithType: Mnemonic
    fullName: AlgoSdk.Mnemonic
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AlgoSdk.Mnemonic.Item*
  commentId: Overload:AlgoSdk.Mnemonic.Item
  name: Item
  nameWithType: Mnemonic.Item
  fullName: AlgoSdk.Mnemonic.Item
- uid: AlgoSdk.Mnemonic.Word
  commentId: T:AlgoSdk.Mnemonic.Word
  parent: AlgoSdk
  name: Mnemonic.Word
  nameWithType: Mnemonic.Word
  fullName: AlgoSdk.Mnemonic.Word
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Mnemonic.ToString*
  commentId: Overload:AlgoSdk.Mnemonic.ToString
  name: ToString
  nameWithType: Mnemonic.ToString
  fullName: AlgoSdk.Mnemonic.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AlgoSdk.Mnemonic.ToPrivateKey*
  commentId: Overload:AlgoSdk.Mnemonic.ToPrivateKey
  name: ToPrivateKey
  nameWithType: Mnemonic.ToPrivateKey
  fullName: AlgoSdk.Mnemonic.ToPrivateKey
- uid: AlgoSdk.PrivateKey
  commentId: T:AlgoSdk.PrivateKey
  parent: AlgoSdk
  name: PrivateKey
  nameWithType: PrivateKey
  fullName: AlgoSdk.PrivateKey
- uid: AlgoSdk.Mnemonic.Equals*
  commentId: Overload:AlgoSdk.Mnemonic.Equals
  name: Equals
  nameWithType: Mnemonic.Equals
  fullName: AlgoSdk.Mnemonic.Equals
- uid: System.IEquatable{AlgoSdk.Mnemonic}.Equals(AlgoSdk.Mnemonic)
  commentId: M:System.IEquatable{AlgoSdk.Mnemonic}.Equals(AlgoSdk.Mnemonic)
  parent: System.IEquatable{AlgoSdk.Mnemonic}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Mnemonic)
  nameWithType: IEquatable<Mnemonic>.Equals(Mnemonic)
  fullName: System.IEquatable<AlgoSdk.Mnemonic>.Equals(AlgoSdk.Mnemonic)
  nameWithType.vb: IEquatable(Of Mnemonic).Equals(Mnemonic)
  fullName.vb: System.IEquatable(Of AlgoSdk.Mnemonic).Equals(AlgoSdk.Mnemonic)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Mnemonic>.Equals
    fullName: System.IEquatable<AlgoSdk.Mnemonic>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.Mnemonic
    name: Mnemonic
    nameWithType: Mnemonic
    fullName: AlgoSdk.Mnemonic
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Mnemonic).Equals
    fullName: System.IEquatable(Of AlgoSdk.Mnemonic).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.Mnemonic
    name: Mnemonic
    nameWithType: Mnemonic
    fullName: AlgoSdk.Mnemonic
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Mnemonic
  commentId: T:AlgoSdk.Mnemonic
  parent: AlgoSdk
  name: Mnemonic
  nameWithType: Mnemonic
  fullName: AlgoSdk.Mnemonic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Mnemonic.FromString*
  commentId: Overload:AlgoSdk.Mnemonic.FromString
  name: FromString
  nameWithType: Mnemonic.FromString
  fullName: AlgoSdk.Mnemonic.FromString
- uid: AlgoSdk.Mnemonic.op_Implicit*
  commentId: Overload:AlgoSdk.Mnemonic.op_Implicit
  name: Implicit
  nameWithType: Mnemonic.Implicit
  fullName: AlgoSdk.Mnemonic.Implicit
  nameWithType.vb: Mnemonic.Widening
  fullName.vb: AlgoSdk.Mnemonic.Widening
  name.vb: Widening
- uid: AlgoSdk.Mnemonic.FromKey*
  commentId: Overload:AlgoSdk.Mnemonic.FromKey
  name: FromKey
  nameWithType: Mnemonic.FromKey
  fullName: AlgoSdk.Mnemonic.FromKey
