### YamlMime:ManagedReference
items:
- uid: AlgoSdk.Application
  commentId: T:AlgoSdk.Application
  id: Application
  parent: AlgoSdk
  children:
  - AlgoSdk.Application.ComputeAddressFromId(System.UInt64)
  - AlgoSdk.Application.CreatedAtRound
  - AlgoSdk.Application.Deleted
  - AlgoSdk.Application.DeletedAtRound
  - AlgoSdk.Application.Equals(AlgoSdk.Application)
  - AlgoSdk.Application.GetAddress
  - AlgoSdk.Application.HashPrefix
  - AlgoSdk.Application.Id
  - AlgoSdk.Application.Params
  langs:
  - csharp
  - vb
  name: Application
  nameWithType: Application
  fullName: AlgoSdk.Application
  type: Struct
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Application
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
    startLine: 9
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: 'public struct Application : IEquatable<Application>'
    content.vb: >-
      Public Structure Application
          Implements IEquatable(Of Application)
  implements:
  - System.IEquatable{AlgoSdk.Application}
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: AlgoSdk.Application.HashPrefix
  commentId: F:AlgoSdk.Application.HashPrefix
  id: HashPrefix
  parent: AlgoSdk.Application
  langs:
  - csharp
  - vb
  name: HashPrefix
  nameWithType: Application.HashPrefix
  fullName: AlgoSdk.Application.HashPrefix
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: HashPrefix
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
    startLine: 13
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static readonly byte[] HashPrefix
    return:
      type: System.Byte[]
    content.vb: Public Shared ReadOnly HashPrefix As Byte()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AlgoSdk.Application.CreatedAtRound
  commentId: F:AlgoSdk.Application.CreatedAtRound
  id: CreatedAtRound
  parent: AlgoSdk.Application
  langs:
  - csharp
  - vb
  name: CreatedAtRound
  nameWithType: Application.CreatedAtRound
  fullName: AlgoSdk.Application.CreatedAtRound
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CreatedAtRound
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
    startLine: 16
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("created-at-round", null, false)]

      public ulong CreatedAtRound
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("created-at-round", Nothing, False)>

      Public CreatedAtRound As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: created-at-round
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Application.Deleted
  commentId: F:AlgoSdk.Application.Deleted
  id: Deleted
  parent: AlgoSdk.Application
  langs:
  - csharp
  - vb
  name: Deleted
  nameWithType: Application.Deleted
  fullName: AlgoSdk.Application.Deleted
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Deleted
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
    startLine: 19
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("deleted", null, false)]

      public Optional<bool> Deleted
    return:
      type: AlgoSdk.Optional{System.Boolean}
    content.vb: "<AlgoApiField(\"deleted\", Nothing, False)>\nPublic Deleted As "
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: deleted
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Application.DeletedAtRound
  commentId: F:AlgoSdk.Application.DeletedAtRound
  id: DeletedAtRound
  parent: AlgoSdk.Application
  langs:
  - csharp
  - vb
  name: DeletedAtRound
  nameWithType: Application.DeletedAtRound
  fullName: AlgoSdk.Application.DeletedAtRound
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: DeletedAtRound
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
    startLine: 22
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("deleted-at-round", null, false)]

      public ulong DeletedAtRound
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("deleted-at-round", Nothing, False)>

      Public DeletedAtRound As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: deleted-at-round
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Application.Id
  commentId: F:AlgoSdk.Application.Id
  id: Id
  parent: AlgoSdk.Application
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Application.Id
  fullName: AlgoSdk.Application.Id
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Id
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
    startLine: 25
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("id", null, false)]

      public ulong Id
    return:
      type: System.UInt64
    content.vb: >-
      <AlgoApiField("id", Nothing, False)>

      Public Id As ULong
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: id
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Application.Params
  commentId: F:AlgoSdk.Application.Params
  id: Params
  parent: AlgoSdk.Application
  langs:
  - csharp
  - vb
  name: Params
  nameWithType: Application.Params
  fullName: AlgoSdk.Application.Params
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Params
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
    startLine: 28
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiField("params", null, false)]

      public ApplicationParams Params
    return:
      type: AlgoSdk.ApplicationParams
    content.vb: >-
      <AlgoApiField("params", Nothing, False)>

      Public Params As ApplicationParams
  attributes:
  - type: AlgoSdk.AlgoApiField
    ctor: AlgoSdk.AlgoApiField.#ctor(System.String,System.String,System.Boolean)
    arguments:
    - type: System.String
      value: params
    - type: System.String
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Application.Equals(AlgoSdk.Application)
  commentId: M:AlgoSdk.Application.Equals(AlgoSdk.Application)
  id: Equals(AlgoSdk.Application)
  parent: AlgoSdk.Application
  langs:
  - csharp
  - vb
  name: Equals(Application)
  nameWithType: Application.Equals(Application)
  fullName: AlgoSdk.Application.Equals(AlgoSdk.Application)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
    startLine: 30
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public bool Equals(Application other)
    parameters:
    - id: other
      type: AlgoSdk.Application
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Application) As Boolean
  overload: AlgoSdk.Application.Equals*
  implements:
  - System.IEquatable{AlgoSdk.Application}.Equals(AlgoSdk.Application)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Application.GetAddress
  commentId: M:AlgoSdk.Application.GetAddress
  id: GetAddress
  parent: AlgoSdk.Application
  langs:
  - csharp
  - vb
  name: GetAddress()
  nameWithType: Application.GetAddress()
  fullName: AlgoSdk.Application.GetAddress()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: GetAddress
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
    startLine: 35
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public Optional<Address> GetAddress()
    return:
      type: AlgoSdk.Optional{AlgoSdk.Address}
    content.vb: 'Public Function GetAddress As '
  overload: AlgoSdk.Application.GetAddress*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Application.ComputeAddressFromId(System.UInt64)
  commentId: M:AlgoSdk.Application.ComputeAddressFromId(System.UInt64)
  id: ComputeAddressFromId(System.UInt64)
  parent: AlgoSdk.Application
  langs:
  - csharp
  - vb
  name: ComputeAddressFromId(UInt64)
  nameWithType: Application.ComputeAddressFromId(UInt64)
  fullName: AlgoSdk.Application.ComputeAddressFromId(System.UInt64)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ComputeAddressFromId
    path: ../CareBoo.AlgoSdk/AlgoApi/Shared/Models/Application.cs
    startLine: 41
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static Address ComputeAddressFromId(ulong appIndex)
    parameters:
    - id: appIndex
      type: System.UInt64
    return:
      type: AlgoSdk.Address
    content.vb: Public Shared Function ComputeAddressFromId(appIndex As ULong) As Address
  overload: AlgoSdk.Application.ComputeAddressFromId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AlgoSdk
  commentId: N:AlgoSdk
  name: AlgoSdk
  nameWithType: AlgoSdk
  fullName: AlgoSdk
- uid: System.IEquatable{AlgoSdk.Application}
  commentId: T:System.IEquatable{AlgoSdk.Application}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Application>
  nameWithType: IEquatable<Application>
  fullName: System.IEquatable<AlgoSdk.Application>
  nameWithType.vb: IEquatable(Of Application)
  fullName.vb: System.IEquatable(Of AlgoSdk.Application)
  name.vb: IEquatable(Of Application)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AlgoSdk.Application
    name: Application
    nameWithType: Application
    fullName: AlgoSdk.Application
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AlgoSdk.Application
    name: Application
    nameWithType: Application
    fullName: AlgoSdk.Application
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: AlgoSdk.Optional{System.Boolean}
  commentId: T:AlgoSdk.Optional{System.Boolean}
  parent: AlgoSdk
  definition: AlgoSdk.Optional`1
  name: Optional<Boolean>
  nameWithType: Optional<Boolean>
  fullName: AlgoSdk.Optional<System.Boolean>
  nameWithType.vb: Optional(Of Boolean)
  fullName.vb: AlgoSdk.Optional(Of System.Boolean)
  name.vb: Optional(Of Boolean)
  spec.csharp:
  - uid: AlgoSdk.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: AlgoSdk.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: AlgoSdk.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Optional`1
  commentId: T:AlgoSdk.Optional`1
  parent: AlgoSdk
  name: Optional<T>
  nameWithType: Optional<T>
  fullName: AlgoSdk.Optional<T>
  nameWithType.vb: Optional(Of T)
  fullName.vb: AlgoSdk.Optional(Of T)
  name.vb: Optional(Of T)
  spec.csharp:
  - uid: AlgoSdk.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: AlgoSdk.Optional
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: AlgoSdk.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.ApplicationParams
  commentId: T:AlgoSdk.ApplicationParams
  parent: AlgoSdk
  name: ApplicationParams
  nameWithType: ApplicationParams
  fullName: AlgoSdk.ApplicationParams
- uid: AlgoSdk.Application.Equals*
  commentId: Overload:AlgoSdk.Application.Equals
  name: Equals
  nameWithType: Application.Equals
  fullName: AlgoSdk.Application.Equals
- uid: System.IEquatable{AlgoSdk.Application}.Equals(AlgoSdk.Application)
  commentId: M:System.IEquatable{AlgoSdk.Application}.Equals(AlgoSdk.Application)
  parent: System.IEquatable{AlgoSdk.Application}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Application)
  nameWithType: IEquatable<Application>.Equals(Application)
  fullName: System.IEquatable<AlgoSdk.Application>.Equals(AlgoSdk.Application)
  nameWithType.vb: IEquatable(Of Application).Equals(Application)
  fullName.vb: System.IEquatable(Of AlgoSdk.Application).Equals(AlgoSdk.Application)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Application>.Equals
    fullName: System.IEquatable<AlgoSdk.Application>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.Application
    name: Application
    nameWithType: Application
    fullName: AlgoSdk.Application
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Application).Equals
    fullName: System.IEquatable(Of AlgoSdk.Application).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.Application
    name: Application
    nameWithType: Application
    fullName: AlgoSdk.Application
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Application
  commentId: T:AlgoSdk.Application
  parent: AlgoSdk
  name: Application
  nameWithType: Application
  fullName: AlgoSdk.Application
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Application.GetAddress*
  commentId: Overload:AlgoSdk.Application.GetAddress
  name: GetAddress
  nameWithType: Application.GetAddress
  fullName: AlgoSdk.Application.GetAddress
- uid: AlgoSdk.Optional{AlgoSdk.Address}
  commentId: T:AlgoSdk.Optional{AlgoSdk.Address}
  parent: AlgoSdk
  definition: AlgoSdk.Optional`1
  name: Optional<Address>
  nameWithType: Optional<Address>
  fullName: AlgoSdk.Optional<AlgoSdk.Address>
  nameWithType.vb: Optional(Of Address)
  fullName.vb: AlgoSdk.Optional(Of AlgoSdk.Address)
  name.vb: Optional(Of Address)
  spec.csharp:
  - uid: AlgoSdk.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: AlgoSdk.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: AlgoSdk.Address
    name: Address
    nameWithType: Address
    fullName: AlgoSdk.Address
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: AlgoSdk.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AlgoSdk.Address
    name: Address
    nameWithType: Address
    fullName: AlgoSdk.Address
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Application.ComputeAddressFromId*
  commentId: Overload:AlgoSdk.Application.ComputeAddressFromId
  name: ComputeAddressFromId
  nameWithType: Application.ComputeAddressFromId
  fullName: AlgoSdk.Application.ComputeAddressFromId
- uid: AlgoSdk.Address
  commentId: T:AlgoSdk.Address
  parent: AlgoSdk
  name: Address
  nameWithType: Address
  fullName: AlgoSdk.Address
