### YamlMime:ManagedReference
items:
- uid: AlgoSdk.Crypto.Ed25519.PublicKey
  commentId: T:AlgoSdk.Crypto.Ed25519.PublicKey
  id: Ed25519.PublicKey
  parent: AlgoSdk.Crypto
  children:
  - AlgoSdk.Crypto.Ed25519.PublicKey.Equals(AlgoSdk.Crypto.Ed25519.PublicKey)
  - AlgoSdk.Crypto.Ed25519.PublicKey.Equals(System.Object)
  - AlgoSdk.Crypto.Ed25519.PublicKey.GetHashCode
  - AlgoSdk.Crypto.Ed25519.PublicKey.GetUnsafePtr
  - AlgoSdk.Crypto.Ed25519.PublicKey.Item(System.Int32)
  - AlgoSdk.Crypto.Ed25519.PublicKey.Length
  - AlgoSdk.Crypto.Ed25519.PublicKey.op_Equality(AlgoSdk.Crypto.Ed25519.PublicKey@,AlgoSdk.Crypto.Ed25519.PublicKey@)
  - AlgoSdk.Crypto.Ed25519.PublicKey.op_Inequality(AlgoSdk.Crypto.Ed25519.PublicKey@,AlgoSdk.Crypto.Ed25519.PublicKey@)
  - AlgoSdk.Crypto.Ed25519.PublicKey.SizeBytes
  langs:
  - csharp
  - vb
  name: Ed25519.PublicKey
  nameWithType: Ed25519.PublicKey
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey
  type: Struct
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.Crypto/Ed25519.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: PublicKey
    path: ../CareBoo.AlgoSdk.Crypto/Ed25519.cs
    startLine: 139
  assemblies:
  - CareBoo.AlgoSdk.Crypto
  namespace: AlgoSdk.Crypto
  syntax:
    content: 'public struct PublicKey : IByteArray, IContiguousArray<byte>, IArray<byte>, IEquatable<Ed25519.PublicKey>'
    content.vb: >-
      Public Structure PublicKey
          Implements IByteArray, IContiguousArray(Of Byte), IArray(Of Byte), IEquatable(Of Ed25519.PublicKey)
  implements:
  - AlgoSdk.LowLevel.IByteArray
  - AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  - AlgoSdk.LowLevel.IArray{System.Byte}
  - System.IEquatable{AlgoSdk.Crypto.Ed25519.PublicKey}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - AlgoSdk.Crypto.Ed25519.PublicKey.AlgoSdk.Base64Encoding.CopyToBase64``2({T}@)
  - AlgoSdk.Crypto.Ed25519.PublicKey.AlgoSdk.Base64Encoding.CopyFromBase64``2({T}@,System.Int32)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.SizeBytes
  commentId: F:AlgoSdk.Crypto.Ed25519.PublicKey.SizeBytes
  id: SizeBytes
  parent: AlgoSdk.Crypto.Ed25519.PublicKey
  langs:
  - csharp
  - vb
  name: SizeBytes
  nameWithType: Ed25519.PublicKey.SizeBytes
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.SizeBytes
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.Crypto/Ed25519.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: SizeBytes
    path: ../CareBoo.AlgoSdk.Crypto/Ed25519.cs
    startLine: 147
  assemblies:
  - CareBoo.AlgoSdk.Crypto
  namespace: AlgoSdk.Crypto
  syntax:
    content: public const int SizeBytes = 32
    return:
      type: System.Int32
    content.vb: Public Const SizeBytes As Integer = 32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.GetUnsafePtr
  commentId: M:AlgoSdk.Crypto.Ed25519.PublicKey.GetUnsafePtr
  id: GetUnsafePtr
  parent: AlgoSdk.Crypto.Ed25519.PublicKey
  langs:
  - csharp
  - vb
  name: GetUnsafePtr()
  nameWithType: Ed25519.PublicKey.GetUnsafePtr()
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.GetUnsafePtr()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.Crypto/Ed25519.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: GetUnsafePtr
    path: ../CareBoo.AlgoSdk.Crypto/Ed25519.cs
    startLine: 149
  assemblies:
  - CareBoo.AlgoSdk.Crypto
  namespace: AlgoSdk.Crypto
  syntax:
    content: public void *GetUnsafePtr()
    return:
      type: System.Void*
    content.vb: 'Public Function GetUnsafePtr As '
  overload: AlgoSdk.Crypto.Ed25519.PublicKey.GetUnsafePtr*
  implements:
  - AlgoSdk.LowLevel.IContiguousArray{System.Byte}.GetUnsafePtr
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.Length
  commentId: P:AlgoSdk.Crypto.Ed25519.PublicKey.Length
  id: Length
  parent: AlgoSdk.Crypto.Ed25519.PublicKey
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Ed25519.PublicKey.Length
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Length
  type: Property
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.Crypto/Ed25519.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Length
    path: ../CareBoo.AlgoSdk.Crypto/Ed25519.cs
    startLine: 155
  assemblies:
  - CareBoo.AlgoSdk.Crypto
  namespace: AlgoSdk.Crypto
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: AlgoSdk.Crypto.Ed25519.PublicKey.Length*
  implements:
  - AlgoSdk.LowLevel.IArray{System.Byte}.Length
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.Item(System.Int32)
  commentId: P:AlgoSdk.Crypto.Ed25519.PublicKey.Item(System.Int32)
  id: Item(System.Int32)
  parent: AlgoSdk.Crypto.Ed25519.PublicKey
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: Ed25519.PublicKey.Item[Int32]
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.Crypto/Ed25519.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: this[]
    path: ../CareBoo.AlgoSdk.Crypto/Ed25519.cs
    startLine: 157
  assemblies:
  - CareBoo.AlgoSdk.Crypto
  namespace: AlgoSdk.Crypto
  syntax:
    content: public byte this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Byte
    content.vb: Public Property Item(index As Integer) As Byte
  overload: AlgoSdk.Crypto.Ed25519.PublicKey.Item*
  implements:
  - AlgoSdk.LowLevel.IArray{System.Byte}.Item(System.Int32)
  nameWithType.vb: Ed25519.PublicKey.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: AlgoSdk.Crypto.Ed25519.PublicKey.Item(System.Int32)
  name.vb: Item(Int32)
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.Equals(AlgoSdk.Crypto.Ed25519.PublicKey)
  commentId: M:AlgoSdk.Crypto.Ed25519.PublicKey.Equals(AlgoSdk.Crypto.Ed25519.PublicKey)
  id: Equals(AlgoSdk.Crypto.Ed25519.PublicKey)
  parent: AlgoSdk.Crypto.Ed25519.PublicKey
  langs:
  - csharp
  - vb
  name: Equals(Ed25519.PublicKey)
  nameWithType: Ed25519.PublicKey.Equals(Ed25519.PublicKey)
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Equals(AlgoSdk.Crypto.Ed25519.PublicKey)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.Crypto/Ed25519.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk.Crypto/Ed25519.cs
    startLine: 163
  assemblies:
  - CareBoo.AlgoSdk.Crypto
  namespace: AlgoSdk.Crypto
  syntax:
    content: public bool Equals(Ed25519.PublicKey other)
    parameters:
    - id: other
      type: AlgoSdk.Crypto.Ed25519.PublicKey
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Ed25519.PublicKey) As Boolean
  overload: AlgoSdk.Crypto.Ed25519.PublicKey.Equals*
  implements:
  - System.IEquatable{AlgoSdk.Crypto.Ed25519.PublicKey}.Equals(AlgoSdk.Crypto.Ed25519.PublicKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.Equals(System.Object)
  commentId: M:AlgoSdk.Crypto.Ed25519.PublicKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: AlgoSdk.Crypto.Ed25519.PublicKey
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Ed25519.PublicKey.Equals(Object)
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.Crypto/Ed25519.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk.Crypto/Ed25519.cs
    startLine: 171
  assemblies:
  - CareBoo.AlgoSdk.Crypto
  namespace: AlgoSdk.Crypto
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: AlgoSdk.Crypto.Ed25519.PublicKey.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.GetHashCode
  commentId: M:AlgoSdk.Crypto.Ed25519.PublicKey.GetHashCode
  id: GetHashCode
  parent: AlgoSdk.Crypto.Ed25519.PublicKey
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Ed25519.PublicKey.GetHashCode()
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.GetHashCode()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.Crypto/Ed25519.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: GetHashCode
    path: ../CareBoo.AlgoSdk.Crypto/Ed25519.cs
    startLine: 176
  assemblies:
  - CareBoo.AlgoSdk.Crypto
  namespace: AlgoSdk.Crypto
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: AlgoSdk.Crypto.Ed25519.PublicKey.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.op_Equality(AlgoSdk.Crypto.Ed25519.PublicKey@,AlgoSdk.Crypto.Ed25519.PublicKey@)
  commentId: M:AlgoSdk.Crypto.Ed25519.PublicKey.op_Equality(AlgoSdk.Crypto.Ed25519.PublicKey@,AlgoSdk.Crypto.Ed25519.PublicKey@)
  id: op_Equality(AlgoSdk.Crypto.Ed25519.PublicKey@,AlgoSdk.Crypto.Ed25519.PublicKey@)
  parent: AlgoSdk.Crypto.Ed25519.PublicKey
  langs:
  - csharp
  - vb
  name: Equality(Ed25519.PublicKey, Ed25519.PublicKey)
  nameWithType: Ed25519.PublicKey.Equality(Ed25519.PublicKey, Ed25519.PublicKey)
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Equality(AlgoSdk.Crypto.Ed25519.PublicKey, AlgoSdk.Crypto.Ed25519.PublicKey)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.Crypto/Ed25519.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Equality
    path: ../CareBoo.AlgoSdk.Crypto/Ed25519.cs
    startLine: 181
  assemblies:
  - CareBoo.AlgoSdk.Crypto
  namespace: AlgoSdk.Crypto
  syntax:
    content: public static bool operator ==(in Ed25519.PublicKey x, in Ed25519.PublicKey y)
    parameters:
    - id: x
      type: AlgoSdk.Crypto.Ed25519.PublicKey
    - id: y
      type: AlgoSdk.Crypto.Ed25519.PublicKey
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(ByRef x As Ed25519.PublicKey, ByRef y As Ed25519.PublicKey) As Boolean
  overload: AlgoSdk.Crypto.Ed25519.PublicKey.op_Equality*
  nameWithType.vb: Ed25519.PublicKey.Equality(ByRef Ed25519.PublicKey, ByRef Ed25519.PublicKey)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Crypto.Ed25519.PublicKey.Equality(ByRef AlgoSdk.Crypto.Ed25519.PublicKey, ByRef AlgoSdk.Crypto.Ed25519.PublicKey)
  name.vb: Equality(ByRef Ed25519.PublicKey, ByRef Ed25519.PublicKey)
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.op_Inequality(AlgoSdk.Crypto.Ed25519.PublicKey@,AlgoSdk.Crypto.Ed25519.PublicKey@)
  commentId: M:AlgoSdk.Crypto.Ed25519.PublicKey.op_Inequality(AlgoSdk.Crypto.Ed25519.PublicKey@,AlgoSdk.Crypto.Ed25519.PublicKey@)
  id: op_Inequality(AlgoSdk.Crypto.Ed25519.PublicKey@,AlgoSdk.Crypto.Ed25519.PublicKey@)
  parent: AlgoSdk.Crypto.Ed25519.PublicKey
  langs:
  - csharp
  - vb
  name: Inequality(Ed25519.PublicKey, Ed25519.PublicKey)
  nameWithType: Ed25519.PublicKey.Inequality(Ed25519.PublicKey, Ed25519.PublicKey)
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Inequality(AlgoSdk.Crypto.Ed25519.PublicKey, AlgoSdk.Crypto.Ed25519.PublicKey)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk.Crypto/Ed25519.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Inequality
    path: ../CareBoo.AlgoSdk.Crypto/Ed25519.cs
    startLine: 186
  assemblies:
  - CareBoo.AlgoSdk.Crypto
  namespace: AlgoSdk.Crypto
  syntax:
    content: public static bool operator !=(in Ed25519.PublicKey x, in Ed25519.PublicKey y)
    parameters:
    - id: x
      type: AlgoSdk.Crypto.Ed25519.PublicKey
    - id: y
      type: AlgoSdk.Crypto.Ed25519.PublicKey
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(ByRef x As Ed25519.PublicKey, ByRef y As Ed25519.PublicKey) As Boolean
  overload: AlgoSdk.Crypto.Ed25519.PublicKey.op_Inequality*
  nameWithType.vb: Ed25519.PublicKey.Inequality(ByRef Ed25519.PublicKey, ByRef Ed25519.PublicKey)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Crypto.Ed25519.PublicKey.Inequality(ByRef AlgoSdk.Crypto.Ed25519.PublicKey, ByRef AlgoSdk.Crypto.Ed25519.PublicKey)
  name.vb: Inequality(ByRef Ed25519.PublicKey, ByRef Ed25519.PublicKey)
references:
- uid: AlgoSdk.Crypto
  commentId: N:AlgoSdk.Crypto
  name: AlgoSdk.Crypto
  nameWithType: AlgoSdk.Crypto
  fullName: AlgoSdk.Crypto
- uid: AlgoSdk.LowLevel.IByteArray
  commentId: T:AlgoSdk.LowLevel.IByteArray
  parent: AlgoSdk.LowLevel
  name: IByteArray
  nameWithType: IByteArray
  fullName: AlgoSdk.LowLevel.IByteArray
- uid: AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  commentId: T:AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  parent: AlgoSdk.LowLevel
  definition: AlgoSdk.LowLevel.IContiguousArray`1
  name: IContiguousArray<Byte>
  nameWithType: IContiguousArray<Byte>
  fullName: AlgoSdk.LowLevel.IContiguousArray<System.Byte>
  nameWithType.vb: IContiguousArray(Of Byte)
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of System.Byte)
  name.vb: IContiguousArray(Of Byte)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.LowLevel.IArray{System.Byte}
  commentId: T:AlgoSdk.LowLevel.IArray{System.Byte}
  parent: AlgoSdk.LowLevel
  definition: AlgoSdk.LowLevel.IArray`1
  name: IArray<Byte>
  nameWithType: IArray<Byte>
  fullName: AlgoSdk.LowLevel.IArray<System.Byte>
  nameWithType.vb: IArray(Of Byte)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of System.Byte)
  name.vb: IArray(Of Byte)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{AlgoSdk.Crypto.Ed25519.PublicKey}
  commentId: T:System.IEquatable{AlgoSdk.Crypto.Ed25519.PublicKey}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Ed25519.PublicKey>
  nameWithType: IEquatable<Ed25519.PublicKey>
  fullName: System.IEquatable<AlgoSdk.Crypto.Ed25519.PublicKey>
  nameWithType.vb: IEquatable(Of Ed25519.PublicKey)
  fullName.vb: System.IEquatable(Of AlgoSdk.Crypto.Ed25519.PublicKey)
  name.vb: IEquatable(Of Ed25519.PublicKey)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AlgoSdk.Crypto.Ed25519.PublicKey
    name: Ed25519.PublicKey
    nameWithType: Ed25519.PublicKey
    fullName: AlgoSdk.Crypto.Ed25519.PublicKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AlgoSdk.Crypto.Ed25519.PublicKey
    name: Ed25519.PublicKey
    nameWithType: Ed25519.PublicKey
    fullName: AlgoSdk.Crypto.Ed25519.PublicKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.AlgoSdk.Base64Encoding.CopyToBase64``2({T}@)
  commentId: M:AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  parent: AlgoSdk.Base64Encoding
  definition: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  name: CopyToBase64<Ed25519.PublicKey, T>(T)
  nameWithType: Base64Encoding.CopyToBase64<Ed25519.PublicKey, T>(T)
  fullName: AlgoSdk.Base64Encoding.CopyToBase64<AlgoSdk.Crypto.Ed25519.PublicKey, T>(T)
  nameWithType.vb: Base64Encoding.CopyToBase64(Of Ed25519.PublicKey, T)(T)
  fullName.vb: AlgoSdk.Base64Encoding.CopyToBase64(Of AlgoSdk.Crypto.Ed25519.PublicKey, T)(T)
  name.vb: CopyToBase64(Of Ed25519.PublicKey, T)(T)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``1@)
    name: CopyToBase64<Ed25519.PublicKey, T>
    nameWithType: Base64Encoding.CopyToBase64<Ed25519.PublicKey, T>
    fullName: AlgoSdk.Base64Encoding.CopyToBase64<AlgoSdk.Crypto.Ed25519.PublicKey, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``1@)
    name: CopyToBase64(Of Ed25519.PublicKey, T)
    nameWithType: Base64Encoding.CopyToBase64(Of Ed25519.PublicKey, T)
    fullName: AlgoSdk.Base64Encoding.CopyToBase64(Of AlgoSdk.Crypto.Ed25519.PublicKey, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.AlgoSdk.Base64Encoding.CopyFromBase64``2({T}@,System.Int32)
  commentId: M:AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  parent: AlgoSdk.Base64Encoding
  definition: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  name: CopyFromBase64<Ed25519.PublicKey, T>(T, Int32)
  nameWithType: Base64Encoding.CopyFromBase64<Ed25519.PublicKey, T>(T, Int32)
  fullName: AlgoSdk.Base64Encoding.CopyFromBase64<AlgoSdk.Crypto.Ed25519.PublicKey, T>(T, System.Int32)
  nameWithType.vb: Base64Encoding.CopyFromBase64(Of Ed25519.PublicKey, T)(T, Int32)
  fullName.vb: AlgoSdk.Base64Encoding.CopyFromBase64(Of AlgoSdk.Crypto.Ed25519.PublicKey, T)(T, System.Int32)
  name.vb: CopyFromBase64(Of Ed25519.PublicKey, T)(T, Int32)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``1@,System.Int32)
    name: CopyFromBase64<Ed25519.PublicKey, T>
    nameWithType: Base64Encoding.CopyFromBase64<Ed25519.PublicKey, T>
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64<AlgoSdk.Crypto.Ed25519.PublicKey, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``1@,System.Int32)
    name: CopyFromBase64(Of Ed25519.PublicKey, T)
    nameWithType: Base64Encoding.CopyFromBase64(Of Ed25519.PublicKey, T)
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64(Of AlgoSdk.Crypto.Ed25519.PublicKey, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.LowLevel
  commentId: N:AlgoSdk.LowLevel
  name: AlgoSdk.LowLevel
  nameWithType: AlgoSdk.LowLevel
  fullName: AlgoSdk.LowLevel
- uid: AlgoSdk.LowLevel.IContiguousArray`1
  commentId: T:AlgoSdk.LowLevel.IContiguousArray`1
  name: IContiguousArray<T>
  nameWithType: IContiguousArray<T>
  fullName: AlgoSdk.LowLevel.IContiguousArray<T>
  nameWithType.vb: IContiguousArray(Of T)
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of T)
  name.vb: IContiguousArray(Of T)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.LowLevel.IArray`1
  commentId: T:AlgoSdk.LowLevel.IArray`1
  name: IArray<T>
  nameWithType: IArray<T>
  fullName: AlgoSdk.LowLevel.IArray<T>
  nameWithType.vb: IArray(Of T)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of T)
  name.vb: IArray(Of T)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  commentId: M:AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  name: CopyToBase64<TBytes, T>(TBytes, T)
  nameWithType: Base64Encoding.CopyToBase64<TBytes, T>(TBytes, T)
  fullName: AlgoSdk.Base64Encoding.CopyToBase64<TBytes, T>(TBytes, T)
  nameWithType.vb: Base64Encoding.CopyToBase64(Of TBytes, T)(TBytes, T)
  fullName.vb: AlgoSdk.Base64Encoding.CopyToBase64(Of TBytes, T)(TBytes, T)
  name.vb: CopyToBase64(Of TBytes, T)(TBytes, T)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
    name: CopyToBase64<TBytes, T>
    nameWithType: Base64Encoding.CopyToBase64<TBytes, T>
    fullName: AlgoSdk.Base64Encoding.CopyToBase64<TBytes, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TBytes
    nameWithType: TBytes
    fullName: TBytes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
    name: CopyToBase64(Of TBytes, T)
    nameWithType: Base64Encoding.CopyToBase64(Of TBytes, T)
    fullName: AlgoSdk.Base64Encoding.CopyToBase64(Of TBytes, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TBytes
    nameWithType: TBytes
    fullName: TBytes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Base64Encoding
  commentId: T:AlgoSdk.Base64Encoding
  parent: AlgoSdk
  name: Base64Encoding
  nameWithType: Base64Encoding
  fullName: AlgoSdk.Base64Encoding
- uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  commentId: M:AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  isExternal: true
  name: CopyFromBase64<TByteArray, T>(TByteArray, T, Int32)
  nameWithType: Base64Encoding.CopyFromBase64<TByteArray, T>(TByteArray, T, Int32)
  fullName: AlgoSdk.Base64Encoding.CopyFromBase64<TByteArray, T>(TByteArray, T, System.Int32)
  nameWithType.vb: Base64Encoding.CopyFromBase64(Of TByteArray, T)(TByteArray, T, Int32)
  fullName.vb: AlgoSdk.Base64Encoding.CopyFromBase64(Of TByteArray, T)(TByteArray, T, System.Int32)
  name.vb: CopyFromBase64(Of TByteArray, T)(TByteArray, T, Int32)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
    name: CopyFromBase64<TByteArray, T>
    nameWithType: Base64Encoding.CopyFromBase64<TByteArray, T>
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64<TByteArray, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TByteArray
    nameWithType: TByteArray
    fullName: TByteArray
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
    name: CopyFromBase64(Of TByteArray, T)
    nameWithType: Base64Encoding.CopyFromBase64(Of TByteArray, T)
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64(Of TByteArray, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TByteArray
    nameWithType: TByteArray
    fullName: TByteArray
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk
  commentId: N:AlgoSdk
  name: AlgoSdk
  nameWithType: AlgoSdk
  fullName: AlgoSdk
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.GetUnsafePtr*
  commentId: Overload:AlgoSdk.Crypto.Ed25519.PublicKey.GetUnsafePtr
  name: GetUnsafePtr
  nameWithType: Ed25519.PublicKey.GetUnsafePtr
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.GetUnsafePtr
- uid: AlgoSdk.LowLevel.IContiguousArray{System.Byte}.GetUnsafePtr
  commentId: M:AlgoSdk.LowLevel.IContiguousArray{System.Byte}.GetUnsafePtr
  parent: AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  definition: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
  name: GetUnsafePtr()
  nameWithType: IContiguousArray<Byte>.GetUnsafePtr()
  fullName: AlgoSdk.LowLevel.IContiguousArray<System.Byte>.GetUnsafePtr()
  nameWithType.vb: IContiguousArray(Of Byte).GetUnsafePtr()
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of System.Byte).GetUnsafePtr()
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray<Byte>.GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray<System.Byte>.GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray(Of Byte).GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray(Of System.Byte).GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Void*
  isExternal: true
  name: Void*
  nameWithType: Void*
  fullName: System.Void*
  spec.csharp:
  - uid: System.Void
    name: Void
    nameWithType: Void
    fullName: System.Void
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    nameWithType: Void
    fullName: System.Void
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
  commentId: M:AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
  name: GetUnsafePtr()
  nameWithType: IContiguousArray<T>.GetUnsafePtr()
  fullName: AlgoSdk.LowLevel.IContiguousArray<T>.GetUnsafePtr()
  nameWithType.vb: IContiguousArray(Of T).GetUnsafePtr()
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of T).GetUnsafePtr()
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray<T>.GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray<T>.GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray(Of T).GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray(Of T).GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.Length*
  commentId: Overload:AlgoSdk.Crypto.Ed25519.PublicKey.Length
  name: Length
  nameWithType: Ed25519.PublicKey.Length
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Length
- uid: AlgoSdk.LowLevel.IArray{System.Byte}.Length
  commentId: P:AlgoSdk.LowLevel.IArray{System.Byte}.Length
  parent: AlgoSdk.LowLevel.IArray{System.Byte}
  definition: AlgoSdk.LowLevel.IArray`1.Length
  name: Length
  nameWithType: IArray<Byte>.Length
  fullName: AlgoSdk.LowLevel.IArray<System.Byte>.Length
  nameWithType.vb: IArray(Of Byte).Length
  fullName.vb: AlgoSdk.LowLevel.IArray(Of System.Byte).Length
- uid: AlgoSdk.LowLevel.IArray`1.Length
  commentId: P:AlgoSdk.LowLevel.IArray`1.Length
  name: Length
  nameWithType: IArray<T>.Length
  fullName: AlgoSdk.LowLevel.IArray<T>.Length
  nameWithType.vb: IArray(Of T).Length
  fullName.vb: AlgoSdk.LowLevel.IArray(Of T).Length
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.Item*
  commentId: Overload:AlgoSdk.Crypto.Ed25519.PublicKey.Item
  name: Item
  nameWithType: Ed25519.PublicKey.Item
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Item
- uid: AlgoSdk.LowLevel.IArray{System.Byte}.Item(System.Int32)
  commentId: P:AlgoSdk.LowLevel.IArray{System.Byte}.Item(System.Int32)
  parent: AlgoSdk.LowLevel.IArray{System.Byte}
  definition: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IArray<Byte>.Item[Int32]
  fullName: AlgoSdk.LowLevel.IArray<System.Byte>.Item[System.Int32]
  nameWithType.vb: IArray(Of Byte).Item(Int32)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of System.Byte).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray<Byte>.Item
    fullName: AlgoSdk.LowLevel.IArray<System.Byte>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray(Of Byte).Item
    fullName: AlgoSdk.LowLevel.IArray(Of System.Byte).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
  commentId: P:AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IArray<T>.Item[Int32]
  fullName: AlgoSdk.LowLevel.IArray<T>.Item[System.Int32]
  nameWithType.vb: IArray(Of T).Item(Int32)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray<T>.Item
    fullName: AlgoSdk.LowLevel.IArray<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray(Of T).Item
    fullName: AlgoSdk.LowLevel.IArray(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.Equals*
  commentId: Overload:AlgoSdk.Crypto.Ed25519.PublicKey.Equals
  name: Equals
  nameWithType: Ed25519.PublicKey.Equals
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Equals
- uid: System.IEquatable{AlgoSdk.Crypto.Ed25519.PublicKey}.Equals(AlgoSdk.Crypto.Ed25519.PublicKey)
  commentId: M:System.IEquatable{AlgoSdk.Crypto.Ed25519.PublicKey}.Equals(AlgoSdk.Crypto.Ed25519.PublicKey)
  parent: System.IEquatable{AlgoSdk.Crypto.Ed25519.PublicKey}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Ed25519.PublicKey)
  nameWithType: IEquatable<Ed25519.PublicKey>.Equals(Ed25519.PublicKey)
  fullName: System.IEquatable<AlgoSdk.Crypto.Ed25519.PublicKey>.Equals(AlgoSdk.Crypto.Ed25519.PublicKey)
  nameWithType.vb: IEquatable(Of Ed25519.PublicKey).Equals(Ed25519.PublicKey)
  fullName.vb: System.IEquatable(Of AlgoSdk.Crypto.Ed25519.PublicKey).Equals(AlgoSdk.Crypto.Ed25519.PublicKey)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Ed25519.PublicKey>.Equals
    fullName: System.IEquatable<AlgoSdk.Crypto.Ed25519.PublicKey>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.Crypto.Ed25519.PublicKey
    name: Ed25519.PublicKey
    nameWithType: Ed25519.PublicKey
    fullName: AlgoSdk.Crypto.Ed25519.PublicKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Ed25519.PublicKey).Equals
    fullName: System.IEquatable(Of AlgoSdk.Crypto.Ed25519.PublicKey).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.Crypto.Ed25519.PublicKey
    name: Ed25519.PublicKey
    nameWithType: Ed25519.PublicKey
    fullName: AlgoSdk.Crypto.Ed25519.PublicKey
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Crypto.Ed25519.PublicKey
  commentId: T:AlgoSdk.Crypto.Ed25519.PublicKey
  parent: AlgoSdk.Crypto
  name: Ed25519.PublicKey
  nameWithType: Ed25519.PublicKey
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.GetHashCode*
  commentId: Overload:AlgoSdk.Crypto.Ed25519.PublicKey.GetHashCode
  name: GetHashCode
  nameWithType: Ed25519.PublicKey.GetHashCode
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.GetHashCode
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.op_Equality*
  commentId: Overload:AlgoSdk.Crypto.Ed25519.PublicKey.op_Equality
  name: Equality
  nameWithType: Ed25519.PublicKey.Equality
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Equality
- uid: AlgoSdk.Crypto.Ed25519.PublicKey.op_Inequality*
  commentId: Overload:AlgoSdk.Crypto.Ed25519.PublicKey.op_Inequality
  name: Inequality
  nameWithType: Ed25519.PublicKey.Inequality
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey.Inequality
