### YamlMime:ManagedReference
items:
- uid: AlgoSdk.Address
  commentId: T:AlgoSdk.Address
  id: Address
  parent: AlgoSdk
  children:
  - AlgoSdk.Address.Empty
  - AlgoSdk.Address.Equals(AlgoSdk.Address)
  - AlgoSdk.Address.Equals(System.Object)
  - AlgoSdk.Address.FromPublicKey(AlgoSdk.Crypto.Ed25519.PublicKey)
  - AlgoSdk.Address.FromString(System.String)
  - AlgoSdk.Address.FromString``1(``0)
  - AlgoSdk.Address.GetHashCode
  - AlgoSdk.Address.GetUnsafePtr
  - AlgoSdk.Address.Item(System.Int32)
  - AlgoSdk.Address.Length
  - AlgoSdk.Address.op_Equality(AlgoSdk.Address@,AlgoSdk.Address@)
  - AlgoSdk.Address.op_Implicit(AlgoSdk.Address)~AlgoSdk.Crypto.Ed25519.PublicKey
  - AlgoSdk.Address.op_Implicit(AlgoSdk.Crypto.Ed25519.PublicKey)~AlgoSdk.Address
  - AlgoSdk.Address.op_Implicit(System.String)~AlgoSdk.Address
  - AlgoSdk.Address.op_Inequality(AlgoSdk.Address@,AlgoSdk.Address@)
  - AlgoSdk.Address.SizeBytes
  - AlgoSdk.Address.ToFixedString
  - AlgoSdk.Address.ToPublicKey
  - AlgoSdk.Address.ToString
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: Address
  fullName: AlgoSdk.Address
  type: Struct
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Address
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 10
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      [AlgoApiFormatter(typeof(AddressFormatter), "C:\\Users\\jason\\Projects\\CareBoo\\Unity.AlgoSdk\\Packages\\com.careboo.unity-algorand-sdk\\CareBoo.AlgoSdk\\Address.cs", 11)]

      public struct Address : IByteArray, IContiguousArray<byte>, IArray<byte>, IEquatable<Address>
    content.vb: >-
      <AlgoApiFormatter(GetType(AddressFormatter), "C:\Users\jason\Projects\CareBoo\Unity.AlgoSdk\Packages\com.careboo.unity-algorand-sdk\CareBoo.AlgoSdk\Address.cs", 11)>

      Public Structure Address
          Implements IByteArray, IContiguousArray(Of Byte), IArray(Of Byte), IEquatable(Of Address)
  implements:
  - AlgoSdk.LowLevel.IByteArray
  - AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  - AlgoSdk.LowLevel.IArray{System.Byte}
  - System.IEquatable{AlgoSdk.Address}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - AlgoSdk.Address.AlgoSdk.Base64Encoding.CopyToBase64``2({T}@)
  - AlgoSdk.Address.AlgoSdk.Base64Encoding.CopyFromBase64``2({T}@,System.Int32)
  attributes:
  - type: AlgoSdk.AlgoApiFormatterAttribute
    ctor: AlgoSdk.AlgoApiFormatterAttribute.#ctor(System.Type,System.String,System.Int32)
    arguments:
    - type: System.Type
      value: AlgoSdk.Formatters.AddressFormatter
    - type: System.String
      value: C:\Users\jason\Projects\CareBoo\Unity.AlgoSdk\Packages\com.careboo.unity-algorand-sdk\CareBoo.AlgoSdk\Address.cs
    - type: System.Int32
      value: 11
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: AlgoSdk.Address.SizeBytes
  commentId: F:AlgoSdk.Address.SizeBytes
  id: SizeBytes
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: SizeBytes
  nameWithType: Address.SizeBytes
  fullName: AlgoSdk.Address.SizeBytes
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: SizeBytes
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 16
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public const int SizeBytes = 32
    return:
      type: System.Int32
    content.vb: Public Const SizeBytes As Integer = 32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: AlgoSdk.Address.Empty
  commentId: F:AlgoSdk.Address.Empty
  id: Empty
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: Address.Empty
  fullName: AlgoSdk.Address.Empty
  type: Field
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Empty
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 18
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static readonly Address Empty
    return:
      type: AlgoSdk.Address
    content.vb: Public Shared ReadOnly Empty As Address
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AlgoSdk.Address.GetUnsafePtr
  commentId: M:AlgoSdk.Address.GetUnsafePtr
  id: GetUnsafePtr
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: GetUnsafePtr()
  nameWithType: Address.GetUnsafePtr()
  fullName: AlgoSdk.Address.GetUnsafePtr()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: GetUnsafePtr
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 23
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public void *GetUnsafePtr()
    return:
      type: System.Void*
    content.vb: 'Public Function GetUnsafePtr As '
  overload: AlgoSdk.Address.GetUnsafePtr*
  implements:
  - AlgoSdk.LowLevel.IContiguousArray{System.Byte}.GetUnsafePtr
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Address.Length
  commentId: P:AlgoSdk.Address.Length
  id: Length
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Address.Length
  fullName: AlgoSdk.Address.Length
  type: Property
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Length
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 29
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: AlgoSdk.Address.Length*
  implements:
  - AlgoSdk.LowLevel.IArray{System.Byte}.Length
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AlgoSdk.Address.Item(System.Int32)
  commentId: P:AlgoSdk.Address.Item(System.Int32)
  id: Item(System.Int32)
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: Address.Item[Int32]
  fullName: AlgoSdk.Address.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: this[]
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 31
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public byte this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Byte
    content.vb: Public Property Item(index As Integer) As Byte
  overload: AlgoSdk.Address.Item*
  implements:
  - AlgoSdk.LowLevel.IArray{System.Byte}.Item(System.Int32)
  nameWithType.vb: Address.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: AlgoSdk.Address.Item(System.Int32)
  name.vb: Item(Int32)
- uid: AlgoSdk.Address.ToFixedString
  commentId: M:AlgoSdk.Address.ToFixedString
  id: ToFixedString
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: ToFixedString()
  nameWithType: Address.ToFixedString()
  fullName: AlgoSdk.Address.ToFixedString()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToFixedString
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 37
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public FixedString128Bytes ToFixedString()
    return:
      type: Unity.Collections.FixedString128Bytes
    content.vb: Public Function ToFixedString As FixedString128Bytes
  overload: AlgoSdk.Address.ToFixedString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Address.ToPublicKey
  commentId: M:AlgoSdk.Address.ToPublicKey
  id: ToPublicKey
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: ToPublicKey()
  nameWithType: Address.ToPublicKey()
  fullName: AlgoSdk.Address.ToPublicKey()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToPublicKey
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 56
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public Ed25519.PublicKey ToPublicKey()
    return:
      type: AlgoSdk.Crypto.Ed25519.PublicKey
    content.vb: Public Function ToPublicKey As Ed25519.PublicKey
  overload: AlgoSdk.Address.ToPublicKey*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AlgoSdk.Address.ToString
  commentId: M:AlgoSdk.Address.ToString
  id: ToString
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Address.ToString()
  fullName: AlgoSdk.Address.ToString()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: ToString
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 61
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: AlgoSdk.Address.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AlgoSdk.Address.FromString``1(``0)
  commentId: M:AlgoSdk.Address.FromString``1(``0)
  id: FromString``1(``0)
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: FromString<TString>(TString)
  nameWithType: Address.FromString<TString>(TString)
  fullName: AlgoSdk.Address.FromString<TString>(TString)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: FromString
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 66
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      public static Address FromString<TString>(TString s)
          where TString : struct, IUTF8Bytes, INativeList<byte>
    parameters:
    - id: s
      type: '{TString}'
    typeParameters:
    - id: TString
    return:
      type: AlgoSdk.Address
    content.vb: Public Shared Function FromString(Of TString As {Structure, IUTF8Bytes, INativeList(Of Byte)})(s As TString) As Address
  overload: AlgoSdk.Address.FromString*
  nameWithType.vb: Address.FromString(Of TString)(TString)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Address.FromString(Of TString)(TString)
  name.vb: FromString(Of TString)(TString)
- uid: AlgoSdk.Address.FromString(System.String)
  commentId: M:AlgoSdk.Address.FromString(System.String)
  id: FromString(System.String)
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: FromString(String)
  nameWithType: Address.FromString(String)
  fullName: AlgoSdk.Address.FromString(System.String)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: FromString
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 90
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static Address FromString(string addressString)
    parameters:
    - id: addressString
      type: System.String
    return:
      type: AlgoSdk.Address
    content.vb: Public Shared Function FromString(addressString As String) As Address
  overload: AlgoSdk.Address.FromString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AlgoSdk.Address.FromPublicKey(AlgoSdk.Crypto.Ed25519.PublicKey)
  commentId: M:AlgoSdk.Address.FromPublicKey(AlgoSdk.Crypto.Ed25519.PublicKey)
  id: FromPublicKey(AlgoSdk.Crypto.Ed25519.PublicKey)
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: FromPublicKey(Ed25519.PublicKey)
  nameWithType: Address.FromPublicKey(Ed25519.PublicKey)
  fullName: AlgoSdk.Address.FromPublicKey(AlgoSdk.Crypto.Ed25519.PublicKey)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: FromPublicKey
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 96
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static Address FromPublicKey(Ed25519.PublicKey publicKey)
    parameters:
    - id: publicKey
      type: AlgoSdk.Crypto.Ed25519.PublicKey
    return:
      type: AlgoSdk.Address
    content.vb: Public Shared Function FromPublicKey(publicKey As Ed25519.PublicKey) As Address
  overload: AlgoSdk.Address.FromPublicKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AlgoSdk.Address.op_Implicit(System.String)~AlgoSdk.Address
  commentId: M:AlgoSdk.Address.op_Implicit(System.String)~AlgoSdk.Address
  id: op_Implicit(System.String)~AlgoSdk.Address
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: Implicit(String to Address)
  nameWithType: Address.Implicit(String to Address)
  fullName: AlgoSdk.Address.Implicit(System.String to AlgoSdk.Address)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Implicit
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 101
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static implicit operator Address(string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: AlgoSdk.Address
    content.vb: Public Shared Widening Operator CType(s As String) As Address
  overload: AlgoSdk.Address.op_Implicit*
  nameWithType.vb: Address.Widening(String to Address)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Address.Widening(System.String to AlgoSdk.Address)
  name.vb: Widening(String to Address)
- uid: AlgoSdk.Address.op_Implicit(AlgoSdk.Crypto.Ed25519.PublicKey)~AlgoSdk.Address
  commentId: M:AlgoSdk.Address.op_Implicit(AlgoSdk.Crypto.Ed25519.PublicKey)~AlgoSdk.Address
  id: op_Implicit(AlgoSdk.Crypto.Ed25519.PublicKey)~AlgoSdk.Address
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: Implicit(Ed25519.PublicKey to Address)
  nameWithType: Address.Implicit(Ed25519.PublicKey to Address)
  fullName: AlgoSdk.Address.Implicit(AlgoSdk.Crypto.Ed25519.PublicKey to AlgoSdk.Address)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Implicit
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 106
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static implicit operator Address(Ed25519.PublicKey publicKey)
    parameters:
    - id: publicKey
      type: AlgoSdk.Crypto.Ed25519.PublicKey
    return:
      type: AlgoSdk.Address
    content.vb: Public Shared Widening Operator CType(publicKey As Ed25519.PublicKey) As Address
  overload: AlgoSdk.Address.op_Implicit*
  nameWithType.vb: Address.Widening(Ed25519.PublicKey to Address)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Address.Widening(AlgoSdk.Crypto.Ed25519.PublicKey to AlgoSdk.Address)
  name.vb: Widening(Ed25519.PublicKey to Address)
- uid: AlgoSdk.Address.op_Implicit(AlgoSdk.Address)~AlgoSdk.Crypto.Ed25519.PublicKey
  commentId: M:AlgoSdk.Address.op_Implicit(AlgoSdk.Address)~AlgoSdk.Crypto.Ed25519.PublicKey
  id: op_Implicit(AlgoSdk.Address)~AlgoSdk.Crypto.Ed25519.PublicKey
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: Implicit(Address to Ed25519.PublicKey)
  nameWithType: Address.Implicit(Address to Ed25519.PublicKey)
  fullName: AlgoSdk.Address.Implicit(AlgoSdk.Address to AlgoSdk.Crypto.Ed25519.PublicKey)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Implicit
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 111
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static implicit operator Ed25519.PublicKey(Address address)
    parameters:
    - id: address
      type: AlgoSdk.Address
    return:
      type: AlgoSdk.Crypto.Ed25519.PublicKey
    content.vb: Public Shared Widening Operator CType(address As Address) As Ed25519.PublicKey
  overload: AlgoSdk.Address.op_Implicit*
  nameWithType.vb: Address.Widening(Address to Ed25519.PublicKey)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Address.Widening(AlgoSdk.Address to AlgoSdk.Crypto.Ed25519.PublicKey)
  name.vb: Widening(Address to Ed25519.PublicKey)
- uid: AlgoSdk.Address.op_Equality(AlgoSdk.Address@,AlgoSdk.Address@)
  commentId: M:AlgoSdk.Address.op_Equality(AlgoSdk.Address@,AlgoSdk.Address@)
  id: op_Equality(AlgoSdk.Address@,AlgoSdk.Address@)
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: Equality(Address, Address)
  nameWithType: Address.Equality(Address, Address)
  fullName: AlgoSdk.Address.Equality(AlgoSdk.Address, AlgoSdk.Address)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Equality
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 116
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static bool operator ==(in Address a1, in Address a2)
    parameters:
    - id: a1
      type: AlgoSdk.Address
    - id: a2
      type: AlgoSdk.Address
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(ByRef a1 As Address, ByRef a2 As Address) As Boolean
  overload: AlgoSdk.Address.op_Equality*
  nameWithType.vb: Address.Equality(ByRef Address, ByRef Address)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Address.Equality(ByRef AlgoSdk.Address, ByRef AlgoSdk.Address)
  name.vb: Equality(ByRef Address, ByRef Address)
- uid: AlgoSdk.Address.op_Inequality(AlgoSdk.Address@,AlgoSdk.Address@)
  commentId: M:AlgoSdk.Address.op_Inequality(AlgoSdk.Address@,AlgoSdk.Address@)
  id: op_Inequality(AlgoSdk.Address@,AlgoSdk.Address@)
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: Inequality(Address, Address)
  nameWithType: Address.Inequality(Address, Address)
  fullName: AlgoSdk.Address.Inequality(AlgoSdk.Address, AlgoSdk.Address)
  type: Operator
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: op_Inequality
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 121
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static bool operator !=(in Address a1, in Address a2)
    parameters:
    - id: a1
      type: AlgoSdk.Address
    - id: a2
      type: AlgoSdk.Address
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(ByRef a1 As Address, ByRef a2 As Address) As Boolean
  overload: AlgoSdk.Address.op_Inequality*
  nameWithType.vb: Address.Inequality(ByRef Address, ByRef Address)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Address.Inequality(ByRef AlgoSdk.Address, ByRef AlgoSdk.Address)
  name.vb: Inequality(ByRef Address, ByRef Address)
- uid: AlgoSdk.Address.Equals(System.Object)
  commentId: M:AlgoSdk.Address.Equals(System.Object)
  id: Equals(System.Object)
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Address.Equals(Object)
  fullName: AlgoSdk.Address.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 131
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: AlgoSdk.Address.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AlgoSdk.Address.GetHashCode
  commentId: M:AlgoSdk.Address.GetHashCode
  id: GetHashCode
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Address.GetHashCode()
  fullName: AlgoSdk.Address.GetHashCode()
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: GetHashCode
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 136
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: AlgoSdk.Address.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AlgoSdk.Address.Equals(AlgoSdk.Address)
  commentId: M:AlgoSdk.Address.Equals(AlgoSdk.Address)
  id: Equals(AlgoSdk.Address)
  parent: AlgoSdk.Address
  langs:
  - csharp
  - vb
  name: Equals(Address)
  nameWithType: Address.Equals(Address)
  fullName: AlgoSdk.Address.Equals(AlgoSdk.Address)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Address.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Equals
    path: ../CareBoo.AlgoSdk/Address.cs
    startLine: 141
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public bool Equals(Address other)
    parameters:
    - id: other
      type: AlgoSdk.Address
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Address) As Boolean
  overload: AlgoSdk.Address.Equals*
  implements:
  - System.IEquatable{AlgoSdk.Address}.Equals(AlgoSdk.Address)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AlgoSdk
  commentId: N:AlgoSdk
  name: AlgoSdk
  nameWithType: AlgoSdk
  fullName: AlgoSdk
- uid: AlgoSdk.LowLevel.IByteArray
  commentId: T:AlgoSdk.LowLevel.IByteArray
  parent: AlgoSdk.LowLevel
  name: IByteArray
  nameWithType: IByteArray
  fullName: AlgoSdk.LowLevel.IByteArray
- uid: AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  commentId: T:AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  parent: AlgoSdk.LowLevel
  definition: AlgoSdk.LowLevel.IContiguousArray`1
  name: IContiguousArray<Byte>
  nameWithType: IContiguousArray<Byte>
  fullName: AlgoSdk.LowLevel.IContiguousArray<System.Byte>
  nameWithType.vb: IContiguousArray(Of Byte)
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of System.Byte)
  name.vb: IContiguousArray(Of Byte)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.LowLevel.IArray{System.Byte}
  commentId: T:AlgoSdk.LowLevel.IArray{System.Byte}
  parent: AlgoSdk.LowLevel
  definition: AlgoSdk.LowLevel.IArray`1
  name: IArray<Byte>
  nameWithType: IArray<Byte>
  fullName: AlgoSdk.LowLevel.IArray<System.Byte>
  nameWithType.vb: IArray(Of Byte)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of System.Byte)
  name.vb: IArray(Of Byte)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{AlgoSdk.Address}
  commentId: T:System.IEquatable{AlgoSdk.Address}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Address>
  nameWithType: IEquatable<Address>
  fullName: System.IEquatable<AlgoSdk.Address>
  nameWithType.vb: IEquatable(Of Address)
  fullName.vb: System.IEquatable(Of AlgoSdk.Address)
  name.vb: IEquatable(Of Address)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AlgoSdk.Address
    name: Address
    nameWithType: Address
    fullName: AlgoSdk.Address
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AlgoSdk.Address
    name: Address
    nameWithType: Address
    fullName: AlgoSdk.Address
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Address.AlgoSdk.Base64Encoding.CopyToBase64``2({T}@)
  commentId: M:AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  parent: AlgoSdk.Base64Encoding
  definition: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  name: CopyToBase64<Address, T>(T)
  nameWithType: Base64Encoding.CopyToBase64<Address, T>(T)
  fullName: AlgoSdk.Base64Encoding.CopyToBase64<AlgoSdk.Address, T>(T)
  nameWithType.vb: Base64Encoding.CopyToBase64(Of Address, T)(T)
  fullName.vb: AlgoSdk.Base64Encoding.CopyToBase64(Of AlgoSdk.Address, T)(T)
  name.vb: CopyToBase64(Of Address, T)(T)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``1@)
    name: CopyToBase64<Address, T>
    nameWithType: Base64Encoding.CopyToBase64<Address, T>
    fullName: AlgoSdk.Base64Encoding.CopyToBase64<AlgoSdk.Address, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``1@)
    name: CopyToBase64(Of Address, T)
    nameWithType: Base64Encoding.CopyToBase64(Of Address, T)
    fullName: AlgoSdk.Base64Encoding.CopyToBase64(Of AlgoSdk.Address, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Address.AlgoSdk.Base64Encoding.CopyFromBase64``2({T}@,System.Int32)
  commentId: M:AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  parent: AlgoSdk.Base64Encoding
  definition: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  name: CopyFromBase64<Address, T>(T, Int32)
  nameWithType: Base64Encoding.CopyFromBase64<Address, T>(T, Int32)
  fullName: AlgoSdk.Base64Encoding.CopyFromBase64<AlgoSdk.Address, T>(T, System.Int32)
  nameWithType.vb: Base64Encoding.CopyFromBase64(Of Address, T)(T, Int32)
  fullName.vb: AlgoSdk.Base64Encoding.CopyFromBase64(Of AlgoSdk.Address, T)(T, System.Int32)
  name.vb: CopyFromBase64(Of Address, T)(T, Int32)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``1@,System.Int32)
    name: CopyFromBase64<Address, T>
    nameWithType: Base64Encoding.CopyFromBase64<Address, T>
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64<AlgoSdk.Address, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``1@,System.Int32)
    name: CopyFromBase64(Of Address, T)
    nameWithType: Base64Encoding.CopyFromBase64(Of Address, T)
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64(Of AlgoSdk.Address, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.LowLevel
  commentId: N:AlgoSdk.LowLevel
  name: AlgoSdk.LowLevel
  nameWithType: AlgoSdk.LowLevel
  fullName: AlgoSdk.LowLevel
- uid: AlgoSdk.LowLevel.IContiguousArray`1
  commentId: T:AlgoSdk.LowLevel.IContiguousArray`1
  name: IContiguousArray<T>
  nameWithType: IContiguousArray<T>
  fullName: AlgoSdk.LowLevel.IContiguousArray<T>
  nameWithType.vb: IContiguousArray(Of T)
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of T)
  name.vb: IContiguousArray(Of T)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1
    name: IContiguousArray
    nameWithType: IContiguousArray
    fullName: AlgoSdk.LowLevel.IContiguousArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.LowLevel.IArray`1
  commentId: T:AlgoSdk.LowLevel.IArray`1
  name: IArray<T>
  nameWithType: IArray<T>
  fullName: AlgoSdk.LowLevel.IArray<T>
  nameWithType.vb: IArray(Of T)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of T)
  name.vb: IArray(Of T)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1
    name: IArray
    nameWithType: IArray
    fullName: AlgoSdk.LowLevel.IArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  commentId: M:AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  name: CopyToBase64<TBytes, T>(TBytes, T)
  nameWithType: Base64Encoding.CopyToBase64<TBytes, T>(TBytes, T)
  fullName: AlgoSdk.Base64Encoding.CopyToBase64<TBytes, T>(TBytes, T)
  nameWithType.vb: Base64Encoding.CopyToBase64(Of TBytes, T)(TBytes, T)
  fullName.vb: AlgoSdk.Base64Encoding.CopyToBase64(Of TBytes, T)(TBytes, T)
  name.vb: CopyToBase64(Of TBytes, T)(TBytes, T)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
    name: CopyToBase64<TBytes, T>
    nameWithType: Base64Encoding.CopyToBase64<TBytes, T>
    fullName: AlgoSdk.Base64Encoding.CopyToBase64<TBytes, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TBytes
    nameWithType: TBytes
    fullName: TBytes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
    name: CopyToBase64(Of TBytes, T)
    nameWithType: Base64Encoding.CopyToBase64(Of TBytes, T)
    fullName: AlgoSdk.Base64Encoding.CopyToBase64(Of TBytes, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TBytes
    nameWithType: TBytes
    fullName: TBytes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Base64Encoding
  commentId: T:AlgoSdk.Base64Encoding
  parent: AlgoSdk
  name: Base64Encoding
  nameWithType: Base64Encoding
  fullName: AlgoSdk.Base64Encoding
- uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  commentId: M:AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  isExternal: true
  name: CopyFromBase64<TByteArray, T>(TByteArray, T, Int32)
  nameWithType: Base64Encoding.CopyFromBase64<TByteArray, T>(TByteArray, T, Int32)
  fullName: AlgoSdk.Base64Encoding.CopyFromBase64<TByteArray, T>(TByteArray, T, System.Int32)
  nameWithType.vb: Base64Encoding.CopyFromBase64(Of TByteArray, T)(TByteArray, T, Int32)
  fullName.vb: AlgoSdk.Base64Encoding.CopyFromBase64(Of TByteArray, T)(TByteArray, T, System.Int32)
  name.vb: CopyFromBase64(Of TByteArray, T)(TByteArray, T, Int32)
  spec.csharp:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
    name: CopyFromBase64<TByteArray, T>
    nameWithType: Base64Encoding.CopyFromBase64<TByteArray, T>
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64<TByteArray, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TByteArray
    nameWithType: TByteArray
    fullName: TByteArray
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
    name: CopyFromBase64(Of TByteArray, T)
    nameWithType: Base64Encoding.CopyFromBase64(Of TByteArray, T)
    fullName: AlgoSdk.Base64Encoding.CopyFromBase64(Of TByteArray, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TByteArray
    nameWithType: TByteArray
    fullName: TByteArray
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AlgoSdk.Address
  commentId: T:AlgoSdk.Address
  parent: AlgoSdk
  name: Address
  nameWithType: Address
  fullName: AlgoSdk.Address
- uid: AlgoSdk.Address.GetUnsafePtr*
  commentId: Overload:AlgoSdk.Address.GetUnsafePtr
  name: GetUnsafePtr
  nameWithType: Address.GetUnsafePtr
  fullName: AlgoSdk.Address.GetUnsafePtr
- uid: AlgoSdk.LowLevel.IContiguousArray{System.Byte}.GetUnsafePtr
  commentId: M:AlgoSdk.LowLevel.IContiguousArray{System.Byte}.GetUnsafePtr
  parent: AlgoSdk.LowLevel.IContiguousArray{System.Byte}
  definition: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
  name: GetUnsafePtr()
  nameWithType: IContiguousArray<Byte>.GetUnsafePtr()
  fullName: AlgoSdk.LowLevel.IContiguousArray<System.Byte>.GetUnsafePtr()
  nameWithType.vb: IContiguousArray(Of Byte).GetUnsafePtr()
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of System.Byte).GetUnsafePtr()
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray<Byte>.GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray<System.Byte>.GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray(Of Byte).GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray(Of System.Byte).GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Void*
  isExternal: true
  name: Void*
  nameWithType: Void*
  fullName: System.Void*
  spec.csharp:
  - uid: System.Void
    name: Void
    nameWithType: Void
    fullName: System.Void
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    nameWithType: Void
    fullName: System.Void
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
  commentId: M:AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
  name: GetUnsafePtr()
  nameWithType: IContiguousArray<T>.GetUnsafePtr()
  fullName: AlgoSdk.LowLevel.IContiguousArray<T>.GetUnsafePtr()
  nameWithType.vb: IContiguousArray(Of T).GetUnsafePtr()
  fullName.vb: AlgoSdk.LowLevel.IContiguousArray(Of T).GetUnsafePtr()
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray<T>.GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray<T>.GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AlgoSdk.LowLevel.IContiguousArray`1.GetUnsafePtr
    name: GetUnsafePtr
    nameWithType: IContiguousArray(Of T).GetUnsafePtr
    fullName: AlgoSdk.LowLevel.IContiguousArray(Of T).GetUnsafePtr
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Address.Length*
  commentId: Overload:AlgoSdk.Address.Length
  name: Length
  nameWithType: Address.Length
  fullName: AlgoSdk.Address.Length
- uid: AlgoSdk.LowLevel.IArray{System.Byte}.Length
  commentId: P:AlgoSdk.LowLevel.IArray{System.Byte}.Length
  parent: AlgoSdk.LowLevel.IArray{System.Byte}
  definition: AlgoSdk.LowLevel.IArray`1.Length
  name: Length
  nameWithType: IArray<Byte>.Length
  fullName: AlgoSdk.LowLevel.IArray<System.Byte>.Length
  nameWithType.vb: IArray(Of Byte).Length
  fullName.vb: AlgoSdk.LowLevel.IArray(Of System.Byte).Length
- uid: AlgoSdk.LowLevel.IArray`1.Length
  commentId: P:AlgoSdk.LowLevel.IArray`1.Length
  name: Length
  nameWithType: IArray<T>.Length
  fullName: AlgoSdk.LowLevel.IArray<T>.Length
  nameWithType.vb: IArray(Of T).Length
  fullName.vb: AlgoSdk.LowLevel.IArray(Of T).Length
- uid: AlgoSdk.Address.Item*
  commentId: Overload:AlgoSdk.Address.Item
  name: Item
  nameWithType: Address.Item
  fullName: AlgoSdk.Address.Item
- uid: AlgoSdk.LowLevel.IArray{System.Byte}.Item(System.Int32)
  commentId: P:AlgoSdk.LowLevel.IArray{System.Byte}.Item(System.Int32)
  parent: AlgoSdk.LowLevel.IArray{System.Byte}
  definition: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IArray<Byte>.Item[Int32]
  fullName: AlgoSdk.LowLevel.IArray<System.Byte>.Item[System.Int32]
  nameWithType.vb: IArray(Of Byte).Item(Int32)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of System.Byte).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray<Byte>.Item
    fullName: AlgoSdk.LowLevel.IArray<System.Byte>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray(Of Byte).Item
    fullName: AlgoSdk.LowLevel.IArray(Of System.Byte).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
  commentId: P:AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IArray<T>.Item[Int32]
  fullName: AlgoSdk.LowLevel.IArray<T>.Item[System.Int32]
  nameWithType.vb: IArray(Of T).Item(Int32)
  fullName.vb: AlgoSdk.LowLevel.IArray(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray<T>.Item
    fullName: AlgoSdk.LowLevel.IArray<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: AlgoSdk.LowLevel.IArray`1.Item(System.Int32)
    name: Item
    nameWithType: IArray(Of T).Item
    fullName: AlgoSdk.LowLevel.IArray(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Address.ToFixedString*
  commentId: Overload:AlgoSdk.Address.ToFixedString
  name: ToFixedString
  nameWithType: Address.ToFixedString
  fullName: AlgoSdk.Address.ToFixedString
- uid: Unity.Collections.FixedString128Bytes
  commentId: T:Unity.Collections.FixedString128Bytes
  parent: Unity.Collections
  name: FixedString128Bytes
  nameWithType: FixedString128Bytes
  fullName: Unity.Collections.FixedString128Bytes
- uid: Unity.Collections
  commentId: N:Unity.Collections
  name: Unity.Collections
  nameWithType: Unity.Collections
  fullName: Unity.Collections
- uid: AlgoSdk.Address.ToPublicKey*
  commentId: Overload:AlgoSdk.Address.ToPublicKey
  name: ToPublicKey
  nameWithType: Address.ToPublicKey
  fullName: AlgoSdk.Address.ToPublicKey
- uid: AlgoSdk.Crypto.Ed25519.PublicKey
  commentId: T:AlgoSdk.Crypto.Ed25519.PublicKey
  parent: AlgoSdk.Crypto
  name: Ed25519.PublicKey
  nameWithType: Ed25519.PublicKey
  fullName: AlgoSdk.Crypto.Ed25519.PublicKey
- uid: AlgoSdk.Crypto
  commentId: N:AlgoSdk.Crypto
  name: AlgoSdk.Crypto
  nameWithType: AlgoSdk.Crypto
  fullName: AlgoSdk.Crypto
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Address.ToString*
  commentId: Overload:AlgoSdk.Address.ToString
  name: ToString
  nameWithType: Address.ToString
  fullName: AlgoSdk.Address.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: AlgoSdk.Address.FromString*
  commentId: Overload:AlgoSdk.Address.FromString
  name: FromString
  nameWithType: Address.FromString
  fullName: AlgoSdk.Address.FromString
- uid: '{TString}'
  commentId: '!:TString'
  definition: TString
  name: TString
  nameWithType: TString
  fullName: TString
- uid: TString
  name: TString
  nameWithType: TString
  fullName: TString
- uid: AlgoSdk.Address.FromPublicKey*
  commentId: Overload:AlgoSdk.Address.FromPublicKey
  name: FromPublicKey
  nameWithType: Address.FromPublicKey
  fullName: AlgoSdk.Address.FromPublicKey
- uid: AlgoSdk.Address.op_Implicit*
  commentId: Overload:AlgoSdk.Address.op_Implicit
  name: Implicit
  nameWithType: Address.Implicit
  fullName: AlgoSdk.Address.Implicit
  nameWithType.vb: Address.Widening
  fullName.vb: AlgoSdk.Address.Widening
  name.vb: Widening
- uid: AlgoSdk.Address.op_Equality*
  commentId: Overload:AlgoSdk.Address.op_Equality
  name: Equality
  nameWithType: Address.Equality
  fullName: AlgoSdk.Address.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AlgoSdk.Address.op_Inequality*
  commentId: Overload:AlgoSdk.Address.op_Inequality
  name: Inequality
  nameWithType: Address.Inequality
  fullName: AlgoSdk.Address.Inequality
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Address.Equals*
  commentId: Overload:AlgoSdk.Address.Equals
  name: Equals
  nameWithType: Address.Equals
  fullName: AlgoSdk.Address.Equals
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AlgoSdk.Address.GetHashCode*
  commentId: Overload:AlgoSdk.Address.GetHashCode
  name: GetHashCode
  nameWithType: Address.GetHashCode
  fullName: AlgoSdk.Address.GetHashCode
- uid: System.IEquatable{AlgoSdk.Address}.Equals(AlgoSdk.Address)
  commentId: M:System.IEquatable{AlgoSdk.Address}.Equals(AlgoSdk.Address)
  parent: System.IEquatable{AlgoSdk.Address}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Address)
  nameWithType: IEquatable<Address>.Equals(Address)
  fullName: System.IEquatable<AlgoSdk.Address>.Equals(AlgoSdk.Address)
  nameWithType.vb: IEquatable(Of Address).Equals(Address)
  fullName.vb: System.IEquatable(Of AlgoSdk.Address).Equals(AlgoSdk.Address)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Address>.Equals
    fullName: System.IEquatable<AlgoSdk.Address>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.Address
    name: Address
    nameWithType: Address
    fullName: AlgoSdk.Address
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Address).Equals
    fullName: System.IEquatable(Of AlgoSdk.Address).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: AlgoSdk.Address
    name: Address
    nameWithType: Address
    fullName: AlgoSdk.Address
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
