### YamlMime:ManagedReference
items:
- uid: AlgoSdk.Base64Encoding
  commentId: T:AlgoSdk.Base64Encoding
  id: Base64Encoding
  parent: AlgoSdk
  children:
  - AlgoSdk.Base64Encoding.Base64ToUtf8``2(``0@,``1@)
  - AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  - AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  - AlgoSdk.Base64Encoding.Utf8ToBase64``2(``0@,``1@)
  langs:
  - csharp
  - vb
  name: Base64Encoding
  nameWithType: Base64Encoding
  fullName: AlgoSdk.Base64Encoding
  type: Class
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Encoding/Base64Encoding.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Base64Encoding
    path: ../CareBoo.AlgoSdk/Encoding/Base64Encoding.cs
    startLine: 6
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: public static class Base64Encoding
    content.vb: Public Module Base64Encoding
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  commentId: M:AlgoSdk.Base64Encoding.CopyToBase64``2(``0,``1@)
  id: CopyToBase64``2(``0,``1@)
  isExtensionMethod: true
  parent: AlgoSdk.Base64Encoding
  langs:
  - csharp
  - vb
  name: CopyToBase64<TBytes, T>(TBytes, ref T)
  nameWithType: Base64Encoding.CopyToBase64<TBytes, T>(TBytes, ref T)
  fullName: AlgoSdk.Base64Encoding.CopyToBase64<TBytes, T>(TBytes, ref T)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Encoding/Base64Encoding.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CopyToBase64
    path: ../CareBoo.AlgoSdk/Encoding/Base64Encoding.cs
    startLine: 8
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      public static void CopyToBase64<TBytes, T>(this TBytes bytes, ref T s)
          where TBytes : struct, IArray<byte> where T : struct, IUTF8Bytes, INativeList<byte>
    parameters:
    - id: bytes
      type: '{TBytes}'
    - id: s
      type: '{T}'
    typeParameters:
    - id: TBytes
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CopyToBase64(Of TBytes As {Structure, IArray(Of Byte)}, T As {Structure, IUTF8Bytes, INativeList(Of Byte)})(bytes As TBytes, ByRef s As T)
  overload: AlgoSdk.Base64Encoding.CopyToBase64*
  nameWithType.vb: Base64Encoding.CopyToBase64(Of TBytes, T)(TBytes, ByRef T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Base64Encoding.CopyToBase64(Of TBytes, T)(TBytes, ByRef T)
  name.vb: CopyToBase64(Of TBytes, T)(TBytes, ByRef T)
- uid: AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  commentId: M:AlgoSdk.Base64Encoding.CopyFromBase64``2(``0@,``1@,System.Int32)
  id: CopyFromBase64``2(``0@,``1@,System.Int32)
  isExtensionMethod: true
  parent: AlgoSdk.Base64Encoding
  langs:
  - csharp
  - vb
  name: CopyFromBase64<TByteArray, T>(ref TByteArray, T, Int32)
  nameWithType: Base64Encoding.CopyFromBase64<TByteArray, T>(ref TByteArray, T, Int32)
  fullName: AlgoSdk.Base64Encoding.CopyFromBase64<TByteArray, T>(ref TByteArray, T, System.Int32)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Encoding/Base64Encoding.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: CopyFromBase64
    path: ../CareBoo.AlgoSdk/Encoding/Base64Encoding.cs
    startLine: 15
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      public static void CopyFromBase64<TByteArray, T>(this ref TByteArray bytes, in T s, int maxLength = 2147483647)
          where TByteArray : struct, IArray<byte> where T : struct, IUTF8Bytes, INativeList<byte>
    parameters:
    - id: bytes
      type: '{TByteArray}'
    - id: s
      type: '{T}'
    - id: maxLength
      type: System.Int32
    typeParameters:
    - id: TByteArray
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CopyFromBase64(Of TByteArray As {Structure, IArray(Of Byte)}, T As {Structure, IUTF8Bytes, INativeList(Of Byte)})(ByRef bytes As TByteArray, ByRef s As T, maxLength As Integer = 2147483647)
  overload: AlgoSdk.Base64Encoding.CopyFromBase64*
  nameWithType.vb: Base64Encoding.CopyFromBase64(Of TByteArray, T)(ByRef TByteArray, ByRef T, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Base64Encoding.CopyFromBase64(Of TByteArray, T)(ByRef TByteArray, ByRef T, System.Int32)
  name.vb: CopyFromBase64(Of TByteArray, T)(ByRef TByteArray, ByRef T, Int32)
- uid: AlgoSdk.Base64Encoding.Utf8ToBase64``2(``0@,``1@)
  commentId: M:AlgoSdk.Base64Encoding.Utf8ToBase64``2(``0@,``1@)
  id: Utf8ToBase64``2(``0@,``1@)
  isExtensionMethod: true
  parent: AlgoSdk.Base64Encoding
  langs:
  - csharp
  - vb
  name: Utf8ToBase64<T, U>(ref T, ref U)
  nameWithType: Base64Encoding.Utf8ToBase64<T, U>(ref T, ref U)
  fullName: AlgoSdk.Base64Encoding.Utf8ToBase64<T, U>(ref T, ref U)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Encoding/Base64Encoding.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Utf8ToBase64
    path: ../CareBoo.AlgoSdk/Encoding/Base64Encoding.cs
    startLine: 26
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      public static void Utf8ToBase64<T, U>(this ref T src, ref U tar)
          where T : struct, IUTF8Bytes, INativeList<byte> where U : struct, IUTF8Bytes, INativeList<byte>
    parameters:
    - id: src
      type: '{T}'
    - id: tar
      type: '{U}'
    typeParameters:
    - id: T
    - id: U
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Utf8ToBase64(Of T As {Structure, IUTF8Bytes, INativeList(Of Byte)}, U As {Structure, IUTF8Bytes, INativeList(Of Byte)})(ByRef src As T, ByRef tar As U)
  overload: AlgoSdk.Base64Encoding.Utf8ToBase64*
  nameWithType.vb: Base64Encoding.Utf8ToBase64(Of T, U)(ByRef T, ByRef U)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Base64Encoding.Utf8ToBase64(Of T, U)(ByRef T, ByRef U)
  name.vb: Utf8ToBase64(Of T, U)(ByRef T, ByRef U)
- uid: AlgoSdk.Base64Encoding.Base64ToUtf8``2(``0@,``1@)
  commentId: M:AlgoSdk.Base64Encoding.Base64ToUtf8``2(``0@,``1@)
  id: Base64ToUtf8``2(``0@,``1@)
  isExtensionMethod: true
  parent: AlgoSdk.Base64Encoding
  langs:
  - csharp
  - vb
  name: Base64ToUtf8<T, U>(ref T, ref U)
  nameWithType: Base64Encoding.Base64ToUtf8<T, U>(ref T, ref U)
  fullName: AlgoSdk.Base64Encoding.Base64ToUtf8<T, U>(ref T, ref U)
  type: Method
  source:
    remote:
      path: Packages/com.careboo.unity-algorand-sdk/CareBoo.AlgoSdk/Encoding/Base64Encoding.cs
      branch: jasonboukheir/issue#33
      repo: git@github.com:CareBoo/unity-algorand-sdk.git
    id: Base64ToUtf8
    path: ../CareBoo.AlgoSdk/Encoding/Base64Encoding.cs
    startLine: 37
  assemblies:
  - CareBoo.AlgoSdk
  namespace: AlgoSdk
  syntax:
    content: >-
      public static void Base64ToUtf8<T, U>(this ref T src, ref U tar)
          where T : struct, IUTF8Bytes, INativeList<byte> where U : struct, IUTF8Bytes, INativeList<byte>
    parameters:
    - id: src
      type: '{T}'
    - id: tar
      type: '{U}'
    typeParameters:
    - id: T
    - id: U
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Base64ToUtf8(Of T As {Structure, IUTF8Bytes, INativeList(Of Byte)}, U As {Structure, IUTF8Bytes, INativeList(Of Byte)})(ByRef src As T, ByRef tar As U)
  overload: AlgoSdk.Base64Encoding.Base64ToUtf8*
  nameWithType.vb: Base64Encoding.Base64ToUtf8(Of T, U)(ByRef T, ByRef U)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AlgoSdk.Base64Encoding.Base64ToUtf8(Of T, U)(ByRef T, ByRef U)
  name.vb: Base64ToUtf8(Of T, U)(ByRef T, ByRef U)
references:
- uid: AlgoSdk
  commentId: N:AlgoSdk
  name: AlgoSdk
  nameWithType: AlgoSdk
  fullName: AlgoSdk
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AlgoSdk.Base64Encoding.CopyToBase64*
  commentId: Overload:AlgoSdk.Base64Encoding.CopyToBase64
  name: CopyToBase64
  nameWithType: Base64Encoding.CopyToBase64
  fullName: AlgoSdk.Base64Encoding.CopyToBase64
- uid: '{TBytes}'
  commentId: '!:TBytes'
  definition: TBytes
  name: TBytes
  nameWithType: TBytes
  fullName: TBytes
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: TBytes
  commentId: '!:TBytes'
  name: TBytes
  nameWithType: TBytes
  fullName: TBytes
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: AlgoSdk.Base64Encoding.CopyFromBase64*
  commentId: Overload:AlgoSdk.Base64Encoding.CopyFromBase64
  name: CopyFromBase64
  nameWithType: Base64Encoding.CopyFromBase64
  fullName: AlgoSdk.Base64Encoding.CopyFromBase64
- uid: '{TByteArray}'
  commentId: '!:TByteArray'
  definition: TByteArray
  name: TByteArray
  nameWithType: TByteArray
  fullName: TByteArray
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TByteArray
  name: TByteArray
  nameWithType: TByteArray
  fullName: TByteArray
- uid: AlgoSdk.Base64Encoding.Utf8ToBase64*
  commentId: Overload:AlgoSdk.Base64Encoding.Utf8ToBase64
  name: Utf8ToBase64
  nameWithType: Base64Encoding.Utf8ToBase64
  fullName: AlgoSdk.Base64Encoding.Utf8ToBase64
- uid: '{U}'
  commentId: '!:U'
  definition: U
  name: U
  nameWithType: U
  fullName: U
- uid: U
  name: U
  nameWithType: U
  fullName: U
- uid: AlgoSdk.Base64Encoding.Base64ToUtf8*
  commentId: Overload:AlgoSdk.Base64Encoding.Base64ToUtf8
  name: Base64ToUtf8
  nameWithType: Base64Encoding.Base64ToUtf8
  fullName: AlgoSdk.Base64Encoding.Base64ToUtf8
