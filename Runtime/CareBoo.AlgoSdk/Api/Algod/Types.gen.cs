//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using AlgoSdk.Algod;
using AlgoSdk.LowLevel;
using Unity.Collections;
using UnityEngine;

namespace AlgoSdk.Algod
{
    [AlgoApiObject, Serializable]
    public partial struct CatchpointAbortResponse
        : IEquatable<CatchpointAbortResponse>
    {
        [SerializeField, Tooltip(@"Catchup abort response string")]
        string @catchupMessage;
        
        /// <summary>
        /// Catchup abort response string        
        /// </summary>
        [AlgoApiField("catchup-message")]
        public string CatchupMessage
        {
            get => this.@catchupMessage;
            set => this.@catchupMessage = value;
        }

        public bool Equals(CatchpointAbortResponse other)
        {
            return 
                StringComparer.Equals(CatchupMessage, other.CatchupMessage)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountAssetResponse
        : IEquatable<AccountAssetResponse>
    {
        [SerializeField, Tooltip(@"")]
        AssetHolding @assetHolding;
        
        [SerializeField, Tooltip(@"")]
        AssetParams @createdAsset;
        
        [SerializeField, Tooltip(@"The round for which this information is relevant.")]
        ulong @round;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("asset-holding")]
        public AssetHolding AssetHolding
        {
            get => this.@assetHolding;
            set => this.@assetHolding = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("created-asset")]
        public AssetParams CreatedAsset
        {
            get => this.@createdAsset;
            set => this.@createdAsset = value;
        }

        /// <summary>
        /// The round for which this information is relevant.        
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => this.@round;
            set => this.@round = value;
        }

        public bool Equals(AccountAssetResponse other)
        {
            return 
                AssetHolding.Equals(other.AssetHolding) &&
                CreatedAsset.Equals(other.CreatedAsset) &&
                Round.Equals(other.Round)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct BlockResponse
        : IEquatable<BlockResponse>
    {
        [SerializeField, Tooltip(@"Block header data.")]
        BlockHeader @block;
        
        [SerializeField, Tooltip(@"Optional certificate object. This is only included when the format is set to message pack.")]
        BlockCertificate @cert;
        
        /// <summary>
        /// Block header data.        
        /// </summary>
        [AlgoApiField("block")]
        public BlockHeader Block
        {
            get => this.@block;
            set => this.@block = value;
        }

        /// <summary>
        /// Optional certificate object. This is only included when the format is set to message pack.        
        /// </summary>
        [AlgoApiField("cert")]
        public BlockCertificate Cert
        {
            get => this.@cert;
            set => this.@cert = value;
        }

        public bool Equals(BlockResponse other)
        {
            return 
                Block.Equals(other.Block) &&
                Cert.Equals(other.Cert)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct CatchpointStartResponse
        : IEquatable<CatchpointStartResponse>
    {
        [SerializeField, Tooltip(@"Catchup start response string")]
        string @catchupMessage;
        
        /// <summary>
        /// Catchup start response string        
        /// </summary>
        [AlgoApiField("catchup-message")]
        public string CatchupMessage
        {
            get => this.@catchupMessage;
            set => this.@catchupMessage = value;
        }

        public bool Equals(CatchpointStartResponse other)
        {
            return 
                StringComparer.Equals(CatchupMessage, other.CatchupMessage)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PostParticipationResponse
        : IEquatable<PostParticipationResponse>
    {
        [SerializeField, Tooltip(@"encoding of the participation ID.")]
        string @partId;
        
        /// <summary>
        /// encoding of the participation ID.        
        /// </summary>
        [AlgoApiField("partId")]
        public string PartId
        {
            get => this.@partId;
            set => this.@partId = value;
        }

        public bool Equals(PostParticipationResponse other)
        {
            return 
                StringComparer.Equals(PartId, other.PartId)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct CompileResponse
        : IEquatable<CompileResponse>
    {
        [SerializeField, Tooltip(@"base32 SHA512_256 of program bytes (Address style)")]
        string @hash;
        
        [SerializeField, Tooltip(@"base64 encoded program bytes")]
        string @result;
        
        /// <summary>
        /// base32 SHA512_256 of program bytes (Address style)        
        /// </summary>
        [AlgoApiField("hash")]
        public string Hash
        {
            get => this.@hash;
            set => this.@hash = value;
        }

        /// <summary>
        /// base64 encoded program bytes        
        /// </summary>
        [AlgoApiField("result")]
        public string Result
        {
            get => this.@result;
            set => this.@result = value;
        }

        public bool Equals(CompileResponse other)
        {
            return 
                StringComparer.Equals(Hash, other.Hash) &&
                StringComparer.Equals(Result, other.Result)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ProofResponse
        : IEquatable<ProofResponse>
    {
        [SerializeField, Tooltip(@"The type of hash function used to create the proof, must be one of:
* sumhash 
* sha512_256")]
        HashType @hashtype;
        
        [SerializeField, Tooltip(@"Index of the transaction in the block's payset.")]
        ulong @idx;
        
        [SerializeField, Tooltip(@"Merkle proof of transaction membership.")]
        string @proof;
        
        [SerializeField, Tooltip(@"Hash of SignedTxnInBlock for verifying proof.")]
        string @stibhash;
        
        [SerializeField, Tooltip(@"Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.")]
        ulong @treedepth;
        
        /// <summary>
        /// The type of hash function used to create the proof, must be one of:
        /// * sumhash 
        /// * sha512_256        
        /// </summary>
        [AlgoApiField("hashtype")]
        public HashType Hashtype
        {
            get => this.@hashtype;
            set => this.@hashtype = value;
        }

        /// <summary>
        /// Index of the transaction in the block's payset.        
        /// </summary>
        [AlgoApiField("idx")]
        public ulong Idx
        {
            get => this.@idx;
            set => this.@idx = value;
        }

        /// <summary>
        /// Merkle proof of transaction membership.        
        /// </summary>
        [AlgoApiField("proof")]
        public string Proof
        {
            get => this.@proof;
            set => this.@proof = value;
        }

        /// <summary>
        /// Hash of SignedTxnInBlock for verifying proof.        
        /// </summary>
        [AlgoApiField("stibhash")]
        public string Stibhash
        {
            get => this.@stibhash;
            set => this.@stibhash = value;
        }

        /// <summary>
        /// Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.        
        /// </summary>
        [AlgoApiField("treedepth")]
        public ulong Treedepth
        {
            get => this.@treedepth;
            set => this.@treedepth = value;
        }

        public bool Equals(ProofResponse other)
        {
            return 
                Hashtype.Equals(other.Hashtype) &&
                Idx.Equals(other.Idx) &&
                StringComparer.Equals(Proof, other.Proof) &&
                StringComparer.Equals(Stibhash, other.Stibhash) &&
                Treedepth.Equals(other.Treedepth)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct NodeStatusResponse
        : IEquatable<NodeStatusResponse>
    {
        [SerializeField, Tooltip(@"StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress")]
        bool @stoppedAtUnsupportedRound;
        
        [SerializeField, Tooltip(@"The total number of blocks that are required to complete the current catchpoint catchup")]
        ulong @catchpointTotalBlocks;
        
        [SerializeField, Tooltip(@"LastVersion indicates the last consensus version supported")]
        string @lastVersion;
        
        [SerializeField, Tooltip(@"NextVersionRound is the round at which the next consensus version will apply")]
        ulong @nextVersionRound;
        
        [SerializeField, Tooltip(@"The total number of accounts included in the current catchpoint")]
        ulong @catchpointTotalAccounts;
        
        [SerializeField, Tooltip(@"TimeSinceLastRound in nanoseconds")]
        ulong @timeSinceLastRound;
        
        [SerializeField, Tooltip(@"NextVersion of consensus protocol to use")]
        string @nextVersion;
        
        [SerializeField, Tooltip(@"The number of accounts from the current catchpoint that have been verified so far as part of the catchup")]
        ulong @catchpointVerifiedAccounts;
        
        [SerializeField, Tooltip(@"CatchupTime in nanoseconds")]
        ulong @catchupTime;
        
        [SerializeField, Tooltip(@"The last catchpoint seen by the node")]
        string @lastCatchpoint;
        
        [SerializeField, Tooltip(@"LastRound indicates the last round seen")]
        ulong @lastRound;
        
        [SerializeField, Tooltip(@"NextVersionSupported indicates whether the next consensus version is supported by this node")]
        bool @nextVersionSupported;
        
        [SerializeField, Tooltip(@"The current catchpoint that is being caught up to")]
        string @catchpoint;
        
        [SerializeField, Tooltip(@"The number of blocks that have already been obtained by the node as part of the catchup")]
        ulong @catchpointAcquiredBlocks;
        
        [SerializeField, Tooltip(@"The number of accounts from the current catchpoint that have been processed so far as part of the catchup")]
        ulong @catchpointProcessedAccounts;
        
        /// <summary>
        /// StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress        
        /// </summary>
        [AlgoApiField("stopped-at-unsupported-round")]
        public bool StoppedAtUnsupportedRound
        {
            get => this.@stoppedAtUnsupportedRound;
            set => this.@stoppedAtUnsupportedRound = value;
        }

        /// <summary>
        /// The total number of blocks that are required to complete the current catchpoint catchup        
        /// </summary>
        [AlgoApiField("catchpoint-total-blocks")]
        public ulong CatchpointTotalBlocks
        {
            get => this.@catchpointTotalBlocks;
            set => this.@catchpointTotalBlocks = value;
        }

        /// <summary>
        /// LastVersion indicates the last consensus version supported        
        /// </summary>
        [AlgoApiField("last-version")]
        public string LastVersion
        {
            get => this.@lastVersion;
            set => this.@lastVersion = value;
        }

        /// <summary>
        /// NextVersionRound is the round at which the next consensus version will apply        
        /// </summary>
        [AlgoApiField("next-version-round")]
        public ulong NextVersionRound
        {
            get => this.@nextVersionRound;
            set => this.@nextVersionRound = value;
        }

        /// <summary>
        /// The total number of accounts included in the current catchpoint        
        /// </summary>
        [AlgoApiField("catchpoint-total-accounts")]
        public ulong CatchpointTotalAccounts
        {
            get => this.@catchpointTotalAccounts;
            set => this.@catchpointTotalAccounts = value;
        }

        /// <summary>
        /// TimeSinceLastRound in nanoseconds        
        /// </summary>
        [AlgoApiField("time-since-last-round")]
        public ulong TimeSinceLastRound
        {
            get => this.@timeSinceLastRound;
            set => this.@timeSinceLastRound = value;
        }

        /// <summary>
        /// NextVersion of consensus protocol to use        
        /// </summary>
        [AlgoApiField("next-version")]
        public string NextVersion
        {
            get => this.@nextVersion;
            set => this.@nextVersion = value;
        }

        /// <summary>
        /// The number of accounts from the current catchpoint that have been verified so far as part of the catchup        
        /// </summary>
        [AlgoApiField("catchpoint-verified-accounts")]
        public ulong CatchpointVerifiedAccounts
        {
            get => this.@catchpointVerifiedAccounts;
            set => this.@catchpointVerifiedAccounts = value;
        }

        /// <summary>
        /// CatchupTime in nanoseconds        
        /// </summary>
        [AlgoApiField("catchup-time")]
        public ulong CatchupTime
        {
            get => this.@catchupTime;
            set => this.@catchupTime = value;
        }

        /// <summary>
        /// The last catchpoint seen by the node        
        /// </summary>
        [AlgoApiField("last-catchpoint")]
        public string LastCatchpoint
        {
            get => this.@lastCatchpoint;
            set => this.@lastCatchpoint = value;
        }

        /// <summary>
        /// LastRound indicates the last round seen        
        /// </summary>
        [AlgoApiField("last-round")]
        public ulong LastRound
        {
            get => this.@lastRound;
            set => this.@lastRound = value;
        }

        /// <summary>
        /// NextVersionSupported indicates whether the next consensus version is supported by this node        
        /// </summary>
        [AlgoApiField("next-version-supported")]
        public bool NextVersionSupported
        {
            get => this.@nextVersionSupported;
            set => this.@nextVersionSupported = value;
        }

        /// <summary>
        /// The current catchpoint that is being caught up to        
        /// </summary>
        [AlgoApiField("catchpoint")]
        public string Catchpoint
        {
            get => this.@catchpoint;
            set => this.@catchpoint = value;
        }

        /// <summary>
        /// The number of blocks that have already been obtained by the node as part of the catchup        
        /// </summary>
        [AlgoApiField("catchpoint-acquired-blocks")]
        public ulong CatchpointAcquiredBlocks
        {
            get => this.@catchpointAcquiredBlocks;
            set => this.@catchpointAcquiredBlocks = value;
        }

        /// <summary>
        /// The number of accounts from the current catchpoint that have been processed so far as part of the catchup        
        /// </summary>
        [AlgoApiField("catchpoint-processed-accounts")]
        public ulong CatchpointProcessedAccounts
        {
            get => this.@catchpointProcessedAccounts;
            set => this.@catchpointProcessedAccounts = value;
        }

        public bool Equals(NodeStatusResponse other)
        {
            return 
                StoppedAtUnsupportedRound.Equals(other.StoppedAtUnsupportedRound) &&
                CatchpointTotalBlocks.Equals(other.CatchpointTotalBlocks) &&
                StringComparer.Equals(LastVersion, other.LastVersion) &&
                NextVersionRound.Equals(other.NextVersionRound) &&
                CatchpointTotalAccounts.Equals(other.CatchpointTotalAccounts) &&
                TimeSinceLastRound.Equals(other.TimeSinceLastRound) &&
                StringComparer.Equals(NextVersion, other.NextVersion) &&
                CatchpointVerifiedAccounts.Equals(other.CatchpointVerifiedAccounts) &&
                CatchupTime.Equals(other.CatchupTime) &&
                StringComparer.Equals(LastCatchpoint, other.LastCatchpoint) &&
                LastRound.Equals(other.LastRound) &&
                NextVersionSupported.Equals(other.NextVersionSupported) &&
                StringComparer.Equals(Catchpoint, other.Catchpoint) &&
                CatchpointAcquiredBlocks.Equals(other.CatchpointAcquiredBlocks) &&
                CatchpointProcessedAccounts.Equals(other.CatchpointProcessedAccounts)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TransactionParametersResponse
        : IEquatable<TransactionParametersResponse>
    {
        [SerializeField, Tooltip(@"ConsensusVersion indicates the consensus protocol version
as of LastRound.")]
        string @consensusVersion;
        
        [SerializeField, Tooltip(@"Fee is the suggested transaction fee
Fee is in units of micro-Algos per byte.
Fee may fall to zero but transactions must still have a fee of
at least MinTxnFee for the current network protocol.")]
        ulong @fee;
        
        [SerializeField, Tooltip(@"GenesisHash is the hash of the genesis block.")]
        string @genesisHash;
        
        [SerializeField, Tooltip(@"GenesisID is an ID listed in the genesis block.")]
        string @genesisId;
        
        [SerializeField, Tooltip(@"LastRound indicates the last round seen")]
        ulong @lastRound;
        
        [SerializeField, Tooltip(@"The minimum transaction fee (not per byte) required for the
txn to validate for the current network protocol.")]
        ulong @minFee;
        
        /// <summary>
        /// ConsensusVersion indicates the consensus protocol version
        /// as of LastRound.        
        /// </summary>
        [AlgoApiField("consensus-version")]
        public string ConsensusVersion
        {
            get => this.@consensusVersion;
            set => this.@consensusVersion = value;
        }

        /// <summary>
        /// Fee is the suggested transaction fee
        /// Fee is in units of micro-Algos per byte.
        /// Fee may fall to zero but transactions must still have a fee of
        /// at least MinTxnFee for the current network protocol.        
        /// </summary>
        [AlgoApiField("fee")]
        public ulong Fee
        {
            get => this.@fee;
            set => this.@fee = value;
        }

        /// <summary>
        /// GenesisHash is the hash of the genesis block.        
        /// </summary>
        [AlgoApiField("genesis-hash")]
        public string GenesisHash
        {
            get => this.@genesisHash;
            set => this.@genesisHash = value;
        }

        /// <summary>
        /// GenesisID is an ID listed in the genesis block.        
        /// </summary>
        [AlgoApiField("genesis-id")]
        public string GenesisId
        {
            get => this.@genesisId;
            set => this.@genesisId = value;
        }

        /// <summary>
        /// LastRound indicates the last round seen        
        /// </summary>
        [AlgoApiField("last-round")]
        public ulong LastRound
        {
            get => this.@lastRound;
            set => this.@lastRound = value;
        }

        /// <summary>
        /// The minimum transaction fee (not per byte) required for the
        /// txn to validate for the current network protocol.        
        /// </summary>
        [AlgoApiField("min-fee")]
        public ulong MinFee
        {
            get => this.@minFee;
            set => this.@minFee = value;
        }

        public bool Equals(TransactionParametersResponse other)
        {
            return 
                StringComparer.Equals(ConsensusVersion, other.ConsensusVersion) &&
                Fee.Equals(other.Fee) &&
                StringComparer.Equals(GenesisHash, other.GenesisHash) &&
                StringComparer.Equals(GenesisId, other.GenesisId) &&
                LastRound.Equals(other.LastRound) &&
                MinFee.Equals(other.MinFee)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct SupplyResponse
        : IEquatable<SupplyResponse>
    {
        [SerializeField, Tooltip(@"Round")]
        ulong @current_round;
        
        [SerializeField, Tooltip(@"OnlineMoney")]
        ulong @onlineMoney;
        
        [SerializeField, Tooltip(@"TotalMoney")]
        ulong @totalMoney;
        
        /// <summary>
        /// Round        
        /// </summary>
        [AlgoApiField("current_round")]
        public ulong Current_round
        {
            get => this.@current_round;
            set => this.@current_round = value;
        }

        /// <summary>
        /// OnlineMoney        
        /// </summary>
        [AlgoApiField("online-money")]
        public ulong OnlineMoney
        {
            get => this.@onlineMoney;
            set => this.@onlineMoney = value;
        }

        /// <summary>
        /// TotalMoney        
        /// </summary>
        [AlgoApiField("total-money")]
        public ulong TotalMoney
        {
            get => this.@totalMoney;
            set => this.@totalMoney = value;
        }

        public bool Equals(SupplyResponse other)
        {
            return 
                Current_round.Equals(other.Current_round) &&
                OnlineMoney.Equals(other.OnlineMoney) &&
                TotalMoney.Equals(other.TotalMoney)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PendingTransactionsResponse
        : IEquatable<PendingTransactionsResponse>
    {
        [SerializeField, Tooltip(@"An array of signed transaction objects.")]
        SignedTxn[] @topTransactions;
        
        [SerializeField, Tooltip(@"Total number of transactions in the pool.")]
        ulong @totalTransactions;
        
        /// <summary>
        /// An array of signed transaction objects.        
        /// </summary>
        [AlgoApiField("top-transactions")]
        public SignedTxn[] TopTransactions
        {
            get => this.@topTransactions;
            set => this.@topTransactions = value;
        }

        /// <summary>
        /// Total number of transactions in the pool.        
        /// </summary>
        [AlgoApiField("total-transactions")]
        public ulong TotalTransactions
        {
            get => this.@totalTransactions;
            set => this.@totalTransactions = value;
        }

        public bool Equals(PendingTransactionsResponse other)
        {
            return 
                ArrayComparer.Equals(TopTransactions, other.TopTransactions) &&
                TotalTransactions.Equals(other.TotalTransactions)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountApplicationResponse
        : IEquatable<AccountApplicationResponse>
    {
        [SerializeField, Tooltip(@"")]
        ApplicationLocalState @appLocalState;
        
        [SerializeField, Tooltip(@"")]
        ApplicationParams @createdApp;
        
        [SerializeField, Tooltip(@"The round for which this information is relevant.")]
        ulong @round;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("app-local-state")]
        public ApplicationLocalState AppLocalState
        {
            get => this.@appLocalState;
            set => this.@appLocalState = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("created-app")]
        public ApplicationParams CreatedApp
        {
            get => this.@createdApp;
            set => this.@createdApp = value;
        }

        /// <summary>
        /// The round for which this information is relevant.        
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => this.@round;
            set => this.@round = value;
        }

        public bool Equals(AccountApplicationResponse other)
        {
            return 
                AppLocalState.Equals(other.AppLocalState) &&
                CreatedApp.Equals(other.CreatedApp) &&
                Round.Equals(other.Round)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PostTransactionsResponse
        : IEquatable<PostTransactionsResponse>
    {
        [SerializeField, Tooltip(@"encoding of the transaction hash.")]
        string @txId;
        
        /// <summary>
        /// encoding of the transaction hash.        
        /// </summary>
        [AlgoApiField("txId")]
        public string TxId
        {
            get => this.@txId;
            set => this.@txId = value;
        }

        public bool Equals(PostTransactionsResponse other)
        {
            return 
                StringComparer.Equals(TxId, other.TxId)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunResponse
        : IEquatable<DryrunResponse>
    {
        [SerializeField, Tooltip(@"")]
        string @error;
        
        [SerializeField, Tooltip(@"Protocol version is the protocol version Dryrun was operated under.")]
        string @protocolVersion;
        
        [SerializeField, Tooltip(@"")]
        DryrunTxnResult[] @txns;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("error")]
        public string Error
        {
            get => this.@error;
            set => this.@error = value;
        }

        /// <summary>
        /// Protocol version is the protocol version Dryrun was operated under.        
        /// </summary>
        [AlgoApiField("protocol-version")]
        public string ProtocolVersion
        {
            get => this.@protocolVersion;
            set => this.@protocolVersion = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("txns")]
        public DryrunTxnResult[] Txns
        {
            get => this.@txns;
            set => this.@txns = value;
        }

        public bool Equals(DryrunResponse other)
        {
            return 
                StringComparer.Equals(Error, other.Error) &&
                StringComparer.Equals(ProtocolVersion, other.ProtocolVersion) &&
                ArrayComparer.Equals(Txns, other.Txns)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ApplicationParams
        : IEquatable<ApplicationParams>
    {
        [SerializeField, Tooltip(@"[approv] approval program.")]
        CompiledTeal @approvalProgram;
        
        [SerializeField, Tooltip(@"[clearp] approval program.")]
        CompiledTeal @clearStateProgram;
        
        [SerializeField, Tooltip(@"The address that created this application. This is the address where the parameters and global state for this application can be found.")]
        Address @creator;
        
        [SerializeField, Tooltip(@"[epp] the amount of extra program pages available to this app.")]
        ulong @extraProgramPages;
        
        [SerializeField, Tooltip(@"")]
        TealKeyValueStore @globalState;
        
        [SerializeField, Tooltip(@"")]
        ApplicationStateSchema @globalStateSchema;
        
        [SerializeField, Tooltip(@"")]
        ApplicationStateSchema @localStateSchema;
        
        /// <summary>
        /// [approv] approval program.        
        /// </summary>
        [AlgoApiField("approval-program")]
        public CompiledTeal ApprovalProgram
        {
            get => this.@approvalProgram;
            set => this.@approvalProgram = value;
        }

        /// <summary>
        /// [clearp] approval program.        
        /// </summary>
        [AlgoApiField("clear-state-program")]
        public CompiledTeal ClearStateProgram
        {
            get => this.@clearStateProgram;
            set => this.@clearStateProgram = value;
        }

        /// <summary>
        /// The address that created this application. This is the address where the parameters and global state for this application can be found.        
        /// </summary>
        [AlgoApiField("creator")]
        public Address Creator
        {
            get => this.@creator;
            set => this.@creator = value;
        }

        /// <summary>
        /// [epp] the amount of extra program pages available to this app.        
        /// </summary>
        [AlgoApiField("extra-program-pages")]
        public ulong ExtraProgramPages
        {
            get => this.@extraProgramPages;
            set => this.@extraProgramPages = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("global-state")]
        public TealKeyValueStore GlobalState
        {
            get => this.@globalState;
            set => this.@globalState = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("global-state-schema")]
        public ApplicationStateSchema GlobalStateSchema
        {
            get => this.@globalStateSchema;
            set => this.@globalStateSchema = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("local-state-schema")]
        public ApplicationStateSchema LocalStateSchema
        {
            get => this.@localStateSchema;
            set => this.@localStateSchema = value;
        }

        public bool Equals(ApplicationParams other)
        {
            return 
                ApprovalProgram.Equals(other.ApprovalProgram) &&
                ClearStateProgram.Equals(other.ClearStateProgram) &&
                Creator.Equals(other.Creator) &&
                ExtraProgramPages.Equals(other.ExtraProgramPages) &&
                GlobalState.Equals(other.GlobalState) &&
                GlobalStateSchema.Equals(other.GlobalStateSchema) &&
                LocalStateSchema.Equals(other.LocalStateSchema)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TealValue
        : IEquatable<TealValue>
    {
        [SerializeField, Tooltip(@"[tb] bytes value.")]
        string @bytes;
        
        [SerializeField, Tooltip(@"[tt] value type. Value `1` refers to **bytes**, value `2` refers to **uint**")]
        ulong @type;
        
        [SerializeField, Tooltip(@"[ui] uint value.")]
        ulong @uint;
        
        /// <summary>
        /// [tb] bytes value.        
        /// </summary>
        [AlgoApiField("bytes")]
        public string Bytes
        {
            get => this.@bytes;
            set => this.@bytes = value;
        }

        /// <summary>
        /// [tt] value type. Value `1` refers to **bytes**, value `2` refers to **uint**        
        /// </summary>
        [AlgoApiField("type")]
        public ulong Type
        {
            get => this.@type;
            set => this.@type = value;
        }

        /// <summary>
        /// [ui] uint value.        
        /// </summary>
        [AlgoApiField("uint")]
        public ulong Uint
        {
            get => this.@uint;
            set => this.@uint = value;
        }

        public bool Equals(TealValue other)
        {
            return 
                StringComparer.Equals(Bytes, other.Bytes) &&
                Type.Equals(other.Type) &&
                Uint.Equals(other.Uint)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ParticipationKey
        : IEquatable<ParticipationKey>
    {
        [SerializeField, Tooltip(@"Address the key was generated for.")]
        Address @address;
        
        [SerializeField, Tooltip(@"When registered, this is the first round it may be used.")]
        ulong @effectiveFirstValid;
        
        [SerializeField, Tooltip(@"When registered, this is the last round it may be used.")]
        ulong @effectiveLastValid;
        
        [SerializeField, Tooltip(@"The key's ParticipationID.")]
        string @id;
        
        [SerializeField, Tooltip(@"")]
        AccountParticipation @key;
        
        [SerializeField, Tooltip(@"Round when this key was last used to propose a block.")]
        ulong @lastBlockProposal;
        
        [SerializeField, Tooltip(@"Round when this key was last used to generate a state proof.")]
        ulong @lastStateProof;
        
        [SerializeField, Tooltip(@"Round when this key was last used to vote.")]
        ulong @lastVote;
        
        /// <summary>
        /// Address the key was generated for.        
        /// </summary>
        [AlgoApiField("address")]
        public Address Address
        {
            get => this.@address;
            set => this.@address = value;
        }

        /// <summary>
        /// When registered, this is the first round it may be used.        
        /// </summary>
        [AlgoApiField("effective-first-valid")]
        public ulong EffectiveFirstValid
        {
            get => this.@effectiveFirstValid;
            set => this.@effectiveFirstValid = value;
        }

        /// <summary>
        /// When registered, this is the last round it may be used.        
        /// </summary>
        [AlgoApiField("effective-last-valid")]
        public ulong EffectiveLastValid
        {
            get => this.@effectiveLastValid;
            set => this.@effectiveLastValid = value;
        }

        /// <summary>
        /// The key's ParticipationID.        
        /// </summary>
        [AlgoApiField("id")]
        public string Id
        {
            get => this.@id;
            set => this.@id = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("key")]
        public AccountParticipation Key
        {
            get => this.@key;
            set => this.@key = value;
        }

        /// <summary>
        /// Round when this key was last used to propose a block.        
        /// </summary>
        [AlgoApiField("last-block-proposal")]
        public ulong LastBlockProposal
        {
            get => this.@lastBlockProposal;
            set => this.@lastBlockProposal = value;
        }

        /// <summary>
        /// Round when this key was last used to generate a state proof.        
        /// </summary>
        [AlgoApiField("last-state-proof")]
        public ulong LastStateProof
        {
            get => this.@lastStateProof;
            set => this.@lastStateProof = value;
        }

        /// <summary>
        /// Round when this key was last used to vote.        
        /// </summary>
        [AlgoApiField("last-vote")]
        public ulong LastVote
        {
            get => this.@lastVote;
            set => this.@lastVote = value;
        }

        public bool Equals(ParticipationKey other)
        {
            return 
                Address.Equals(other.Address) &&
                EffectiveFirstValid.Equals(other.EffectiveFirstValid) &&
                EffectiveLastValid.Equals(other.EffectiveLastValid) &&
                StringComparer.Equals(Id, other.Id) &&
                Key.Equals(other.Key) &&
                LastBlockProposal.Equals(other.LastBlockProposal) &&
                LastStateProof.Equals(other.LastStateProof) &&
                LastVote.Equals(other.LastVote)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct EvalDelta
        : IEquatable<EvalDelta>
    {
        [SerializeField, Tooltip(@"[at] delta action.")]
        ulong @action;
        
        [SerializeField, Tooltip(@"[bs] bytes value.")]
        string @bytes;
        
        [SerializeField, Tooltip(@"[ui] uint value.")]
        ulong @uint;
        
        /// <summary>
        /// [at] delta action.        
        /// </summary>
        [AlgoApiField("action")]
        public ulong Action
        {
            get => this.@action;
            set => this.@action = value;
        }

        /// <summary>
        /// [bs] bytes value.        
        /// </summary>
        [AlgoApiField("bytes")]
        public string Bytes
        {
            get => this.@bytes;
            set => this.@bytes = value;
        }

        /// <summary>
        /// [ui] uint value.        
        /// </summary>
        [AlgoApiField("uint")]
        public ulong Uint
        {
            get => this.@uint;
            set => this.@uint = value;
        }

        public bool Equals(EvalDelta other)
        {
            return 
                Action.Equals(other.Action) &&
                StringComparer.Equals(Bytes, other.Bytes) &&
                Uint.Equals(other.Uint)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ApplicationStateSchema
        : IEquatable<ApplicationStateSchema>
    {
        [SerializeField, Tooltip(@"[nbs] num of byte slices.")]
        ulong @numByteSlice;
        
        [SerializeField, Tooltip(@"[nui] num of uints.")]
        ulong @numUint;
        
        /// <summary>
        /// [nbs] num of byte slices.        
        /// </summary>
        [AlgoApiField("num-byte-slice")]
        public ulong NumByteSlice
        {
            get => this.@numByteSlice;
            set => this.@numByteSlice = value;
        }

        /// <summary>
        /// [nui] num of uints.        
        /// </summary>
        [AlgoApiField("num-uint")]
        public ulong NumUint
        {
            get => this.@numUint;
            set => this.@numUint = value;
        }

        public bool Equals(ApplicationStateSchema other)
        {
            return 
                NumByteSlice.Equals(other.NumByteSlice) &&
                NumUint.Equals(other.NumUint)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunState
        : IEquatable<DryrunState>
    {
        [SerializeField, Tooltip(@"Evaluation error if any")]
        string @error;
        
        [SerializeField, Tooltip(@"Line number")]
        ulong @line;
        
        [SerializeField, Tooltip(@"Program counter")]
        ulong @pc;
        
        [SerializeField, Tooltip(@"")]
        TealValue[] @scratch;
        
        [SerializeField, Tooltip(@"")]
        TealValue[] @stack;
        
        /// <summary>
        /// Evaluation error if any        
        /// </summary>
        [AlgoApiField("error")]
        public string Error
        {
            get => this.@error;
            set => this.@error = value;
        }

        /// <summary>
        /// Line number        
        /// </summary>
        [AlgoApiField("line")]
        public ulong Line
        {
            get => this.@line;
            set => this.@line = value;
        }

        /// <summary>
        /// Program counter        
        /// </summary>
        [AlgoApiField("pc")]
        public ulong Pc
        {
            get => this.@pc;
            set => this.@pc = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("scratch")]
        public TealValue[] Scratch
        {
            get => this.@scratch;
            set => this.@scratch = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("stack")]
        public TealValue[] Stack
        {
            get => this.@stack;
            set => this.@stack = value;
        }

        public bool Equals(DryrunState other)
        {
            return 
                StringComparer.Equals(Error, other.Error) &&
                Line.Equals(other.Line) &&
                Pc.Equals(other.Pc) &&
                ArrayComparer.Equals(Scratch, other.Scratch) &&
                ArrayComparer.Equals(Stack, other.Stack)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct BuildVersion
        : IEquatable<BuildVersion>
    {
        [SerializeField, Tooltip(@"")]
        string @branch;
        
        [SerializeField, Tooltip(@"")]
        ulong @build_number;
        
        [SerializeField, Tooltip(@"")]
        string @channel;
        
        [SerializeField, Tooltip(@"")]
        string @commit_hash;
        
        [SerializeField, Tooltip(@"")]
        ulong @major;
        
        [SerializeField, Tooltip(@"")]
        ulong @minor;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("branch")]
        public string Branch
        {
            get => this.@branch;
            set => this.@branch = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("build_number")]
        public ulong Build_number
        {
            get => this.@build_number;
            set => this.@build_number = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("channel")]
        public string Channel
        {
            get => this.@channel;
            set => this.@channel = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("commit_hash")]
        public string Commit_hash
        {
            get => this.@commit_hash;
            set => this.@commit_hash = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("major")]
        public ulong Major
        {
            get => this.@major;
            set => this.@major = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("minor")]
        public ulong Minor
        {
            get => this.@minor;
            set => this.@minor = value;
        }

        public bool Equals(BuildVersion other)
        {
            return 
                StringComparer.Equals(Branch, other.Branch) &&
                Build_number.Equals(other.Build_number) &&
                StringComparer.Equals(Channel, other.Channel) &&
                StringComparer.Equals(Commit_hash, other.Commit_hash) &&
                Major.Equals(other.Major) &&
                Minor.Equals(other.Minor)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunRequest
        : IEquatable<DryrunRequest>
    {
        [SerializeField, Tooltip(@"")]
        Account[] @accounts;
        
        [SerializeField, Tooltip(@"")]
        Application[] @apps;
        
        [SerializeField, Tooltip(@"LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.")]
        ulong @latestTimestamp;
        
        [SerializeField, Tooltip(@"ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.")]
        string @protocolVersion;
        
        [SerializeField, Tooltip(@"Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.")]
        ulong @round;
        
        [SerializeField, Tooltip(@"")]
        DryrunSource[] @sources;
        
        [SerializeField, Tooltip(@"")]
        byte[][] @txns;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("accounts")]
        public Account[] Accounts
        {
            get => this.@accounts;
            set => this.@accounts = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("apps")]
        public Application[] Apps
        {
            get => this.@apps;
            set => this.@apps = value;
        }

        /// <summary>
        /// LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.        
        /// </summary>
        [AlgoApiField("latest-timestamp")]
        public ulong LatestTimestamp
        {
            get => this.@latestTimestamp;
            set => this.@latestTimestamp = value;
        }

        /// <summary>
        /// ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.        
        /// </summary>
        [AlgoApiField("protocol-version")]
        public string ProtocolVersion
        {
            get => this.@protocolVersion;
            set => this.@protocolVersion = value;
        }

        /// <summary>
        /// Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.        
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => this.@round;
            set => this.@round = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("sources")]
        public DryrunSource[] Sources
        {
            get => this.@sources;
            set => this.@sources = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("txns")]
        public byte[][] Txns
        {
            get => this.@txns;
            set => this.@txns = value;
        }

        public bool Equals(DryrunRequest other)
        {
            return 
                ArrayComparer.Equals(Accounts, other.Accounts) &&
                ArrayComparer.Equals(Apps, other.Apps) &&
                LatestTimestamp.Equals(other.LatestTimestamp) &&
                StringComparer.Equals(ProtocolVersion, other.ProtocolVersion) &&
                Round.Equals(other.Round) &&
                ArrayComparer.Equals(Sources, other.Sources) &&
                ArrayComparer.Equals(Txns, other.Txns)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Asset
        : IEquatable<Asset>
    {
        [SerializeField, Tooltip(@"unique asset identifier")]
        ulong @index;
        
        [SerializeField, Tooltip(@"")]
        AssetParams @params;
        
        /// <summary>
        /// unique asset identifier        
        /// </summary>
        [AlgoApiField("index")]
        public ulong Index
        {
            get => this.@index;
            set => this.@index = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("params")]
        public AssetParams Params
        {
            get => this.@params;
            set => this.@params = value;
        }

        public bool Equals(Asset other)
        {
            return 
                Index.Equals(other.Index) &&
                Params.Equals(other.Params)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TealKeyValue
        : IEquatable<TealKeyValue>
    {
        [SerializeField, Tooltip(@"")]
        string @key;
        
        [SerializeField, Tooltip(@"")]
        TealValue @value;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("key")]
        public string Key
        {
            get => this.@key;
            set => this.@key = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("value")]
        public TealValue Value
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(TealKeyValue other)
        {
            return 
                StringComparer.Equals(Key, other.Key) &&
                Value.Equals(other.Value)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PendingTransactionResponse
        : IEquatable<PendingTransactionResponse>
    {
        [SerializeField, Tooltip(@"Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.
")]
        string @poolError;
        
        [SerializeField, Tooltip(@"[lg] Logs for the application being executed by this transaction.")]
        string[] @logs;
        
        [SerializeField, Tooltip(@"Rewards in microalgos applied to the sender account.")]
        ulong @senderRewards;
        
        [SerializeField, Tooltip(@"Closing amount for the transaction.")]
        ulong @closingAmount;
        
        [SerializeField, Tooltip(@"The raw signed transaction.")]
        SignedTxn @txn;
        
        [SerializeField, Tooltip(@"")]
        StateDelta @globalStateDelta;
        
        [SerializeField, Tooltip(@"The number of the asset's unit that were transferred to the close-to address.")]
        ulong @assetClosingAmount;
        
        [SerializeField, Tooltip(@"The round where this transaction was confirmed, if present.")]
        ulong @confirmedRound;
        
        [SerializeField, Tooltip(@"The application index if the transaction was found and it created an application.")]
        ulong @applicationIndex;
        
        [SerializeField, Tooltip(@"Rewards in microalgos applied to the receiver account.")]
        ulong @receiverRewards;
        
        [SerializeField, Tooltip(@"Inner transactions produced by application execution.")]
        PendingTransactionResponse[] @innerTxns;
        
        [SerializeField, Tooltip(@"The asset index if the transaction was found and it created an asset.")]
        ulong @assetIndex;
        
        [SerializeField, Tooltip(@"Rewards in microalgos applied to the close remainder to account.")]
        ulong @closeRewards;
        
        [SerializeField, Tooltip(@"[ld] Local state key/value changes for the application being executed by this transaction.")]
        AccountStateDelta[] @localStateDelta;
        
        /// <summary>
        /// Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.        
        /// </summary>
        [AlgoApiField("pool-error")]
        public string PoolError
        {
            get => this.@poolError;
            set => this.@poolError = value;
        }

        /// <summary>
        /// [lg] Logs for the application being executed by this transaction.        
        /// </summary>
        [AlgoApiField("logs")]
        public string[] Logs
        {
            get => this.@logs;
            set => this.@logs = value;
        }

        /// <summary>
        /// Rewards in microalgos applied to the sender account.        
        /// </summary>
        [AlgoApiField("sender-rewards")]
        public ulong SenderRewards
        {
            get => this.@senderRewards;
            set => this.@senderRewards = value;
        }

        /// <summary>
        /// Closing amount for the transaction.        
        /// </summary>
        [AlgoApiField("closing-amount")]
        public ulong ClosingAmount
        {
            get => this.@closingAmount;
            set => this.@closingAmount = value;
        }

        /// <summary>
        /// The raw signed transaction.        
        /// </summary>
        [AlgoApiField("txn")]
        public SignedTxn Txn
        {
            get => this.@txn;
            set => this.@txn = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("global-state-delta")]
        public StateDelta GlobalStateDelta
        {
            get => this.@globalStateDelta;
            set => this.@globalStateDelta = value;
        }

        /// <summary>
        /// The number of the asset's unit that were transferred to the close-to address.        
        /// </summary>
        [AlgoApiField("asset-closing-amount")]
        public ulong AssetClosingAmount
        {
            get => this.@assetClosingAmount;
            set => this.@assetClosingAmount = value;
        }

        /// <summary>
        /// The round where this transaction was confirmed, if present.        
        /// </summary>
        [AlgoApiField("confirmed-round")]
        public ulong ConfirmedRound
        {
            get => this.@confirmedRound;
            set => this.@confirmedRound = value;
        }

        /// <summary>
        /// The application index if the transaction was found and it created an application.        
        /// </summary>
        [AlgoApiField("application-index")]
        public ulong ApplicationIndex
        {
            get => this.@applicationIndex;
            set => this.@applicationIndex = value;
        }

        /// <summary>
        /// Rewards in microalgos applied to the receiver account.        
        /// </summary>
        [AlgoApiField("receiver-rewards")]
        public ulong ReceiverRewards
        {
            get => this.@receiverRewards;
            set => this.@receiverRewards = value;
        }

        /// <summary>
        /// Inner transactions produced by application execution.        
        /// </summary>
        [AlgoApiField("inner-txns")]
        public PendingTransactionResponse[] InnerTxns
        {
            get => this.@innerTxns;
            set => this.@innerTxns = value;
        }

        /// <summary>
        /// The asset index if the transaction was found and it created an asset.        
        /// </summary>
        [AlgoApiField("asset-index")]
        public ulong AssetIndex
        {
            get => this.@assetIndex;
            set => this.@assetIndex = value;
        }

        /// <summary>
        /// Rewards in microalgos applied to the close remainder to account.        
        /// </summary>
        [AlgoApiField("close-rewards")]
        public ulong CloseRewards
        {
            get => this.@closeRewards;
            set => this.@closeRewards = value;
        }

        /// <summary>
        /// [ld] Local state key/value changes for the application being executed by this transaction.        
        /// </summary>
        [AlgoApiField("local-state-delta")]
        public AccountStateDelta[] LocalStateDelta
        {
            get => this.@localStateDelta;
            set => this.@localStateDelta = value;
        }

        public bool Equals(PendingTransactionResponse other)
        {
            return 
                StringComparer.Equals(PoolError, other.PoolError) &&
                ArrayComparer.Equals(Logs, other.Logs) &&
                SenderRewards.Equals(other.SenderRewards) &&
                ClosingAmount.Equals(other.ClosingAmount) &&
                Txn.Equals(other.Txn) &&
                GlobalStateDelta.Equals(other.GlobalStateDelta) &&
                AssetClosingAmount.Equals(other.AssetClosingAmount) &&
                ConfirmedRound.Equals(other.ConfirmedRound) &&
                ApplicationIndex.Equals(other.ApplicationIndex) &&
                ReceiverRewards.Equals(other.ReceiverRewards) &&
                ArrayComparer.Equals(InnerTxns, other.InnerTxns) &&
                AssetIndex.Equals(other.AssetIndex) &&
                CloseRewards.Equals(other.CloseRewards) &&
                ArrayComparer.Equals(LocalStateDelta, other.LocalStateDelta)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunSource
        : IEquatable<DryrunSource>
    {
        [SerializeField, Tooltip(@"")]
        ulong @appIndex;
        
        [SerializeField, Tooltip(@"FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].")]
        string @fieldName;
        
        [SerializeField, Tooltip(@"")]
        string @source;
        
        [SerializeField, Tooltip(@"")]
        ulong @txnIndex;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("app-index")]
        public ulong AppIndex
        {
            get => this.@appIndex;
            set => this.@appIndex = value;
        }

        /// <summary>
        /// FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].        
        /// </summary>
        [AlgoApiField("field-name")]
        public string FieldName
        {
            get => this.@fieldName;
            set => this.@fieldName = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("source")]
        public string Source
        {
            get => this.@source;
            set => this.@source = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("txn-index")]
        public ulong TxnIndex
        {
            get => this.@txnIndex;
            set => this.@txnIndex = value;
        }

        public bool Equals(DryrunSource other)
        {
            return 
                AppIndex.Equals(other.AppIndex) &&
                StringComparer.Equals(FieldName, other.FieldName) &&
                StringComparer.Equals(Source, other.Source) &&
                TxnIndex.Equals(other.TxnIndex)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct EvalDeltaKeyValue
        : IEquatable<EvalDeltaKeyValue>
    {
        [SerializeField, Tooltip(@"")]
        string @key;
        
        [SerializeField, Tooltip(@"")]
        EvalDelta @value;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("key")]
        public string Key
        {
            get => this.@key;
            set => this.@key = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("value")]
        public EvalDelta Value
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(EvalDeltaKeyValue other)
        {
            return 
                StringComparer.Equals(Key, other.Key) &&
                Value.Equals(other.Value)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AssetHolding
        : IEquatable<AssetHolding>
    {
        [SerializeField, Tooltip(@"[a] number of units held.")]
        ulong @amount;
        
        [SerializeField, Tooltip(@"Asset ID of the holding.")]
        AssetIndex @assetId;
        
        [SerializeField, Tooltip(@"[f] whether or not the holding is frozen.")]
        bool @isFrozen;
        
        /// <summary>
        /// [a] number of units held.        
        /// </summary>
        [AlgoApiField("amount")]
        public ulong Amount
        {
            get => this.@amount;
            set => this.@amount = value;
        }

        /// <summary>
        /// Asset ID of the holding.        
        /// </summary>
        [AlgoApiField("asset-id")]
        public AssetIndex AssetId
        {
            get => this.@assetId;
            set => this.@assetId = value;
        }

        /// <summary>
        /// [f] whether or not the holding is frozen.        
        /// </summary>
        [AlgoApiField("is-frozen")]
        public bool IsFrozen
        {
            get => this.@isFrozen;
            set => this.@isFrozen = value;
        }

        public bool Equals(AssetHolding other)
        {
            return 
                Amount.Equals(other.Amount) &&
                AssetId.Equals(other.AssetId) &&
                IsFrozen.Equals(other.IsFrozen)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Account
        : IEquatable<Account>
    {
        [SerializeField, Tooltip(@"[algo] total number of MicroAlgos in the account")]
        ulong @amount;
        
        [SerializeField, Tooltip(@"the account public key")]
        string @address;
        
        [SerializeField, Tooltip(@"[ern] total rewards of MicroAlgos the account has received, including pending rewards.")]
        ulong @rewards;
        
        [SerializeField, Tooltip(@"specifies the amount of MicroAlgos in the account, without the pending rewards.")]
        ulong @amountWithoutPendingRewards;
        
        [SerializeField, Tooltip(@"[teap] the sum of all extra application program pages for this account.")]
        ulong @appsTotalExtraPages;
        
        [SerializeField, Tooltip(@"The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.")]
        ulong @totalAssetsOptedIn;
        
        [SerializeField, Tooltip(@"[asset] assets held by this account.

Note the raw object uses `map[int] -&gt; AssetHolding` for this type.")]
        AssetHolding[] @assets;
        
        [SerializeField, Tooltip(@"")]
        AccountParticipation @participation;
        
        [SerializeField, Tooltip(@"")]
        ApplicationStateSchema @appsTotalSchema;
        
        [SerializeField, Tooltip(@"The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.")]
        ulong @totalAppsOptedIn;
        
        [SerializeField, Tooltip(@"The round for which this information is relevant.")]
        ulong @round;
        
        [SerializeField, Tooltip(@"amount of MicroAlgos of pending rewards in this account.")]
        ulong @pendingRewards;
        
        [SerializeField, Tooltip(@"[appp] parameters of applications created by this account including app global data.

Note: the raw account uses `map[int] -&gt; AppParams` for this type.")]
        Application[] @createdApps;
        
        [SerializeField, Tooltip(@"[onl] delegation status of the account's MicroAlgos
* Offline - indicates that the associated account is delegated.
*  Online  - indicates that the associated account used as part of the delegation pool.
*   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.")]
        string @status;
        
        [SerializeField, Tooltip(@"Indicates what type of signature is used by this account, must be one of:
* sig
* msig
* lsig")]
        SignatureType @sigType;
        
        [SerializeField, Tooltip(@"[spend] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.")]
        Address @authAddr;
        
        [SerializeField, Tooltip(@"The count of all assets (AssetParams objects) created by this account.")]
        ulong @totalCreatedAssets;
        
        [SerializeField, Tooltip(@"MicroAlgo balance required by the account.

The requirement grows based on asset and application usage.")]
        ulong @minBalance;
        
        [SerializeField, Tooltip(@"[ebase] used as part of the rewards computation. Only applicable to accounts which are participating.")]
        ulong @rewardBase;
        
        [SerializeField, Tooltip(@"[apar] parameters of assets created by this account.

Note: the raw account uses `map[int] -&gt; Asset` for this type.")]
        Asset[] @createdAssets;
        
        [SerializeField, Tooltip(@"[appl] applications local data stored in this account.

Note the raw object uses `map[int] -&gt; AppLocalState` for this type.")]
        ApplicationLocalState[] @appsLocalState;
        
        [SerializeField, Tooltip(@"The count of all apps (AppParams objects) created by this account.")]
        ulong @totalCreatedApps;
        
        /// <summary>
        /// [algo] total number of MicroAlgos in the account        
        /// </summary>
        [AlgoApiField("amount")]
        public ulong Amount
        {
            get => this.@amount;
            set => this.@amount = value;
        }

        /// <summary>
        /// the account public key        
        /// </summary>
        [AlgoApiField("address")]
        public string Address
        {
            get => this.@address;
            set => this.@address = value;
        }

        /// <summary>
        /// [ern] total rewards of MicroAlgos the account has received, including pending rewards.        
        /// </summary>
        [AlgoApiField("rewards")]
        public ulong Rewards
        {
            get => this.@rewards;
            set => this.@rewards = value;
        }

        /// <summary>
        /// specifies the amount of MicroAlgos in the account, without the pending rewards.        
        /// </summary>
        [AlgoApiField("amount-without-pending-rewards")]
        public ulong AmountWithoutPendingRewards
        {
            get => this.@amountWithoutPendingRewards;
            set => this.@amountWithoutPendingRewards = value;
        }

        /// <summary>
        /// [teap] the sum of all extra application program pages for this account.        
        /// </summary>
        [AlgoApiField("apps-total-extra-pages")]
        public ulong AppsTotalExtraPages
        {
            get => this.@appsTotalExtraPages;
            set => this.@appsTotalExtraPages = value;
        }

        /// <summary>
        /// The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.        
        /// </summary>
        [AlgoApiField("total-assets-opted-in")]
        public ulong TotalAssetsOptedIn
        {
            get => this.@totalAssetsOptedIn;
            set => this.@totalAssetsOptedIn = value;
        }

        /// <summary>
        /// [asset] assets held by this account.
        /// 
        /// Note the raw object uses `map[int] -&gt; AssetHolding` for this type.        
        /// </summary>
        [AlgoApiField("assets")]
        public AssetHolding[] Assets
        {
            get => this.@assets;
            set => this.@assets = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("participation")]
        public AccountParticipation Participation
        {
            get => this.@participation;
            set => this.@participation = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("apps-total-schema")]
        public ApplicationStateSchema AppsTotalSchema
        {
            get => this.@appsTotalSchema;
            set => this.@appsTotalSchema = value;
        }

        /// <summary>
        /// The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.        
        /// </summary>
        [AlgoApiField("total-apps-opted-in")]
        public ulong TotalAppsOptedIn
        {
            get => this.@totalAppsOptedIn;
            set => this.@totalAppsOptedIn = value;
        }

        /// <summary>
        /// The round for which this information is relevant.        
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => this.@round;
            set => this.@round = value;
        }

        /// <summary>
        /// amount of MicroAlgos of pending rewards in this account.        
        /// </summary>
        [AlgoApiField("pending-rewards")]
        public ulong PendingRewards
        {
            get => this.@pendingRewards;
            set => this.@pendingRewards = value;
        }

        /// <summary>
        /// [appp] parameters of applications created by this account including app global data.
        /// 
        /// Note: the raw account uses `map[int] -&gt; AppParams` for this type.        
        /// </summary>
        [AlgoApiField("created-apps")]
        public Application[] CreatedApps
        {
            get => this.@createdApps;
            set => this.@createdApps = value;
        }

        /// <summary>
        /// [onl] delegation status of the account's MicroAlgos
        /// * Offline - indicates that the associated account is delegated.
        /// *  Online  - indicates that the associated account used as part of the delegation pool.
        /// *   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.        
        /// </summary>
        [AlgoApiField("status")]
        public string Status
        {
            get => this.@status;
            set => this.@status = value;
        }

        /// <summary>
        /// Indicates what type of signature is used by this account, must be one of:
        /// * sig
        /// * msig
        /// * lsig        
        /// </summary>
        [AlgoApiField("sig-type")]
        public SignatureType SigType
        {
            get => this.@sigType;
            set => this.@sigType = value;
        }

        /// <summary>
        /// [spend] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.        
        /// </summary>
        [AlgoApiField("auth-addr")]
        public Address AuthAddr
        {
            get => this.@authAddr;
            set => this.@authAddr = value;
        }

        /// <summary>
        /// The count of all assets (AssetParams objects) created by this account.        
        /// </summary>
        [AlgoApiField("total-created-assets")]
        public ulong TotalCreatedAssets
        {
            get => this.@totalCreatedAssets;
            set => this.@totalCreatedAssets = value;
        }

        /// <summary>
        /// MicroAlgo balance required by the account.
        /// 
        /// The requirement grows based on asset and application usage.        
        /// </summary>
        [AlgoApiField("min-balance")]
        public ulong MinBalance
        {
            get => this.@minBalance;
            set => this.@minBalance = value;
        }

        /// <summary>
        /// [ebase] used as part of the rewards computation. Only applicable to accounts which are participating.        
        /// </summary>
        [AlgoApiField("reward-base")]
        public ulong RewardBase
        {
            get => this.@rewardBase;
            set => this.@rewardBase = value;
        }

        /// <summary>
        /// [apar] parameters of assets created by this account.
        /// 
        /// Note: the raw account uses `map[int] -&gt; Asset` for this type.        
        /// </summary>
        [AlgoApiField("created-assets")]
        public Asset[] CreatedAssets
        {
            get => this.@createdAssets;
            set => this.@createdAssets = value;
        }

        /// <summary>
        /// [appl] applications local data stored in this account.
        /// 
        /// Note the raw object uses `map[int] -&gt; AppLocalState` for this type.        
        /// </summary>
        [AlgoApiField("apps-local-state")]
        public ApplicationLocalState[] AppsLocalState
        {
            get => this.@appsLocalState;
            set => this.@appsLocalState = value;
        }

        /// <summary>
        /// The count of all apps (AppParams objects) created by this account.        
        /// </summary>
        [AlgoApiField("total-created-apps")]
        public ulong TotalCreatedApps
        {
            get => this.@totalCreatedApps;
            set => this.@totalCreatedApps = value;
        }

        public bool Equals(Account other)
        {
            return 
                Amount.Equals(other.Amount) &&
                StringComparer.Equals(Address, other.Address) &&
                Rewards.Equals(other.Rewards) &&
                AmountWithoutPendingRewards.Equals(other.AmountWithoutPendingRewards) &&
                AppsTotalExtraPages.Equals(other.AppsTotalExtraPages) &&
                TotalAssetsOptedIn.Equals(other.TotalAssetsOptedIn) &&
                ArrayComparer.Equals(Assets, other.Assets) &&
                Participation.Equals(other.Participation) &&
                AppsTotalSchema.Equals(other.AppsTotalSchema) &&
                TotalAppsOptedIn.Equals(other.TotalAppsOptedIn) &&
                Round.Equals(other.Round) &&
                PendingRewards.Equals(other.PendingRewards) &&
                ArrayComparer.Equals(CreatedApps, other.CreatedApps) &&
                StringComparer.Equals(Status, other.Status) &&
                SigType.Equals(other.SigType) &&
                AuthAddr.Equals(other.AuthAddr) &&
                TotalCreatedAssets.Equals(other.TotalCreatedAssets) &&
                MinBalance.Equals(other.MinBalance) &&
                RewardBase.Equals(other.RewardBase) &&
                ArrayComparer.Equals(CreatedAssets, other.CreatedAssets) &&
                ArrayComparer.Equals(AppsLocalState, other.AppsLocalState) &&
                TotalCreatedApps.Equals(other.TotalCreatedApps)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountStateDelta
        : IEquatable<AccountStateDelta>
    {
        [SerializeField, Tooltip(@"")]
        string @address;
        
        [SerializeField, Tooltip(@"")]
        StateDelta @delta;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("address")]
        public string Address
        {
            get => this.@address;
            set => this.@address = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("delta")]
        public StateDelta Delta
        {
            get => this.@delta;
            set => this.@delta = value;
        }

        public bool Equals(AccountStateDelta other)
        {
            return 
                StringComparer.Equals(Address, other.Address) &&
                Delta.Equals(other.Delta)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Application
        : IEquatable<Application>
    {
        [SerializeField, Tooltip(@"[appidx] application index.")]
        ulong @id;
        
        [SerializeField, Tooltip(@"")]
        ApplicationParams @params;
        
        /// <summary>
        /// [appidx] application index.        
        /// </summary>
        [AlgoApiField("id")]
        public ulong Id
        {
            get => this.@id;
            set => this.@id = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("params")]
        public ApplicationParams Params
        {
            get => this.@params;
            set => this.@params = value;
        }

        public bool Equals(Application other)
        {
            return 
                Id.Equals(other.Id) &&
                Params.Equals(other.Params)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ApplicationLocalState
        : IEquatable<ApplicationLocalState>
    {
        [SerializeField, Tooltip(@"The application which this local state is for.")]
        ulong @id;
        
        [SerializeField, Tooltip(@"")]
        TealKeyValueStore @keyValue;
        
        [SerializeField, Tooltip(@"")]
        ApplicationStateSchema @schema;
        
        /// <summary>
        /// The application which this local state is for.        
        /// </summary>
        [AlgoApiField("id")]
        public ulong Id
        {
            get => this.@id;
            set => this.@id = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("key-value")]
        public TealKeyValueStore KeyValue
        {
            get => this.@keyValue;
            set => this.@keyValue = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("schema")]
        public ApplicationStateSchema Schema
        {
            get => this.@schema;
            set => this.@schema = value;
        }

        public bool Equals(ApplicationLocalState other)
        {
            return 
                Id.Equals(other.Id) &&
                KeyValue.Equals(other.KeyValue) &&
                Schema.Equals(other.Schema)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ErrorResponse
        : IEquatable<ErrorResponse>
    {
        [SerializeField, Tooltip(@"")]
        AlgoApiObject @data;
        
        [SerializeField, Tooltip(@"")]
        string @message;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("data")]
        public AlgoApiObject Data
        {
            get => this.@data;
            set => this.@data = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("message")]
        public string Message
        {
            get => this.@message;
            set => this.@message = value;
        }

        public bool Equals(ErrorResponse other)
        {
            return 
                Data.Equals(other.Data) &&
                StringComparer.Equals(Message, other.Message)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountParticipation
        : IEquatable<AccountParticipation>
    {
        [SerializeField, Tooltip(@"[sel] Selection public key (if any) currently registered for this round.")]
        string @selectionParticipationKey;
        
        [SerializeField, Tooltip(@"[stprf] Root of the state proof key (if any)")]
        string @stateProofKey;
        
        [SerializeField, Tooltip(@"[voteFst] First round for which this participation is valid.")]
        ulong @voteFirstValid;
        
        [SerializeField, Tooltip(@"[voteKD] Number of subkeys in each batch of participation keys.")]
        ulong @voteKeyDilution;
        
        [SerializeField, Tooltip(@"[voteLst] Last round for which this participation is valid.")]
        ulong @voteLastValid;
        
        [SerializeField, Tooltip(@"[vote] root participation public key (if any) currently registered for this round.")]
        string @voteParticipationKey;
        
        /// <summary>
        /// [sel] Selection public key (if any) currently registered for this round.        
        /// </summary>
        [AlgoApiField("selection-participation-key")]
        public string SelectionParticipationKey
        {
            get => this.@selectionParticipationKey;
            set => this.@selectionParticipationKey = value;
        }

        /// <summary>
        /// [stprf] Root of the state proof key (if any)        
        /// </summary>
        [AlgoApiField("state-proof-key")]
        public string StateProofKey
        {
            get => this.@stateProofKey;
            set => this.@stateProofKey = value;
        }

        /// <summary>
        /// [voteFst] First round for which this participation is valid.        
        /// </summary>
        [AlgoApiField("vote-first-valid")]
        public ulong VoteFirstValid
        {
            get => this.@voteFirstValid;
            set => this.@voteFirstValid = value;
        }

        /// <summary>
        /// [voteKD] Number of subkeys in each batch of participation keys.        
        /// </summary>
        [AlgoApiField("vote-key-dilution")]
        public ulong VoteKeyDilution
        {
            get => this.@voteKeyDilution;
            set => this.@voteKeyDilution = value;
        }

        /// <summary>
        /// [voteLst] Last round for which this participation is valid.        
        /// </summary>
        [AlgoApiField("vote-last-valid")]
        public ulong VoteLastValid
        {
            get => this.@voteLastValid;
            set => this.@voteLastValid = value;
        }

        /// <summary>
        /// [vote] root participation public key (if any) currently registered for this round.        
        /// </summary>
        [AlgoApiField("vote-participation-key")]
        public string VoteParticipationKey
        {
            get => this.@voteParticipationKey;
            set => this.@voteParticipationKey = value;
        }

        public bool Equals(AccountParticipation other)
        {
            return 
                StringComparer.Equals(SelectionParticipationKey, other.SelectionParticipationKey) &&
                StringComparer.Equals(StateProofKey, other.StateProofKey) &&
                VoteFirstValid.Equals(other.VoteFirstValid) &&
                VoteKeyDilution.Equals(other.VoteKeyDilution) &&
                VoteLastValid.Equals(other.VoteLastValid) &&
                StringComparer.Equals(VoteParticipationKey, other.VoteParticipationKey)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Version
        : IEquatable<Version>
    {
        [SerializeField, Tooltip(@"")]
        BuildVersion @build;
        
        [SerializeField, Tooltip(@"")]
        string @genesis_hash_b64;
        
        [SerializeField, Tooltip(@"")]
        string @genesis_id;
        
        [SerializeField, Tooltip(@"")]
        string[] @versions;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("build")]
        public BuildVersion Build
        {
            get => this.@build;
            set => this.@build = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("genesis_hash_b64")]
        public string Genesis_hash_b64
        {
            get => this.@genesis_hash_b64;
            set => this.@genesis_hash_b64 = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("genesis_id")]
        public string Genesis_id
        {
            get => this.@genesis_id;
            set => this.@genesis_id = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("versions")]
        public string[] Versions
        {
            get => this.@versions;
            set => this.@versions = value;
        }

        public bool Equals(Version other)
        {
            return 
                Build.Equals(other.Build) &&
                StringComparer.Equals(Genesis_hash_b64, other.Genesis_hash_b64) &&
                StringComparer.Equals(Genesis_id, other.Genesis_id) &&
                ArrayComparer.Equals(Versions, other.Versions)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AssetParams
        : IEquatable<AssetParams>
    {
        [SerializeField, Tooltip(@"[df] Whether holdings of this asset are frozen by default.")]
        bool @defaultFrozen;
        
        [SerializeField, Tooltip(@"The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.")]
        string @creator;
        
        [SerializeField, Tooltip(@"[dc] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).")]
        ulong @decimals;
        
        [SerializeField, Tooltip(@"[f] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.")]
        string @freeze;
        
        [SerializeField, Tooltip(@"[r] Address of account holding reserve (non-minted) units of this asset.")]
        string @reserve;
        
        [SerializeField, Tooltip(@"Base64 encoded name of a unit of this asset, as supplied by the creator.")]
        string @unitNameB64;
        
        [SerializeField, Tooltip(@"[an] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.")]
        string @name;
        
        [SerializeField, Tooltip(@"Base64 encoded URL where more information about the asset can be retrieved.")]
        string @urlB64;
        
        [SerializeField, Tooltip(@"[t] The total number of units of this asset.")]
        ulong @total;
        
        [SerializeField, Tooltip(@"[m] Address of account used to manage the keys of this asset and to destroy it.")]
        string @manager;
        
        [SerializeField, Tooltip(@"Base64 encoded name of this asset, as supplied by the creator.")]
        string @nameB64;
        
        [SerializeField, Tooltip(@"[au] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.")]
        string @url;
        
        [SerializeField, Tooltip(@"[un] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.")]
        string @unitName;
        
        [SerializeField, Tooltip(@"[c] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.")]
        string @clawback;
        
        [SerializeField, Tooltip(@"[am] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.")]
        string @metadataHash;
        
        /// <summary>
        /// [df] Whether holdings of this asset are frozen by default.        
        /// </summary>
        [AlgoApiField("default-frozen")]
        public bool DefaultFrozen
        {
            get => this.@defaultFrozen;
            set => this.@defaultFrozen = value;
        }

        /// <summary>
        /// The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.        
        /// </summary>
        [AlgoApiField("creator")]
        public string Creator
        {
            get => this.@creator;
            set => this.@creator = value;
        }

        /// <summary>
        /// [dc] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).        
        /// </summary>
        [AlgoApiField("decimals")]
        public ulong Decimals
        {
            get => this.@decimals;
            set => this.@decimals = value;
        }

        /// <summary>
        /// [f] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.        
        /// </summary>
        [AlgoApiField("freeze")]
        public string Freeze
        {
            get => this.@freeze;
            set => this.@freeze = value;
        }

        /// <summary>
        /// [r] Address of account holding reserve (non-minted) units of this asset.        
        /// </summary>
        [AlgoApiField("reserve")]
        public string Reserve
        {
            get => this.@reserve;
            set => this.@reserve = value;
        }

        /// <summary>
        /// Base64 encoded name of a unit of this asset, as supplied by the creator.        
        /// </summary>
        [AlgoApiField("unit-name-b64")]
        public string UnitNameB64
        {
            get => this.@unitNameB64;
            set => this.@unitNameB64 = value;
        }

        /// <summary>
        /// [an] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.        
        /// </summary>
        [AlgoApiField("name")]
        public string Name
        {
            get => this.@name;
            set => this.@name = value;
        }

        /// <summary>
        /// Base64 encoded URL where more information about the asset can be retrieved.        
        /// </summary>
        [AlgoApiField("url-b64")]
        public string UrlB64
        {
            get => this.@urlB64;
            set => this.@urlB64 = value;
        }

        /// <summary>
        /// [t] The total number of units of this asset.        
        /// </summary>
        [AlgoApiField("total")]
        public ulong Total
        {
            get => this.@total;
            set => this.@total = value;
        }

        /// <summary>
        /// [m] Address of account used to manage the keys of this asset and to destroy it.        
        /// </summary>
        [AlgoApiField("manager")]
        public string Manager
        {
            get => this.@manager;
            set => this.@manager = value;
        }

        /// <summary>
        /// Base64 encoded name of this asset, as supplied by the creator.        
        /// </summary>
        [AlgoApiField("name-b64")]
        public string NameB64
        {
            get => this.@nameB64;
            set => this.@nameB64 = value;
        }

        /// <summary>
        /// [au] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.        
        /// </summary>
        [AlgoApiField("url")]
        public string Url
        {
            get => this.@url;
            set => this.@url = value;
        }

        /// <summary>
        /// [un] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.        
        /// </summary>
        [AlgoApiField("unit-name")]
        public string UnitName
        {
            get => this.@unitName;
            set => this.@unitName = value;
        }

        /// <summary>
        /// [c] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.        
        /// </summary>
        [AlgoApiField("clawback")]
        public string Clawback
        {
            get => this.@clawback;
            set => this.@clawback = value;
        }

        /// <summary>
        /// [am] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.        
        /// </summary>
        [AlgoApiField("metadata-hash")]
        public string MetadataHash
        {
            get => this.@metadataHash;
            set => this.@metadataHash = value;
        }

        public bool Equals(AssetParams other)
        {
            return 
                DefaultFrozen.Equals(other.DefaultFrozen) &&
                StringComparer.Equals(Creator, other.Creator) &&
                Decimals.Equals(other.Decimals) &&
                StringComparer.Equals(Freeze, other.Freeze) &&
                StringComparer.Equals(Reserve, other.Reserve) &&
                StringComparer.Equals(UnitNameB64, other.UnitNameB64) &&
                StringComparer.Equals(Name, other.Name) &&
                StringComparer.Equals(UrlB64, other.UrlB64) &&
                Total.Equals(other.Total) &&
                StringComparer.Equals(Manager, other.Manager) &&
                StringComparer.Equals(NameB64, other.NameB64) &&
                StringComparer.Equals(Url, other.Url) &&
                StringComparer.Equals(UnitName, other.UnitName) &&
                StringComparer.Equals(Clawback, other.Clawback) &&
                StringComparer.Equals(MetadataHash, other.MetadataHash)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunTxnResult
        : IEquatable<DryrunTxnResult>
    {
        [SerializeField, Tooltip(@"")]
        string[] @appCallMessages;
        
        [SerializeField, Tooltip(@"Disassembled program line by line.")]
        string[] @disassembly;
        
        [SerializeField, Tooltip(@"")]
        string[] @logs;
        
        [SerializeField, Tooltip(@"Disassembled lsig program line by line.")]
        string[] @logicSigDisassembly;
        
        [SerializeField, Tooltip(@"")]
        AccountStateDelta[] @localDeltas;
        
        [SerializeField, Tooltip(@"")]
        DryrunState[] @logicSigTrace;
        
        [SerializeField, Tooltip(@"Execution cost of app call transaction")]
        ulong @cost;
        
        [SerializeField, Tooltip(@"")]
        string[] @logicSigMessages;
        
        [SerializeField, Tooltip(@"")]
        DryrunState[] @appCallTrace;
        
        [SerializeField, Tooltip(@"")]
        StateDelta @globalDelta;
        
        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("app-call-messages")]
        public string[] AppCallMessages
        {
            get => this.@appCallMessages;
            set => this.@appCallMessages = value;
        }

        /// <summary>
        /// Disassembled program line by line.        
        /// </summary>
        [AlgoApiField("disassembly")]
        public string[] Disassembly
        {
            get => this.@disassembly;
            set => this.@disassembly = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("logs")]
        public string[] Logs
        {
            get => this.@logs;
            set => this.@logs = value;
        }

        /// <summary>
        /// Disassembled lsig program line by line.        
        /// </summary>
        [AlgoApiField("logic-sig-disassembly")]
        public string[] LogicSigDisassembly
        {
            get => this.@logicSigDisassembly;
            set => this.@logicSigDisassembly = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("local-deltas")]
        public AccountStateDelta[] LocalDeltas
        {
            get => this.@localDeltas;
            set => this.@localDeltas = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("logic-sig-trace")]
        public DryrunState[] LogicSigTrace
        {
            get => this.@logicSigTrace;
            set => this.@logicSigTrace = value;
        }

        /// <summary>
        /// Execution cost of app call transaction        
        /// </summary>
        [AlgoApiField("cost")]
        public ulong Cost
        {
            get => this.@cost;
            set => this.@cost = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("logic-sig-messages")]
        public string[] LogicSigMessages
        {
            get => this.@logicSigMessages;
            set => this.@logicSigMessages = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("app-call-trace")]
        public DryrunState[] AppCallTrace
        {
            get => this.@appCallTrace;
            set => this.@appCallTrace = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("global-delta")]
        public StateDelta GlobalDelta
        {
            get => this.@globalDelta;
            set => this.@globalDelta = value;
        }

        public bool Equals(DryrunTxnResult other)
        {
            return 
                ArrayComparer.Equals(AppCallMessages, other.AppCallMessages) &&
                ArrayComparer.Equals(Disassembly, other.Disassembly) &&
                ArrayComparer.Equals(Logs, other.Logs) &&
                ArrayComparer.Equals(LogicSigDisassembly, other.LogicSigDisassembly) &&
                ArrayComparer.Equals(LocalDeltas, other.LocalDeltas) &&
                ArrayComparer.Equals(LogicSigTrace, other.LogicSigTrace) &&
                Cost.Equals(other.Cost) &&
                ArrayComparer.Equals(LogicSigMessages, other.LogicSigMessages) &&
                ArrayComparer.Equals(AppCallTrace, other.AppCallTrace) &&
                GlobalDelta.Equals(other.GlobalDelta)
                ;
        }
    }

    /// <summary>
    /// Application state delta.    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<StateDelta, EvalDeltaKeyValue[]>))]
    public partial struct StateDelta
        : IEquatable<StateDelta>
        , IWrappedValue<EvalDeltaKeyValue[]>
    {
        [SerializeField]
        EvalDeltaKeyValue[] @value;

        public StateDelta(EvalDeltaKeyValue[] value)
        {
            this.@value = value;
        }

        public EvalDeltaKeyValue[] WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(StateDelta other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }
        
        public static implicit operator EvalDeltaKeyValue[](StateDelta wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator StateDelta(EvalDeltaKeyValue[] value)
        {
            return new StateDelta(value);
        }
    }
    
    /// <summary>
    /// Represents a key-value store for use in an application.    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<TealKeyValueStore, TealKeyValue[]>))]
    public partial struct TealKeyValueStore
        : IEquatable<TealKeyValueStore>
        , IWrappedValue<TealKeyValue[]>
    {
        [SerializeField]
        TealKeyValue[] @value;

        public TealKeyValueStore(TealKeyValue[] value)
        {
            this.@value = value;
        }

        public TealKeyValue[] WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(TealKeyValueStore other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }
        
        public static implicit operator TealKeyValue[](TealKeyValueStore wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator TealKeyValueStore(TealKeyValue[] value)
        {
            return new TealKeyValueStore(value);
        }
    }
    
}
