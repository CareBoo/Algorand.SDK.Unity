//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlgoSdk.Algod
{
    
    
    public partial struct CatchpointAbortResponse
    {
        
        private static bool @__generated__IsValid = CatchpointAbortResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.CatchpointAbortResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.CatchpointAbortResponse>(false).Assign("catchup-message", (AlgoSdk.Algod.CatchpointAbortResponse x) => x.CatchupMessage, (ref AlgoSdk.Algod.CatchpointAbortResponse x, System.String value) => x.CatchupMessage = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct AccountAssetResponse
    {
        
        private static bool @__generated__IsValid = AccountAssetResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.AccountAssetResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.AccountAssetResponse>(false).Assign("asset-holding", (AlgoSdk.Algod.AccountAssetResponse x) => x.AssetHolding, (ref AlgoSdk.Algod.AccountAssetResponse x, AlgoSdk.Algod.AssetHolding value) => x.AssetHolding = value).Assign("created-asset", (AlgoSdk.Algod.AccountAssetResponse x) => x.CreatedAsset, (ref AlgoSdk.Algod.AccountAssetResponse x, AlgoSdk.Algod.AssetParams value) => x.CreatedAsset = value).Assign("round", (AlgoSdk.Algod.AccountAssetResponse x) => x.Round, (ref AlgoSdk.Algod.AccountAssetResponse x, System.UInt64 value) => x.Round = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct BlockResponse
    {
        
        private static bool @__generated__IsValid = BlockResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.BlockResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.BlockResponse>(false).Assign("block", (AlgoSdk.Algod.BlockResponse x) => x.Block, (ref AlgoSdk.Algod.BlockResponse x, AlgoSdk.BlockHeader value) => x.Block = value).Assign("cert", (AlgoSdk.Algod.BlockResponse x) => x.Cert, (ref AlgoSdk.Algod.BlockResponse x, AlgoSdk.BlockCertificate value) => x.Cert = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct CatchpointStartResponse
    {
        
        private static bool @__generated__IsValid = CatchpointStartResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.CatchpointStartResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.CatchpointStartResponse>(false).Assign("catchup-message", (AlgoSdk.Algod.CatchpointStartResponse x) => x.CatchupMessage, (ref AlgoSdk.Algod.CatchpointStartResponse x, System.String value) => x.CatchupMessage = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct PostParticipationResponse
    {
        
        private static bool @__generated__IsValid = PostParticipationResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.PostParticipationResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.PostParticipationResponse>(false).Assign("partId", (AlgoSdk.Algod.PostParticipationResponse x) => x.PartId, (ref AlgoSdk.Algod.PostParticipationResponse x, System.String value) => x.PartId = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct CompileResponse
    {
        
        private static bool @__generated__IsValid = CompileResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.CompileResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.CompileResponse>(false).Assign("hash", (AlgoSdk.Algod.CompileResponse x) => x.Hash, (ref AlgoSdk.Algod.CompileResponse x, System.String value) => x.Hash = value, AlgoSdk.StringComparer.Instance).Assign("result", (AlgoSdk.Algod.CompileResponse x) => x.Result, (ref AlgoSdk.Algod.CompileResponse x, System.String value) => x.Result = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct ProofResponse
    {
        
        private static bool @__generated__IsValid = ProofResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.ProofResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.ProofResponse>(false).Assign("hashtype", (AlgoSdk.Algod.ProofResponse x) => x.Hashtype, (ref AlgoSdk.Algod.ProofResponse x, AlgoSdk.HashType value) => x.Hashtype = value, AlgoSdk.ByteEnumComparer<AlgoSdk.HashType>.Instance).Assign("idx", (AlgoSdk.Algod.ProofResponse x) => x.Idx, (ref AlgoSdk.Algod.ProofResponse x, System.UInt64 value) => x.Idx = value).Assign("proof", (AlgoSdk.Algod.ProofResponse x) => x.Proof, (ref AlgoSdk.Algod.ProofResponse x, System.String value) => x.Proof = value, AlgoSdk.StringComparer.Instance).Assign("stibhash", (AlgoSdk.Algod.ProofResponse x) => x.Stibhash, (ref AlgoSdk.Algod.ProofResponse x, System.String value) => x.Stibhash = value, AlgoSdk.StringComparer.Instance).Assign("treedepth", (AlgoSdk.Algod.ProofResponse x) => x.Treedepth, (ref AlgoSdk.Algod.ProofResponse x, System.UInt64 value) => x.Treedepth = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct NodeStatusResponse
    {
        
        private static bool @__generated__IsValid = NodeStatusResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.NodeStatusResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.NodeStatusResponse>(false).Assign("stopped-at-unsupported-round", (AlgoSdk.Algod.NodeStatusResponse x) => x.StoppedAtUnsupportedRound, (ref AlgoSdk.Algod.NodeStatusResponse x, System.Boolean value) => x.StoppedAtUnsupportedRound = value).Assign("catchpoint-total-blocks", (AlgoSdk.Algod.NodeStatusResponse x) => x.CatchpointTotalBlocks, (ref AlgoSdk.Algod.NodeStatusResponse x, System.UInt64 value) => x.CatchpointTotalBlocks = value).Assign("last-version", (AlgoSdk.Algod.NodeStatusResponse x) => x.LastVersion, (ref AlgoSdk.Algod.NodeStatusResponse x, System.String value) => x.LastVersion = value, AlgoSdk.StringComparer.Instance).Assign("next-version-round", (AlgoSdk.Algod.NodeStatusResponse x) => x.NextVersionRound, (ref AlgoSdk.Algod.NodeStatusResponse x, System.UInt64 value) => x.NextVersionRound = value).Assign("catchpoint-total-accounts", (AlgoSdk.Algod.NodeStatusResponse x) => x.CatchpointTotalAccounts, (ref AlgoSdk.Algod.NodeStatusResponse x, System.UInt64 value) => x.CatchpointTotalAccounts = value).Assign("time-since-last-round", (AlgoSdk.Algod.NodeStatusResponse x) => x.TimeSinceLastRound, (ref AlgoSdk.Algod.NodeStatusResponse x, System.UInt64 value) => x.TimeSinceLastRound = value).Assign("next-version", (AlgoSdk.Algod.NodeStatusResponse x) => x.NextVersion, (ref AlgoSdk.Algod.NodeStatusResponse x, System.String value) => x.NextVersion = value, AlgoSdk.StringComparer.Instance).Assign("catchpoint-verified-accounts", (AlgoSdk.Algod.NodeStatusResponse x) => x.CatchpointVerifiedAccounts, (ref AlgoSdk.Algod.NodeStatusResponse x, System.UInt64 value) => x.CatchpointVerifiedAccounts = value).Assign("catchup-time", (AlgoSdk.Algod.NodeStatusResponse x) => x.CatchupTime, (ref AlgoSdk.Algod.NodeStatusResponse x, System.UInt64 value) => x.CatchupTime = value).Assign("last-catchpoint", (AlgoSdk.Algod.NodeStatusResponse x) => x.LastCatchpoint, (ref AlgoSdk.Algod.NodeStatusResponse x, System.String value) => x.LastCatchpoint = value, AlgoSdk.StringComparer.Instance).Assign("last-round", (AlgoSdk.Algod.NodeStatusResponse x) => x.LastRound, (ref AlgoSdk.Algod.NodeStatusResponse x, System.UInt64 value) => x.LastRound = value).Assign("next-version-supported", (AlgoSdk.Algod.NodeStatusResponse x) => x.NextVersionSupported, (ref AlgoSdk.Algod.NodeStatusResponse x, System.Boolean value) => x.NextVersionSupported = value).Assign("catchpoint", (AlgoSdk.Algod.NodeStatusResponse x) => x.Catchpoint, (ref AlgoSdk.Algod.NodeStatusResponse x, System.String value) => x.Catchpoint = value, AlgoSdk.StringComparer.Instance).Assign("catchpoint-acquired-blocks", (AlgoSdk.Algod.NodeStatusResponse x) => x.CatchpointAcquiredBlocks, (ref AlgoSdk.Algod.NodeStatusResponse x, System.UInt64 value) => x.CatchpointAcquiredBlocks = value).Assign("catchpoint-processed-accounts", (AlgoSdk.Algod.NodeStatusResponse x) => x.CatchpointProcessedAccounts, (ref AlgoSdk.Algod.NodeStatusResponse x, System.UInt64 value) => x.CatchpointProcessedAccounts = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct TransactionParametersResponse
    {
        
        private static bool @__generated__IsValid = TransactionParametersResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.TransactionParametersResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.TransactionParametersResponse>(false).Assign("consensus-version", (AlgoSdk.Algod.TransactionParametersResponse x) => x.ConsensusVersion, (ref AlgoSdk.Algod.TransactionParametersResponse x, System.String value) => x.ConsensusVersion = value, AlgoSdk.StringComparer.Instance).Assign("fee", (AlgoSdk.Algod.TransactionParametersResponse x) => x.Fee, (ref AlgoSdk.Algod.TransactionParametersResponse x, System.UInt64 value) => x.Fee = value).Assign("genesis-hash", (AlgoSdk.Algod.TransactionParametersResponse x) => x.GenesisHash, (ref AlgoSdk.Algod.TransactionParametersResponse x, System.String value) => x.GenesisHash = value, AlgoSdk.StringComparer.Instance).Assign("genesis-id", (AlgoSdk.Algod.TransactionParametersResponse x) => x.GenesisId, (ref AlgoSdk.Algod.TransactionParametersResponse x, System.String value) => x.GenesisId = value, AlgoSdk.StringComparer.Instance).Assign("last-round", (AlgoSdk.Algod.TransactionParametersResponse x) => x.LastRound, (ref AlgoSdk.Algod.TransactionParametersResponse x, System.UInt64 value) => x.LastRound = value).Assign("min-fee", (AlgoSdk.Algod.TransactionParametersResponse x) => x.MinFee, (ref AlgoSdk.Algod.TransactionParametersResponse x, System.UInt64 value) => x.MinFee = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct SupplyResponse
    {
        
        private static bool @__generated__IsValid = SupplyResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.SupplyResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.SupplyResponse>(false).Assign("current_round", (AlgoSdk.Algod.SupplyResponse x) => x.Current_round, (ref AlgoSdk.Algod.SupplyResponse x, System.UInt64 value) => x.Current_round = value).Assign("online-money", (AlgoSdk.Algod.SupplyResponse x) => x.OnlineMoney, (ref AlgoSdk.Algod.SupplyResponse x, System.UInt64 value) => x.OnlineMoney = value).Assign("total-money", (AlgoSdk.Algod.SupplyResponse x) => x.TotalMoney, (ref AlgoSdk.Algod.SupplyResponse x, System.UInt64 value) => x.TotalMoney = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct PendingTransactionsResponse
    {
        
        private static bool @__generated__IsValid = PendingTransactionsResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.PendingTransactionsResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.PendingTransactionsResponse>(false).Assign("top-transactions", (AlgoSdk.Algod.PendingTransactionsResponse x) => x.TopTransactions, (ref AlgoSdk.Algod.PendingTransactionsResponse x, AlgoSdk.SignedTxn[] value) => x.TopTransactions = value, AlgoSdk.ArrayComparer<AlgoSdk.SignedTxn>.Instance).Assign("total-transactions", (AlgoSdk.Algod.PendingTransactionsResponse x) => x.TotalTransactions, (ref AlgoSdk.Algod.PendingTransactionsResponse x, System.UInt64 value) => x.TotalTransactions = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct AccountApplicationResponse
    {
        
        private static bool @__generated__IsValid = AccountApplicationResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.AccountApplicationResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.AccountApplicationResponse>(false).Assign("app-local-state", (AlgoSdk.Algod.AccountApplicationResponse x) => x.AppLocalState, (ref AlgoSdk.Algod.AccountApplicationResponse x, AlgoSdk.Algod.ApplicationLocalState value) => x.AppLocalState = value).Assign("created-app", (AlgoSdk.Algod.AccountApplicationResponse x) => x.CreatedApp, (ref AlgoSdk.Algod.AccountApplicationResponse x, AlgoSdk.Algod.ApplicationParams value) => x.CreatedApp = value).Assign("round", (AlgoSdk.Algod.AccountApplicationResponse x) => x.Round, (ref AlgoSdk.Algod.AccountApplicationResponse x, System.UInt64 value) => x.Round = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct PostTransactionsResponse
    {
        
        private static bool @__generated__IsValid = PostTransactionsResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.PostTransactionsResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.PostTransactionsResponse>(false).Assign("txId", (AlgoSdk.Algod.PostTransactionsResponse x) => x.TxId, (ref AlgoSdk.Algod.PostTransactionsResponse x, System.String value) => x.TxId = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct DryrunResponse
    {
        
        private static bool @__generated__IsValid = DryrunResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.DryrunResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.DryrunResponse>(false).Assign("error", (AlgoSdk.Algod.DryrunResponse x) => x.Error, (ref AlgoSdk.Algod.DryrunResponse x, System.String value) => x.Error = value, AlgoSdk.StringComparer.Instance).Assign("protocol-version", (AlgoSdk.Algod.DryrunResponse x) => x.ProtocolVersion, (ref AlgoSdk.Algod.DryrunResponse x, System.String value) => x.ProtocolVersion = value, AlgoSdk.StringComparer.Instance).Assign("txns", (AlgoSdk.Algod.DryrunResponse x) => x.Txns, (ref AlgoSdk.Algod.DryrunResponse x, AlgoSdk.Algod.DryrunTxnResult[] value) => x.Txns = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.DryrunTxnResult>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct ApplicationParams
    {
        
        private static bool @__generated__IsValid = ApplicationParams.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.ApplicationParams>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.ApplicationParams>(false).Assign("approval-program", (AlgoSdk.Algod.ApplicationParams x) => x.ApprovalProgram, (ref AlgoSdk.Algod.ApplicationParams x, AlgoSdk.CompiledTeal value) => x.ApprovalProgram = value).Assign("clear-state-program", (AlgoSdk.Algod.ApplicationParams x) => x.ClearStateProgram, (ref AlgoSdk.Algod.ApplicationParams x, AlgoSdk.CompiledTeal value) => x.ClearStateProgram = value).Assign("creator", (AlgoSdk.Algod.ApplicationParams x) => x.Creator, (ref AlgoSdk.Algod.ApplicationParams x, AlgoSdk.Address value) => x.Creator = value).Assign("extra-program-pages", (AlgoSdk.Algod.ApplicationParams x) => x.ExtraProgramPages, (ref AlgoSdk.Algod.ApplicationParams x, System.UInt64 value) => x.ExtraProgramPages = value).Assign("global-state", (AlgoSdk.Algod.ApplicationParams x) => x.GlobalState, (ref AlgoSdk.Algod.ApplicationParams x, AlgoSdk.Algod.TealKeyValueStore value) => x.GlobalState = value).Assign("global-state-schema", (AlgoSdk.Algod.ApplicationParams x) => x.GlobalStateSchema, (ref AlgoSdk.Algod.ApplicationParams x, AlgoSdk.Algod.ApplicationStateSchema value) => x.GlobalStateSchema = value).Assign("local-state-schema", (AlgoSdk.Algod.ApplicationParams x) => x.LocalStateSchema, (ref AlgoSdk.Algod.ApplicationParams x, AlgoSdk.Algod.ApplicationStateSchema value) => x.LocalStateSchema = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct TealValue
    {
        
        private static bool @__generated__IsValid = TealValue.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.TealValue>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.TealValue>(false).Assign("bytes", (AlgoSdk.Algod.TealValue x) => x.Bytes, (ref AlgoSdk.Algod.TealValue x, System.String value) => x.Bytes = value, AlgoSdk.StringComparer.Instance).Assign("type", (AlgoSdk.Algod.TealValue x) => x.Type, (ref AlgoSdk.Algod.TealValue x, System.UInt64 value) => x.Type = value).Assign("uint", (AlgoSdk.Algod.TealValue x) => x.Uint, (ref AlgoSdk.Algod.TealValue x, System.UInt64 value) => x.Uint = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct ParticipationKey
    {
        
        private static bool @__generated__IsValid = ParticipationKey.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.ParticipationKey>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.ParticipationKey>(false).Assign("address", (AlgoSdk.Algod.ParticipationKey x) => x.Address, (ref AlgoSdk.Algod.ParticipationKey x, AlgoSdk.Address value) => x.Address = value).Assign("effective-first-valid", (AlgoSdk.Algod.ParticipationKey x) => x.EffectiveFirstValid, (ref AlgoSdk.Algod.ParticipationKey x, System.UInt64 value) => x.EffectiveFirstValid = value).Assign("effective-last-valid", (AlgoSdk.Algod.ParticipationKey x) => x.EffectiveLastValid, (ref AlgoSdk.Algod.ParticipationKey x, System.UInt64 value) => x.EffectiveLastValid = value).Assign("id", (AlgoSdk.Algod.ParticipationKey x) => x.Id, (ref AlgoSdk.Algod.ParticipationKey x, System.String value) => x.Id = value, AlgoSdk.StringComparer.Instance).Assign("key", (AlgoSdk.Algod.ParticipationKey x) => x.Key, (ref AlgoSdk.Algod.ParticipationKey x, AlgoSdk.Algod.AccountParticipation value) => x.Key = value).Assign("last-block-proposal", (AlgoSdk.Algod.ParticipationKey x) => x.LastBlockProposal, (ref AlgoSdk.Algod.ParticipationKey x, System.UInt64 value) => x.LastBlockProposal = value).Assign("last-state-proof", (AlgoSdk.Algod.ParticipationKey x) => x.LastStateProof, (ref AlgoSdk.Algod.ParticipationKey x, System.UInt64 value) => x.LastStateProof = value).Assign("last-vote", (AlgoSdk.Algod.ParticipationKey x) => x.LastVote, (ref AlgoSdk.Algod.ParticipationKey x, System.UInt64 value) => x.LastVote = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct EvalDelta
    {
        
        private static bool @__generated__IsValid = EvalDelta.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.EvalDelta>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.EvalDelta>(false).Assign("action", (AlgoSdk.Algod.EvalDelta x) => x.Action, (ref AlgoSdk.Algod.EvalDelta x, System.UInt64 value) => x.Action = value).Assign("bytes", (AlgoSdk.Algod.EvalDelta x) => x.Bytes, (ref AlgoSdk.Algod.EvalDelta x, System.String value) => x.Bytes = value, AlgoSdk.StringComparer.Instance).Assign("uint", (AlgoSdk.Algod.EvalDelta x) => x.Uint, (ref AlgoSdk.Algod.EvalDelta x, System.UInt64 value) => x.Uint = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct ApplicationStateSchema
    {
        
        private static bool @__generated__IsValid = ApplicationStateSchema.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.ApplicationStateSchema>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.ApplicationStateSchema>(false).Assign("num-byte-slice", (AlgoSdk.Algod.ApplicationStateSchema x) => x.NumByteSlice, (ref AlgoSdk.Algod.ApplicationStateSchema x, System.UInt64 value) => x.NumByteSlice = value).Assign("num-uint", (AlgoSdk.Algod.ApplicationStateSchema x) => x.NumUint, (ref AlgoSdk.Algod.ApplicationStateSchema x, System.UInt64 value) => x.NumUint = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct DryrunState
    {
        
        private static bool @__generated__IsValid = DryrunState.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.DryrunState>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.DryrunState>(false).Assign("error", (AlgoSdk.Algod.DryrunState x) => x.Error, (ref AlgoSdk.Algod.DryrunState x, System.String value) => x.Error = value, AlgoSdk.StringComparer.Instance).Assign("line", (AlgoSdk.Algod.DryrunState x) => x.Line, (ref AlgoSdk.Algod.DryrunState x, System.UInt64 value) => x.Line = value).Assign("pc", (AlgoSdk.Algod.DryrunState x) => x.Pc, (ref AlgoSdk.Algod.DryrunState x, System.UInt64 value) => x.Pc = value).Assign("scratch", (AlgoSdk.Algod.DryrunState x) => x.Scratch, (ref AlgoSdk.Algod.DryrunState x, AlgoSdk.Algod.TealValue[] value) => x.Scratch = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.TealValue>.Instance).Assign("stack", (AlgoSdk.Algod.DryrunState x) => x.Stack, (ref AlgoSdk.Algod.DryrunState x, AlgoSdk.Algod.TealValue[] value) => x.Stack = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.TealValue>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct BuildVersion
    {
        
        private static bool @__generated__IsValid = BuildVersion.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.BuildVersion>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.BuildVersion>(false).Assign("branch", (AlgoSdk.Algod.BuildVersion x) => x.Branch, (ref AlgoSdk.Algod.BuildVersion x, System.String value) => x.Branch = value, AlgoSdk.StringComparer.Instance).Assign("build_number", (AlgoSdk.Algod.BuildVersion x) => x.Build_number, (ref AlgoSdk.Algod.BuildVersion x, System.UInt64 value) => x.Build_number = value).Assign("channel", (AlgoSdk.Algod.BuildVersion x) => x.Channel, (ref AlgoSdk.Algod.BuildVersion x, System.String value) => x.Channel = value, AlgoSdk.StringComparer.Instance).Assign("commit_hash", (AlgoSdk.Algod.BuildVersion x) => x.Commit_hash, (ref AlgoSdk.Algod.BuildVersion x, System.String value) => x.Commit_hash = value, AlgoSdk.StringComparer.Instance).Assign("major", (AlgoSdk.Algod.BuildVersion x) => x.Major, (ref AlgoSdk.Algod.BuildVersion x, System.UInt64 value) => x.Major = value).Assign("minor", (AlgoSdk.Algod.BuildVersion x) => x.Minor, (ref AlgoSdk.Algod.BuildVersion x, System.UInt64 value) => x.Minor = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct DryrunRequest
    {
        
        private static bool @__generated__IsValid = DryrunRequest.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.DryrunRequest>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.DryrunRequest>(false).Assign("accounts", (AlgoSdk.Algod.DryrunRequest x) => x.Accounts, (ref AlgoSdk.Algod.DryrunRequest x, AlgoSdk.Algod.Account[] value) => x.Accounts = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.Account>.Instance).Assign("apps", (AlgoSdk.Algod.DryrunRequest x) => x.Apps, (ref AlgoSdk.Algod.DryrunRequest x, AlgoSdk.Algod.Application[] value) => x.Apps = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.Application>.Instance).Assign("latest-timestamp", (AlgoSdk.Algod.DryrunRequest x) => x.LatestTimestamp, (ref AlgoSdk.Algod.DryrunRequest x, System.UInt64 value) => x.LatestTimestamp = value).Assign("protocol-version", (AlgoSdk.Algod.DryrunRequest x) => x.ProtocolVersion, (ref AlgoSdk.Algod.DryrunRequest x, System.String value) => x.ProtocolVersion = value, AlgoSdk.StringComparer.Instance).Assign("round", (AlgoSdk.Algod.DryrunRequest x) => x.Round, (ref AlgoSdk.Algod.DryrunRequest x, System.UInt64 value) => x.Round = value).Assign("sources", (AlgoSdk.Algod.DryrunRequest x) => x.Sources, (ref AlgoSdk.Algod.DryrunRequest x, AlgoSdk.Algod.DryrunSource[] value) => x.Sources = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.DryrunSource>.Instance).Assign("txns", (AlgoSdk.Algod.DryrunRequest x) => x.Txns, (ref AlgoSdk.Algod.DryrunRequest x, System.Byte[][] value) => x.Txns = value, AlgoSdk.ArrayComparer<System.Byte[], AlgoSdk.ArrayComparer<System.Byte>>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct Asset
    {
        
        private static bool @__generated__IsValid = Asset.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.Asset>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.Asset>(false).Assign("index", (AlgoSdk.Algod.Asset x) => x.Index, (ref AlgoSdk.Algod.Asset x, System.UInt64 value) => x.Index = value).Assign("params", (AlgoSdk.Algod.Asset x) => x.Params, (ref AlgoSdk.Algod.Asset x, AlgoSdk.Algod.AssetParams value) => x.Params = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct TealKeyValue
    {
        
        private static bool @__generated__IsValid = TealKeyValue.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.TealKeyValue>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.TealKeyValue>(false).Assign("key", (AlgoSdk.Algod.TealKeyValue x) => x.Key, (ref AlgoSdk.Algod.TealKeyValue x, System.String value) => x.Key = value, AlgoSdk.StringComparer.Instance).Assign("value", (AlgoSdk.Algod.TealKeyValue x) => x.Value, (ref AlgoSdk.Algod.TealKeyValue x, AlgoSdk.Algod.TealValue value) => x.Value = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct PendingTransactionResponse
    {
        
        private static bool @__generated__IsValid = PendingTransactionResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.PendingTransactionResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.PendingTransactionResponse>(false).Assign("pool-error", (AlgoSdk.Algod.PendingTransactionResponse x) => x.PoolError, (ref AlgoSdk.Algod.PendingTransactionResponse x, System.String value) => x.PoolError = value, AlgoSdk.StringComparer.Instance).Assign("logs", (AlgoSdk.Algod.PendingTransactionResponse x) => x.Logs, (ref AlgoSdk.Algod.PendingTransactionResponse x, System.String[] value) => x.Logs = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance).Assign("sender-rewards", (AlgoSdk.Algod.PendingTransactionResponse x) => x.SenderRewards, (ref AlgoSdk.Algod.PendingTransactionResponse x, System.UInt64 value) => x.SenderRewards = value).Assign("closing-amount", (AlgoSdk.Algod.PendingTransactionResponse x) => x.ClosingAmount, (ref AlgoSdk.Algod.PendingTransactionResponse x, System.UInt64 value) => x.ClosingAmount = value).Assign("txn", (AlgoSdk.Algod.PendingTransactionResponse x) => x.Txn, (ref AlgoSdk.Algod.PendingTransactionResponse x, AlgoSdk.SignedTxn value) => x.Txn = value).Assign("global-state-delta", (AlgoSdk.Algod.PendingTransactionResponse x) => x.GlobalStateDelta, (ref AlgoSdk.Algod.PendingTransactionResponse x, AlgoSdk.Algod.StateDelta value) => x.GlobalStateDelta = value).Assign("asset-closing-amount", (AlgoSdk.Algod.PendingTransactionResponse x) => x.AssetClosingAmount, (ref AlgoSdk.Algod.PendingTransactionResponse x, System.UInt64 value) => x.AssetClosingAmount = value).Assign("confirmed-round", (AlgoSdk.Algod.PendingTransactionResponse x) => x.ConfirmedRound, (ref AlgoSdk.Algod.PendingTransactionResponse x, System.UInt64 value) => x.ConfirmedRound = value).Assign("application-index", (AlgoSdk.Algod.PendingTransactionResponse x) => x.ApplicationIndex, (ref AlgoSdk.Algod.PendingTransactionResponse x, System.UInt64 value) => x.ApplicationIndex = value).Assign("receiver-rewards", (AlgoSdk.Algod.PendingTransactionResponse x) => x.ReceiverRewards, (ref AlgoSdk.Algod.PendingTransactionResponse x, System.UInt64 value) => x.ReceiverRewards = value).Assign("inner-txns", (AlgoSdk.Algod.PendingTransactionResponse x) => x.InnerTxns, (ref AlgoSdk.Algod.PendingTransactionResponse x, AlgoSdk.Algod.PendingTransactionResponse[] value) => x.InnerTxns = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.PendingTransactionResponse>.Instance).Assign("asset-index", (AlgoSdk.Algod.PendingTransactionResponse x) => x.AssetIndex, (ref AlgoSdk.Algod.PendingTransactionResponse x, System.UInt64 value) => x.AssetIndex = value).Assign("close-rewards", (AlgoSdk.Algod.PendingTransactionResponse x) => x.CloseRewards, (ref AlgoSdk.Algod.PendingTransactionResponse x, System.UInt64 value) => x.CloseRewards = value).Assign("local-state-delta", (AlgoSdk.Algod.PendingTransactionResponse x) => x.LocalStateDelta, (ref AlgoSdk.Algod.PendingTransactionResponse x, AlgoSdk.Algod.AccountStateDelta[] value) => x.LocalStateDelta = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.AccountStateDelta>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct DryrunSource
    {
        
        private static bool @__generated__IsValid = DryrunSource.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.DryrunSource>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.DryrunSource>(false).Assign("app-index", (AlgoSdk.Algod.DryrunSource x) => x.AppIndex, (ref AlgoSdk.Algod.DryrunSource x, System.UInt64 value) => x.AppIndex = value).Assign("field-name", (AlgoSdk.Algod.DryrunSource x) => x.FieldName, (ref AlgoSdk.Algod.DryrunSource x, System.String value) => x.FieldName = value, AlgoSdk.StringComparer.Instance).Assign("source", (AlgoSdk.Algod.DryrunSource x) => x.Source, (ref AlgoSdk.Algod.DryrunSource x, System.String value) => x.Source = value, AlgoSdk.StringComparer.Instance).Assign("txn-index", (AlgoSdk.Algod.DryrunSource x) => x.TxnIndex, (ref AlgoSdk.Algod.DryrunSource x, System.UInt64 value) => x.TxnIndex = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct EvalDeltaKeyValue
    {
        
        private static bool @__generated__IsValid = EvalDeltaKeyValue.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.EvalDeltaKeyValue>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.EvalDeltaKeyValue>(false).Assign("key", (AlgoSdk.Algod.EvalDeltaKeyValue x) => x.Key, (ref AlgoSdk.Algod.EvalDeltaKeyValue x, System.String value) => x.Key = value, AlgoSdk.StringComparer.Instance).Assign("value", (AlgoSdk.Algod.EvalDeltaKeyValue x) => x.Value, (ref AlgoSdk.Algod.EvalDeltaKeyValue x, AlgoSdk.Algod.EvalDelta value) => x.Value = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct AssetHolding
    {
        
        private static bool @__generated__IsValid = AssetHolding.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.AssetHolding>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.AssetHolding>(false).Assign("amount", (AlgoSdk.Algod.AssetHolding x) => x.Amount, (ref AlgoSdk.Algod.AssetHolding x, System.UInt64 value) => x.Amount = value).Assign("asset-id", (AlgoSdk.Algod.AssetHolding x) => x.AssetId, (ref AlgoSdk.Algod.AssetHolding x, AlgoSdk.AssetIndex value) => x.AssetId = value).Assign("is-frozen", (AlgoSdk.Algod.AssetHolding x) => x.IsFrozen, (ref AlgoSdk.Algod.AssetHolding x, System.Boolean value) => x.IsFrozen = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct Account
    {
        
        private static bool @__generated__IsValid = Account.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.Account>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.Account>(false).Assign("amount", (AlgoSdk.Algod.Account x) => x.Amount, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.Amount = value).Assign("address", (AlgoSdk.Algod.Account x) => x.Address, (ref AlgoSdk.Algod.Account x, System.String value) => x.Address = value, AlgoSdk.StringComparer.Instance).Assign("rewards", (AlgoSdk.Algod.Account x) => x.Rewards, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.Rewards = value).Assign("amount-without-pending-rewards", (AlgoSdk.Algod.Account x) => x.AmountWithoutPendingRewards, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.AmountWithoutPendingRewards = value).Assign("apps-total-extra-pages", (AlgoSdk.Algod.Account x) => x.AppsTotalExtraPages, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.AppsTotalExtraPages = value).Assign("total-assets-opted-in", (AlgoSdk.Algod.Account x) => x.TotalAssetsOptedIn, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.TotalAssetsOptedIn = value).Assign("assets", (AlgoSdk.Algod.Account x) => x.Assets, (ref AlgoSdk.Algod.Account x, AlgoSdk.Algod.AssetHolding[] value) => x.Assets = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.AssetHolding>.Instance).Assign("participation", (AlgoSdk.Algod.Account x) => x.Participation, (ref AlgoSdk.Algod.Account x, AlgoSdk.Algod.AccountParticipation value) => x.Participation = value).Assign("apps-total-schema", (AlgoSdk.Algod.Account x) => x.AppsTotalSchema, (ref AlgoSdk.Algod.Account x, AlgoSdk.Algod.ApplicationStateSchema value) => x.AppsTotalSchema = value).Assign("total-apps-opted-in", (AlgoSdk.Algod.Account x) => x.TotalAppsOptedIn, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.TotalAppsOptedIn = value).Assign("round", (AlgoSdk.Algod.Account x) => x.Round, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.Round = value).Assign("pending-rewards", (AlgoSdk.Algod.Account x) => x.PendingRewards, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.PendingRewards = value).Assign("created-apps", (AlgoSdk.Algod.Account x) => x.CreatedApps, (ref AlgoSdk.Algod.Account x, AlgoSdk.Algod.Application[] value) => x.CreatedApps = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.Application>.Instance).Assign("status", (AlgoSdk.Algod.Account x) => x.Status, (ref AlgoSdk.Algod.Account x, System.String value) => x.Status = value, AlgoSdk.StringComparer.Instance).Assign("sig-type", (AlgoSdk.Algod.Account x) => x.SigType, (ref AlgoSdk.Algod.Account x, AlgoSdk.SignatureType value) => x.SigType = value, AlgoSdk.ByteEnumComparer<AlgoSdk.SignatureType>.Instance).Assign("auth-addr", (AlgoSdk.Algod.Account x) => x.AuthAddr, (ref AlgoSdk.Algod.Account x, AlgoSdk.Address value) => x.AuthAddr = value).Assign("total-created-assets", (AlgoSdk.Algod.Account x) => x.TotalCreatedAssets, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.TotalCreatedAssets = value).Assign("min-balance", (AlgoSdk.Algod.Account x) => x.MinBalance, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.MinBalance = value).Assign("reward-base", (AlgoSdk.Algod.Account x) => x.RewardBase, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.RewardBase = value).Assign("created-assets", (AlgoSdk.Algod.Account x) => x.CreatedAssets, (ref AlgoSdk.Algod.Account x, AlgoSdk.Algod.Asset[] value) => x.CreatedAssets = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.Asset>.Instance).Assign("apps-local-state", (AlgoSdk.Algod.Account x) => x.AppsLocalState, (ref AlgoSdk.Algod.Account x, AlgoSdk.Algod.ApplicationLocalState[] value) => x.AppsLocalState = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.ApplicationLocalState>.Instance).Assign("total-created-apps", (AlgoSdk.Algod.Account x) => x.TotalCreatedApps, (ref AlgoSdk.Algod.Account x, System.UInt64 value) => x.TotalCreatedApps = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct AccountStateDelta
    {
        
        private static bool @__generated__IsValid = AccountStateDelta.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.AccountStateDelta>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.AccountStateDelta>(false).Assign("address", (AlgoSdk.Algod.AccountStateDelta x) => x.Address, (ref AlgoSdk.Algod.AccountStateDelta x, System.String value) => x.Address = value, AlgoSdk.StringComparer.Instance).Assign("delta", (AlgoSdk.Algod.AccountStateDelta x) => x.Delta, (ref AlgoSdk.Algod.AccountStateDelta x, AlgoSdk.Algod.StateDelta value) => x.Delta = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct Application
    {
        
        private static bool @__generated__IsValid = Application.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.Application>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.Application>(false).Assign("id", (AlgoSdk.Algod.Application x) => x.Id, (ref AlgoSdk.Algod.Application x, System.UInt64 value) => x.Id = value).Assign("params", (AlgoSdk.Algod.Application x) => x.Params, (ref AlgoSdk.Algod.Application x, AlgoSdk.Algod.ApplicationParams value) => x.Params = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct ApplicationLocalState
    {
        
        private static bool @__generated__IsValid = ApplicationLocalState.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.ApplicationLocalState>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.ApplicationLocalState>(false).Assign("id", (AlgoSdk.Algod.ApplicationLocalState x) => x.Id, (ref AlgoSdk.Algod.ApplicationLocalState x, System.UInt64 value) => x.Id = value).Assign("key-value", (AlgoSdk.Algod.ApplicationLocalState x) => x.KeyValue, (ref AlgoSdk.Algod.ApplicationLocalState x, AlgoSdk.Algod.TealKeyValueStore value) => x.KeyValue = value).Assign("schema", (AlgoSdk.Algod.ApplicationLocalState x) => x.Schema, (ref AlgoSdk.Algod.ApplicationLocalState x, AlgoSdk.Algod.ApplicationStateSchema value) => x.Schema = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct ErrorResponse
    {
        
        private static bool @__generated__IsValid = ErrorResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.ErrorResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.ErrorResponse>(false).Assign("data", (AlgoSdk.Algod.ErrorResponse x) => x.Data, (ref AlgoSdk.Algod.ErrorResponse x, AlgoSdk.AlgoApiObject value) => x.Data = value).Assign("message", (AlgoSdk.Algod.ErrorResponse x) => x.Message, (ref AlgoSdk.Algod.ErrorResponse x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct AccountParticipation
    {
        
        private static bool @__generated__IsValid = AccountParticipation.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.AccountParticipation>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.AccountParticipation>(false).Assign("selection-participation-key", (AlgoSdk.Algod.AccountParticipation x) => x.SelectionParticipationKey, (ref AlgoSdk.Algod.AccountParticipation x, System.String value) => x.SelectionParticipationKey = value, AlgoSdk.StringComparer.Instance).Assign("state-proof-key", (AlgoSdk.Algod.AccountParticipation x) => x.StateProofKey, (ref AlgoSdk.Algod.AccountParticipation x, System.String value) => x.StateProofKey = value, AlgoSdk.StringComparer.Instance).Assign("vote-first-valid", (AlgoSdk.Algod.AccountParticipation x) => x.VoteFirstValid, (ref AlgoSdk.Algod.AccountParticipation x, System.UInt64 value) => x.VoteFirstValid = value).Assign("vote-key-dilution", (AlgoSdk.Algod.AccountParticipation x) => x.VoteKeyDilution, (ref AlgoSdk.Algod.AccountParticipation x, System.UInt64 value) => x.VoteKeyDilution = value).Assign("vote-last-valid", (AlgoSdk.Algod.AccountParticipation x) => x.VoteLastValid, (ref AlgoSdk.Algod.AccountParticipation x, System.UInt64 value) => x.VoteLastValid = value).Assign("vote-participation-key", (AlgoSdk.Algod.AccountParticipation x) => x.VoteParticipationKey, (ref AlgoSdk.Algod.AccountParticipation x, System.String value) => x.VoteParticipationKey = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct Version
    {
        
        private static bool @__generated__IsValid = Version.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.Version>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.Version>(false).Assign("build", (AlgoSdk.Algod.Version x) => x.Build, (ref AlgoSdk.Algod.Version x, AlgoSdk.Algod.BuildVersion value) => x.Build = value).Assign("genesis_hash_b64", (AlgoSdk.Algod.Version x) => x.Genesis_hash_b64, (ref AlgoSdk.Algod.Version x, System.String value) => x.Genesis_hash_b64 = value, AlgoSdk.StringComparer.Instance).Assign("genesis_id", (AlgoSdk.Algod.Version x) => x.Genesis_id, (ref AlgoSdk.Algod.Version x, System.String value) => x.Genesis_id = value, AlgoSdk.StringComparer.Instance).Assign("versions", (AlgoSdk.Algod.Version x) => x.Versions, (ref AlgoSdk.Algod.Version x, System.String[] value) => x.Versions = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct AssetParams
    {
        
        private static bool @__generated__IsValid = AssetParams.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.AssetParams>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.AssetParams>(false).Assign("default-frozen", (AlgoSdk.Algod.AssetParams x) => x.DefaultFrozen, (ref AlgoSdk.Algod.AssetParams x, System.Boolean value) => x.DefaultFrozen = value).Assign("creator", (AlgoSdk.Algod.AssetParams x) => x.Creator, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.Creator = value, AlgoSdk.StringComparer.Instance).Assign("decimals", (AlgoSdk.Algod.AssetParams x) => x.Decimals, (ref AlgoSdk.Algod.AssetParams x, System.UInt64 value) => x.Decimals = value).Assign("freeze", (AlgoSdk.Algod.AssetParams x) => x.Freeze, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.Freeze = value, AlgoSdk.StringComparer.Instance).Assign("reserve", (AlgoSdk.Algod.AssetParams x) => x.Reserve, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.Reserve = value, AlgoSdk.StringComparer.Instance).Assign("unit-name-b64", (AlgoSdk.Algod.AssetParams x) => x.UnitNameB64, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.UnitNameB64 = value, AlgoSdk.StringComparer.Instance).Assign("name", (AlgoSdk.Algod.AssetParams x) => x.Name, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.Name = value, AlgoSdk.StringComparer.Instance).Assign("url-b64", (AlgoSdk.Algod.AssetParams x) => x.UrlB64, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.UrlB64 = value, AlgoSdk.StringComparer.Instance).Assign("total", (AlgoSdk.Algod.AssetParams x) => x.Total, (ref AlgoSdk.Algod.AssetParams x, System.UInt64 value) => x.Total = value).Assign("manager", (AlgoSdk.Algod.AssetParams x) => x.Manager, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.Manager = value, AlgoSdk.StringComparer.Instance).Assign("name-b64", (AlgoSdk.Algod.AssetParams x) => x.NameB64, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.NameB64 = value, AlgoSdk.StringComparer.Instance).Assign("url", (AlgoSdk.Algod.AssetParams x) => x.Url, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.Url = value, AlgoSdk.StringComparer.Instance).Assign("unit-name", (AlgoSdk.Algod.AssetParams x) => x.UnitName, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.UnitName = value, AlgoSdk.StringComparer.Instance).Assign("clawback", (AlgoSdk.Algod.AssetParams x) => x.Clawback, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.Clawback = value, AlgoSdk.StringComparer.Instance).Assign("metadata-hash", (AlgoSdk.Algod.AssetParams x) => x.MetadataHash, (ref AlgoSdk.Algod.AssetParams x, System.String value) => x.MetadataHash = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct DryrunTxnResult
    {
        
        private static bool @__generated__IsValid = DryrunTxnResult.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.DryrunTxnResult>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Algod.DryrunTxnResult>(false).Assign("app-call-messages", (AlgoSdk.Algod.DryrunTxnResult x) => x.AppCallMessages, (ref AlgoSdk.Algod.DryrunTxnResult x, System.String[] value) => x.AppCallMessages = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance).Assign("disassembly", (AlgoSdk.Algod.DryrunTxnResult x) => x.Disassembly, (ref AlgoSdk.Algod.DryrunTxnResult x, System.String[] value) => x.Disassembly = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance).Assign("logs", (AlgoSdk.Algod.DryrunTxnResult x) => x.Logs, (ref AlgoSdk.Algod.DryrunTxnResult x, System.String[] value) => x.Logs = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance).Assign("logic-sig-disassembly", (AlgoSdk.Algod.DryrunTxnResult x) => x.LogicSigDisassembly, (ref AlgoSdk.Algod.DryrunTxnResult x, System.String[] value) => x.LogicSigDisassembly = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance).Assign("local-deltas", (AlgoSdk.Algod.DryrunTxnResult x) => x.LocalDeltas, (ref AlgoSdk.Algod.DryrunTxnResult x, AlgoSdk.Algod.AccountStateDelta[] value) => x.LocalDeltas = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.AccountStateDelta>.Instance).Assign("logic-sig-trace", (AlgoSdk.Algod.DryrunTxnResult x) => x.LogicSigTrace, (ref AlgoSdk.Algod.DryrunTxnResult x, AlgoSdk.Algod.DryrunState[] value) => x.LogicSigTrace = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.DryrunState>.Instance).Assign("cost", (AlgoSdk.Algod.DryrunTxnResult x) => x.Cost, (ref AlgoSdk.Algod.DryrunTxnResult x, System.UInt64 value) => x.Cost = value).Assign("logic-sig-messages", (AlgoSdk.Algod.DryrunTxnResult x) => x.LogicSigMessages, (ref AlgoSdk.Algod.DryrunTxnResult x, System.String[] value) => x.LogicSigMessages = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance).Assign("app-call-trace", (AlgoSdk.Algod.DryrunTxnResult x) => x.AppCallTrace, (ref AlgoSdk.Algod.DryrunTxnResult x, AlgoSdk.Algod.DryrunState[] value) => x.AppCallTrace = value, AlgoSdk.ArrayComparer<AlgoSdk.Algod.DryrunState>.Instance).Assign("global-delta", (AlgoSdk.Algod.DryrunTxnResult x) => x.GlobalDelta, (ref AlgoSdk.Algod.DryrunTxnResult x, AlgoSdk.Algod.StateDelta value) => x.GlobalDelta = value));
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct StateDelta
    {
        
        private static bool @__generated__IsValid = StateDelta.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.StateDelta>(new AlgoSdk.WrappedValueFormatter<AlgoSdk.Algod.StateDelta, AlgoSdk.Algod.EvalDeltaKeyValue[]>());
            return true;
        }
    }
}
namespace AlgoSdk.Algod
{
    
    
    public partial struct TealKeyValueStore
    {
        
        private static bool @__generated__IsValid = TealKeyValueStore.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Algod.TealKeyValueStore>(new AlgoSdk.WrappedValueFormatter<AlgoSdk.Algod.TealKeyValueStore, AlgoSdk.Algod.TealKeyValue[]>());
            return true;
        }
    }
}
