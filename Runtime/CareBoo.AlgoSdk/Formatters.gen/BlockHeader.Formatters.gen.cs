//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlgoSdk
{
    
    
    public partial struct BlockHeader
    {
        
        private static bool @__generated__IsValid = BlockHeader.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.BlockHeader>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.BlockHeader>(false).Assign("gh", (AlgoSdk.BlockHeader x) => x.GenesisHash, (ref AlgoSdk.BlockHeader x, AlgoSdk.GenesisHash value) => x.GenesisHash = value).Assign("gen", (AlgoSdk.BlockHeader x) => x.GenesisId, (ref AlgoSdk.BlockHeader x, Unity.Collections.FixedString64Bytes value) => x.GenesisId = value).Assign("prev", (AlgoSdk.BlockHeader x) => x.PreviousBlockHash, (ref AlgoSdk.BlockHeader x, AlgoSdk.BlockHash value) => x.PreviousBlockHash = value).Assign("rewards", (AlgoSdk.BlockHeader x) => x.Rewards, (ref AlgoSdk.BlockHeader x, AlgoSdk.BlockRewards value) => x.Rewards = value).Assign("rnd", (AlgoSdk.BlockHeader x) => x.Round, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.Round = value).Assign("seed", (AlgoSdk.BlockHeader x) => x.Seed, (ref AlgoSdk.BlockHeader x, AlgoSdk.Crypto.Sha512_256_Hash value) => x.Seed = value).Assign("ts", (AlgoSdk.BlockHeader x) => x.Timestamp, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.Timestamp = value).Assign("txns", (AlgoSdk.BlockHeader x) => x.Transactions, (ref AlgoSdk.BlockHeader x, AlgoSdk.BlockTransaction[] value) => x.Transactions = value, AlgoSdk.ArrayComparer<AlgoSdk.BlockTransaction>.Instance).Assign("tc", (AlgoSdk.BlockHeader x) => x.TransactionCounter, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.TransactionCounter = value).Assign("upgrade-state", (AlgoSdk.BlockHeader x) => x.UpgradeState, (ref AlgoSdk.BlockHeader x, AlgoSdk.BlockUpgradeState value) => x.UpgradeState = value).Assign("upgrade-vote", (AlgoSdk.BlockHeader x) => x.UpgradeVote, (ref AlgoSdk.BlockHeader x, AlgoSdk.BlockUpgradeVote value) => x.UpgradeVote = value).Assign("cc", (AlgoSdk.BlockHeader x) => x.Cc, (ref AlgoSdk.BlockHeader x, AlgoSdk.AlgoApiObject value) => x.Cc = value).Assign("spt", (AlgoSdk.BlockHeader x) => x.StateProofTracking, (ref AlgoSdk.BlockHeader x, AlgoSdk.StateProofTrackingDataMap value) => x.StateProofTracking = value).Assign("fees", (AlgoSdk.BlockHeader x) => x.FeeSink, (ref AlgoSdk.BlockHeader x, AlgoSdk.Address value) => x.FeeSink = value).Assign("rwcalr", (AlgoSdk.BlockHeader x) => x.RewardsCalculationRound, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.RewardsCalculationRound = value).Assign("earn", (AlgoSdk.BlockHeader x) => x.RewardsLevel, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.RewardsLevel = value).Assign("rwd", (AlgoSdk.BlockHeader x) => x.RewardsPool, (ref AlgoSdk.BlockHeader x, AlgoSdk.Address value) => x.RewardsPool = value).Assign("rate", (AlgoSdk.BlockHeader x) => x.RewardsRate, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.RewardsRate = value).Assign("frac", (AlgoSdk.BlockHeader x) => x.RewardsResidue, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.RewardsResidue = value).Assign("proto", (AlgoSdk.BlockHeader x) => x.CurrentProtocol, (ref AlgoSdk.BlockHeader x, Unity.Collections.FixedString128Bytes value) => x.CurrentProtocol = value).Assign("nextproto", (AlgoSdk.BlockHeader x) => x.NextProtocol, (ref AlgoSdk.BlockHeader x, Unity.Collections.FixedString128Bytes value) => x.NextProtocol = value).Assign("nextyes", (AlgoSdk.BlockHeader x) => x.NextProtocolApprovals, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.NextProtocolApprovals = value).Assign("nextswitch", (AlgoSdk.BlockHeader x) => x.NextProtocolSwitchOn, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.NextProtocolSwitchOn = value).Assign("nextbefore", (AlgoSdk.BlockHeader x) => x.NextProtocolVoteBefore, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.NextProtocolVoteBefore = value).Assign("upgradeyes", (AlgoSdk.BlockHeader x) => x.UpgradeApprove, (ref AlgoSdk.BlockHeader x, AlgoSdk.Optional<System.Boolean> value) => x.UpgradeApprove = value).Assign("upgradedelay", (AlgoSdk.BlockHeader x) => x.UpgradeDelay, (ref AlgoSdk.BlockHeader x, System.UInt64 value) => x.UpgradeDelay = value).Assign("upgradeprop", (AlgoSdk.BlockHeader x) => x.UpgradePropose, (ref AlgoSdk.BlockHeader x, AlgoSdk.Address value) => x.UpgradePropose = value).Assign("txn", (AlgoSdk.BlockHeader x) => x.NativeSha512_256Commitment, (ref AlgoSdk.BlockHeader x, AlgoSdk.Digest value) => x.NativeSha512_256Commitment = value).Assign("txn256", (AlgoSdk.BlockHeader x) => x.Sha256Commitment, (ref AlgoSdk.BlockHeader x, AlgoSdk.Digest value) => x.Sha256Commitment = value));
            return true;
        }
    }
}
