//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlgoSdk.Indexer
{
    
    
    public partial struct Block
    {
        
        private static bool @__generated__IsValid = Block.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.Block>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.Block>(false).Assign("rewards", (AlgoSdk.Indexer.Block x) => x.Rewards, (ref AlgoSdk.Indexer.Block x, AlgoSdk.Indexer.BlockRewards value) => x.Rewards = value).Assign("genesis-hash", (AlgoSdk.Indexer.Block x) => x.GenesisHash, (ref AlgoSdk.Indexer.Block x, System.Byte[] value) => x.GenesisHash = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("upgrade-state", (AlgoSdk.Indexer.Block x) => x.UpgradeState, (ref AlgoSdk.Indexer.Block x, AlgoSdk.Indexer.BlockUpgradeState value) => x.UpgradeState = value).Assign("previous-block-hash", (AlgoSdk.Indexer.Block x) => x.PreviousBlockHash, (ref AlgoSdk.Indexer.Block x, System.Byte[] value) => x.PreviousBlockHash = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("seed", (AlgoSdk.Indexer.Block x) => x.Seed, (ref AlgoSdk.Indexer.Block x, System.Byte[] value) => x.Seed = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("round", (AlgoSdk.Indexer.Block x) => x.Round, (ref AlgoSdk.Indexer.Block x, System.UInt64 value) => x.Round = value).Assign("transactions-root", (AlgoSdk.Indexer.Block x) => x.TransactionsRoot, (ref AlgoSdk.Indexer.Block x, System.Byte[] value) => x.TransactionsRoot = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("state-proof-tracking", (AlgoSdk.Indexer.Block x) => x.StateProofTracking, (ref AlgoSdk.Indexer.Block x, AlgoSdk.Indexer.StateProofTracking[] value) => x.StateProofTracking = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.StateProofTracking>.Instance).Assign("genesis-id", (AlgoSdk.Indexer.Block x) => x.GenesisId, (ref AlgoSdk.Indexer.Block x, System.String value) => x.GenesisId = value, AlgoSdk.StringComparer.Instance).Assign("transactions-root-sha256", (AlgoSdk.Indexer.Block x) => x.TransactionsRootSha256, (ref AlgoSdk.Indexer.Block x, System.Byte[] value) => x.TransactionsRootSha256 = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("upgrade-vote", (AlgoSdk.Indexer.Block x) => x.UpgradeVote, (ref AlgoSdk.Indexer.Block x, AlgoSdk.Indexer.BlockUpgradeVote value) => x.UpgradeVote = value).Assign("participation-updates", (AlgoSdk.Indexer.Block x) => x.ParticipationUpdates, (ref AlgoSdk.Indexer.Block x, AlgoSdk.Indexer.ParticipationUpdates value) => x.ParticipationUpdates = value).Assign("transactions", (AlgoSdk.Indexer.Block x) => x.Transactions, (ref AlgoSdk.Indexer.Block x, AlgoSdk.Indexer.Transaction[] value) => x.Transactions = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.Transaction>.Instance).Assign("timestamp", (AlgoSdk.Indexer.Block x) => x.Timestamp, (ref AlgoSdk.Indexer.Block x, System.UInt64 value) => x.Timestamp = value).Assign("txn-counter", (AlgoSdk.Indexer.Block x) => x.TxnCounter, (ref AlgoSdk.Indexer.Block x, AlgoSdk.Optional<System.UInt64> value) => x.TxnCounter = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct HashFactory
    {
        
        private static bool @__generated__IsValid = HashFactory.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.HashFactory>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.HashFactory>(false).Assign("hash-type", (AlgoSdk.Indexer.HashFactory x) => x.HashType, (ref AlgoSdk.Indexer.HashFactory x, AlgoSdk.Optional<System.UInt64> value) => x.HashType = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionSignatureMultisig
    {
        
        private static bool @__generated__IsValid = TransactionSignatureMultisig.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionSignatureMultisig>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionSignatureMultisig>(false).Assign("subsignature", (AlgoSdk.Indexer.TransactionSignatureMultisig x) => x.Subsignature, (ref AlgoSdk.Indexer.TransactionSignatureMultisig x, AlgoSdk.Indexer.TransactionSignatureMultisigSubsignature[] value) => x.Subsignature = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.TransactionSignatureMultisigSubsignature>.Instance).Assign("threshold", (AlgoSdk.Indexer.TransactionSignatureMultisig x) => x.Threshold, (ref AlgoSdk.Indexer.TransactionSignatureMultisig x, AlgoSdk.Optional<System.UInt64> value) => x.Threshold = value).Assign("version", (AlgoSdk.Indexer.TransactionSignatureMultisig x) => x.Version, (ref AlgoSdk.Indexer.TransactionSignatureMultisig x, AlgoSdk.Optional<System.UInt64> value) => x.Version = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct ParticipationUpdates
    {
        
        private static bool @__generated__IsValid = ParticipationUpdates.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.ParticipationUpdates>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.ParticipationUpdates>(false).Assign("expired-participation-accounts", (AlgoSdk.Indexer.ParticipationUpdates x) => x.ExpiredParticipationAccounts, (ref AlgoSdk.Indexer.ParticipationUpdates x, System.String[] value) => x.ExpiredParticipationAccounts = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct ApplicationParams
    {
        
        private static bool @__generated__IsValid = ApplicationParams.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.ApplicationParams>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.ApplicationParams>(false).Assign("creator", (AlgoSdk.Indexer.ApplicationParams x) => x.Creator, (ref AlgoSdk.Indexer.ApplicationParams x, AlgoSdk.Address value) => x.Creator = value).Assign("approval-program", (AlgoSdk.Indexer.ApplicationParams x) => x.ApprovalProgram, (ref AlgoSdk.Indexer.ApplicationParams x, AlgoSdk.CompiledTeal value) => x.ApprovalProgram = value).Assign("clear-state-program", (AlgoSdk.Indexer.ApplicationParams x) => x.ClearStateProgram, (ref AlgoSdk.Indexer.ApplicationParams x, AlgoSdk.CompiledTeal value) => x.ClearStateProgram = value).Assign("local-state-schema", (AlgoSdk.Indexer.ApplicationParams x) => x.LocalStateSchema, (ref AlgoSdk.Indexer.ApplicationParams x, AlgoSdk.Indexer.ApplicationStateSchema value) => x.LocalStateSchema = value).Assign("global-state-schema", (AlgoSdk.Indexer.ApplicationParams x) => x.GlobalStateSchema, (ref AlgoSdk.Indexer.ApplicationParams x, AlgoSdk.Indexer.ApplicationStateSchema value) => x.GlobalStateSchema = value).Assign("global-state", (AlgoSdk.Indexer.ApplicationParams x) => x.GlobalState, (ref AlgoSdk.Indexer.ApplicationParams x, AlgoSdk.Indexer.TealKeyValueStore value) => x.GlobalState = value).Assign("extra-program-pages", (AlgoSdk.Indexer.ApplicationParams x) => x.ExtraProgramPages, (ref AlgoSdk.Indexer.ApplicationParams x, AlgoSdk.Optional<System.UInt64> value) => x.ExtraProgramPages = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct StateProofTracking
    {
        
        private static bool @__generated__IsValid = StateProofTracking.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.StateProofTracking>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.StateProofTracking>(false).Assign("type", (AlgoSdk.Indexer.StateProofTracking x) => x.Type, (ref AlgoSdk.Indexer.StateProofTracking x, AlgoSdk.Optional<System.UInt64> value) => x.Type = value).Assign("voters-commitment", (AlgoSdk.Indexer.StateProofTracking x) => x.VotersCommitment, (ref AlgoSdk.Indexer.StateProofTracking x, System.Byte[] value) => x.VotersCommitment = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("online-total-weight", (AlgoSdk.Indexer.StateProofTracking x) => x.OnlineTotalWeight, (ref AlgoSdk.Indexer.StateProofTracking x, AlgoSdk.Optional<System.UInt64> value) => x.OnlineTotalWeight = value).Assign("next-round", (AlgoSdk.Indexer.StateProofTracking x) => x.NextRound, (ref AlgoSdk.Indexer.StateProofTracking x, AlgoSdk.Optional<System.UInt64> value) => x.NextRound = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TealValue
    {
        
        private static bool @__generated__IsValid = TealValue.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TealValue>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TealValue>(false).Assign("type", (AlgoSdk.Indexer.TealValue x) => x.Type, (ref AlgoSdk.Indexer.TealValue x, System.UInt64 value) => x.Type = value).Assign("bytes", (AlgoSdk.Indexer.TealValue x) => x.Bytes, (ref AlgoSdk.Indexer.TealValue x, System.String value) => x.Bytes = value, AlgoSdk.StringComparer.Instance).Assign("uint", (AlgoSdk.Indexer.TealValue x) => x.Uint, (ref AlgoSdk.Indexer.TealValue x, System.UInt64 value) => x.Uint = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionSignatureLogicsig
    {
        
        private static bool @__generated__IsValid = TransactionSignatureLogicsig.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionSignatureLogicsig>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionSignatureLogicsig>(false).Assign("args", (AlgoSdk.Indexer.TransactionSignatureLogicsig x) => x.Args, (ref AlgoSdk.Indexer.TransactionSignatureLogicsig x, System.String[] value) => x.Args = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance).Assign("logic", (AlgoSdk.Indexer.TransactionSignatureLogicsig x) => x.Logic, (ref AlgoSdk.Indexer.TransactionSignatureLogicsig x, System.Byte[] value) => x.Logic = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("multisig-signature", (AlgoSdk.Indexer.TransactionSignatureLogicsig x) => x.MultisigSignature, (ref AlgoSdk.Indexer.TransactionSignatureLogicsig x, AlgoSdk.Indexer.TransactionSignatureMultisig value) => x.MultisigSignature = value).Assign("signature", (AlgoSdk.Indexer.TransactionSignatureLogicsig x) => x.Signature, (ref AlgoSdk.Indexer.TransactionSignatureLogicsig x, System.Byte[] value) => x.Signature = value, AlgoSdk.ArrayComparer<System.Byte>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct EvalDelta
    {
        
        private static bool @__generated__IsValid = EvalDelta.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.EvalDelta>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.EvalDelta>(false).Assign("action", (AlgoSdk.Indexer.EvalDelta x) => x.Action, (ref AlgoSdk.Indexer.EvalDelta x, System.UInt64 value) => x.Action = value).Assign("bytes", (AlgoSdk.Indexer.EvalDelta x) => x.Bytes, (ref AlgoSdk.Indexer.EvalDelta x, System.String value) => x.Bytes = value, AlgoSdk.StringComparer.Instance).Assign("uint", (AlgoSdk.Indexer.EvalDelta x) => x.Uint, (ref AlgoSdk.Indexer.EvalDelta x, AlgoSdk.Optional<System.UInt64> value) => x.Uint = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionApplication
    {
        
        private static bool @__generated__IsValid = TransactionApplication.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionApplication>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionApplication>(false).Assign("application-id", (AlgoSdk.Indexer.TransactionApplication x) => x.ApplicationId, (ref AlgoSdk.Indexer.TransactionApplication x, System.UInt64 value) => x.ApplicationId = value).Assign("approval-program", (AlgoSdk.Indexer.TransactionApplication x) => x.ApprovalProgram, (ref AlgoSdk.Indexer.TransactionApplication x, AlgoSdk.CompiledTeal value) => x.ApprovalProgram = value).Assign("foreign-apps", (AlgoSdk.Indexer.TransactionApplication x) => x.ForeignApps, (ref AlgoSdk.Indexer.TransactionApplication x, System.UInt64[] value) => x.ForeignApps = value, AlgoSdk.ArrayComparer<System.UInt64>.Instance).Assign("application-args", (AlgoSdk.Indexer.TransactionApplication x) => x.ApplicationArgs, (ref AlgoSdk.Indexer.TransactionApplication x, System.String[] value) => x.ApplicationArgs = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance).Assign("on-completion", (AlgoSdk.Indexer.TransactionApplication x) => x.OnCompletion, (ref AlgoSdk.Indexer.TransactionApplication x, AlgoSdk.OnCompletion value) => x.OnCompletion = value, AlgoSdk.ByteEnumComparer<AlgoSdk.OnCompletion>.Instance).Assign("global-state-schema", (AlgoSdk.Indexer.TransactionApplication x) => x.GlobalStateSchema, (ref AlgoSdk.Indexer.TransactionApplication x, AlgoSdk.Indexer.StateSchema value) => x.GlobalStateSchema = value).Assign("extra-program-pages", (AlgoSdk.Indexer.TransactionApplication x) => x.ExtraProgramPages, (ref AlgoSdk.Indexer.TransactionApplication x, AlgoSdk.Optional<System.UInt64> value) => x.ExtraProgramPages = value).Assign("foreign-assets", (AlgoSdk.Indexer.TransactionApplication x) => x.ForeignAssets, (ref AlgoSdk.Indexer.TransactionApplication x, System.UInt64[] value) => x.ForeignAssets = value, AlgoSdk.ArrayComparer<System.UInt64>.Instance).Assign("local-state-schema", (AlgoSdk.Indexer.TransactionApplication x) => x.LocalStateSchema, (ref AlgoSdk.Indexer.TransactionApplication x, AlgoSdk.Indexer.StateSchema value) => x.LocalStateSchema = value).Assign("accounts", (AlgoSdk.Indexer.TransactionApplication x) => x.Accounts, (ref AlgoSdk.Indexer.TransactionApplication x, AlgoSdk.Address[] value) => x.Accounts = value, AlgoSdk.ArrayComparer<AlgoSdk.Address>.Instance).Assign("clear-state-program", (AlgoSdk.Indexer.TransactionApplication x) => x.ClearStateProgram, (ref AlgoSdk.Indexer.TransactionApplication x, AlgoSdk.CompiledTeal value) => x.ClearStateProgram = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct ApplicationStateSchema
    {
        
        private static bool @__generated__IsValid = ApplicationStateSchema.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.ApplicationStateSchema>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.ApplicationStateSchema>(false).Assign("num-uint", (AlgoSdk.Indexer.ApplicationStateSchema x) => x.NumUint, (ref AlgoSdk.Indexer.ApplicationStateSchema x, System.UInt64 value) => x.NumUint = value).Assign("num-byte-slice", (AlgoSdk.Indexer.ApplicationStateSchema x) => x.NumByteSlice, (ref AlgoSdk.Indexer.ApplicationStateSchema x, System.UInt64 value) => x.NumByteSlice = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionAssetConfig
    {
        
        private static bool @__generated__IsValid = TransactionAssetConfig.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionAssetConfig>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionAssetConfig>(false).Assign("asset-id", (AlgoSdk.Indexer.TransactionAssetConfig x) => x.AssetId, (ref AlgoSdk.Indexer.TransactionAssetConfig x, AlgoSdk.Optional<System.UInt64> value) => x.AssetId = value).Assign("params", (AlgoSdk.Indexer.TransactionAssetConfig x) => x.Params, (ref AlgoSdk.Indexer.TransactionAssetConfig x, AlgoSdk.Indexer.AssetParams value) => x.Params = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionPayment
    {
        
        private static bool @__generated__IsValid = TransactionPayment.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionPayment>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionPayment>(false).Assign("amount", (AlgoSdk.Indexer.TransactionPayment x) => x.Amount, (ref AlgoSdk.Indexer.TransactionPayment x, System.UInt64 value) => x.Amount = value).Assign("close-amount", (AlgoSdk.Indexer.TransactionPayment x) => x.CloseAmount, (ref AlgoSdk.Indexer.TransactionPayment x, AlgoSdk.Optional<System.UInt64> value) => x.CloseAmount = value).Assign("close-remainder-to", (AlgoSdk.Indexer.TransactionPayment x) => x.CloseRemainderTo, (ref AlgoSdk.Indexer.TransactionPayment x, System.String value) => x.CloseRemainderTo = value, AlgoSdk.StringComparer.Instance).Assign("receiver", (AlgoSdk.Indexer.TransactionPayment x) => x.Receiver, (ref AlgoSdk.Indexer.TransactionPayment x, System.String value) => x.Receiver = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct StateProofFields
    {
        
        private static bool @__generated__IsValid = StateProofFields.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.StateProofFields>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.StateProofFields>(false).Assign("sig-commit", (AlgoSdk.Indexer.StateProofFields x) => x.SigCommit, (ref AlgoSdk.Indexer.StateProofFields x, System.Byte[] value) => x.SigCommit = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("signed-weight", (AlgoSdk.Indexer.StateProofFields x) => x.SignedWeight, (ref AlgoSdk.Indexer.StateProofFields x, AlgoSdk.Optional<System.UInt64> value) => x.SignedWeight = value).Assign("sig-proofs", (AlgoSdk.Indexer.StateProofFields x) => x.SigProofs, (ref AlgoSdk.Indexer.StateProofFields x, AlgoSdk.Indexer.MerkleArrayProof value) => x.SigProofs = value).Assign("part-proofs", (AlgoSdk.Indexer.StateProofFields x) => x.PartProofs, (ref AlgoSdk.Indexer.StateProofFields x, AlgoSdk.Indexer.MerkleArrayProof value) => x.PartProofs = value).Assign("salt-version", (AlgoSdk.Indexer.StateProofFields x) => x.SaltVersion, (ref AlgoSdk.Indexer.StateProofFields x, AlgoSdk.Optional<System.UInt64> value) => x.SaltVersion = value).Assign("reveals", (AlgoSdk.Indexer.StateProofFields x) => x.Reveals, (ref AlgoSdk.Indexer.StateProofFields x, AlgoSdk.Indexer.StateProofReveal[] value) => x.Reveals = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.StateProofReveal>.Instance).Assign("positions-to-reveal", (AlgoSdk.Indexer.StateProofFields x) => x.PositionsToReveal, (ref AlgoSdk.Indexer.StateProofFields x, System.UInt64[] value) => x.PositionsToReveal = value, AlgoSdk.ArrayComparer<System.UInt64>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct MiniAssetHolding
    {
        
        private static bool @__generated__IsValid = MiniAssetHolding.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.MiniAssetHolding>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.MiniAssetHolding>(false).Assign("address", (AlgoSdk.Indexer.MiniAssetHolding x) => x.Address, (ref AlgoSdk.Indexer.MiniAssetHolding x, System.String value) => x.Address = value, AlgoSdk.StringComparer.Instance).Assign("amount", (AlgoSdk.Indexer.MiniAssetHolding x) => x.Amount, (ref AlgoSdk.Indexer.MiniAssetHolding x, System.UInt64 value) => x.Amount = value).Assign("is-frozen", (AlgoSdk.Indexer.MiniAssetHolding x) => x.IsFrozen, (ref AlgoSdk.Indexer.MiniAssetHolding x, System.Boolean value) => x.IsFrozen = value).Assign("deleted", (AlgoSdk.Indexer.MiniAssetHolding x) => x.Deleted, (ref AlgoSdk.Indexer.MiniAssetHolding x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value).Assign("opted-in-at-round", (AlgoSdk.Indexer.MiniAssetHolding x) => x.OptedInAtRound, (ref AlgoSdk.Indexer.MiniAssetHolding x, AlgoSdk.Optional<System.UInt64> value) => x.OptedInAtRound = value).Assign("opted-out-at-round", (AlgoSdk.Indexer.MiniAssetHolding x) => x.OptedOutAtRound, (ref AlgoSdk.Indexer.MiniAssetHolding x, AlgoSdk.Optional<System.UInt64> value) => x.OptedOutAtRound = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct StateProofParticipant
    {
        
        private static bool @__generated__IsValid = StateProofParticipant.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.StateProofParticipant>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.StateProofParticipant>(false).Assign("verifier", (AlgoSdk.Indexer.StateProofParticipant x) => x.Verifier, (ref AlgoSdk.Indexer.StateProofParticipant x, AlgoSdk.Indexer.StateProofVerifier value) => x.Verifier = value).Assign("weight", (AlgoSdk.Indexer.StateProofParticipant x) => x.Weight, (ref AlgoSdk.Indexer.StateProofParticipant x, AlgoSdk.Optional<System.UInt64> value) => x.Weight = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct ApplicationLogData
    {
        
        private static bool @__generated__IsValid = ApplicationLogData.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.ApplicationLogData>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.ApplicationLogData>(false).Assign("txid", (AlgoSdk.Indexer.ApplicationLogData x) => x.Txid, (ref AlgoSdk.Indexer.ApplicationLogData x, System.String value) => x.Txid = value, AlgoSdk.StringComparer.Instance).Assign("logs", (AlgoSdk.Indexer.ApplicationLogData x) => x.Logs, (ref AlgoSdk.Indexer.ApplicationLogData x, System.Byte[][] value) => x.Logs = value, AlgoSdk.ArrayComparer<System.Byte[], AlgoSdk.ArrayComparer<System.Byte>>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionAssetFreeze
    {
        
        private static bool @__generated__IsValid = TransactionAssetFreeze.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionAssetFreeze>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionAssetFreeze>(false).Assign("address", (AlgoSdk.Indexer.TransactionAssetFreeze x) => x.Address, (ref AlgoSdk.Indexer.TransactionAssetFreeze x, System.String value) => x.Address = value, AlgoSdk.StringComparer.Instance).Assign("asset-id", (AlgoSdk.Indexer.TransactionAssetFreeze x) => x.AssetId, (ref AlgoSdk.Indexer.TransactionAssetFreeze x, System.UInt64 value) => x.AssetId = value).Assign("new-freeze-status", (AlgoSdk.Indexer.TransactionAssetFreeze x) => x.NewFreezeStatus, (ref AlgoSdk.Indexer.TransactionAssetFreeze x, System.Boolean value) => x.NewFreezeStatus = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionKeyreg
    {
        
        private static bool @__generated__IsValid = TransactionKeyreg.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionKeyreg>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionKeyreg>(false).Assign("non-participation", (AlgoSdk.Indexer.TransactionKeyreg x) => x.NonParticipation, (ref AlgoSdk.Indexer.TransactionKeyreg x, AlgoSdk.Optional<System.Boolean> value) => x.NonParticipation = value).Assign("selection-participation-key", (AlgoSdk.Indexer.TransactionKeyreg x) => x.SelectionParticipationKey, (ref AlgoSdk.Indexer.TransactionKeyreg x, System.Byte[] value) => x.SelectionParticipationKey = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("vote-first-valid", (AlgoSdk.Indexer.TransactionKeyreg x) => x.VoteFirstValid, (ref AlgoSdk.Indexer.TransactionKeyreg x, AlgoSdk.Optional<System.UInt64> value) => x.VoteFirstValid = value).Assign("vote-key-dilution", (AlgoSdk.Indexer.TransactionKeyreg x) => x.VoteKeyDilution, (ref AlgoSdk.Indexer.TransactionKeyreg x, AlgoSdk.Optional<System.UInt64> value) => x.VoteKeyDilution = value).Assign("vote-last-valid", (AlgoSdk.Indexer.TransactionKeyreg x) => x.VoteLastValid, (ref AlgoSdk.Indexer.TransactionKeyreg x, AlgoSdk.Optional<System.UInt64> value) => x.VoteLastValid = value).Assign("vote-participation-key", (AlgoSdk.Indexer.TransactionKeyreg x) => x.VoteParticipationKey, (ref AlgoSdk.Indexer.TransactionKeyreg x, System.Byte[] value) => x.VoteParticipationKey = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("state-proof-key", (AlgoSdk.Indexer.TransactionKeyreg x) => x.StateProofKey, (ref AlgoSdk.Indexer.TransactionKeyreg x, System.Byte[] value) => x.StateProofKey = value, AlgoSdk.ArrayComparer<System.Byte>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionSignature
    {
        
        private static bool @__generated__IsValid = TransactionSignature.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionSignature>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionSignature>(false).Assign("logicsig", (AlgoSdk.Indexer.TransactionSignature x) => x.Logicsig, (ref AlgoSdk.Indexer.TransactionSignature x, AlgoSdk.Indexer.TransactionSignatureLogicsig value) => x.Logicsig = value).Assign("multisig", (AlgoSdk.Indexer.TransactionSignature x) => x.Multisig, (ref AlgoSdk.Indexer.TransactionSignature x, AlgoSdk.Indexer.TransactionSignatureMultisig value) => x.Multisig = value).Assign("sig", (AlgoSdk.Indexer.TransactionSignature x) => x.Sig, (ref AlgoSdk.Indexer.TransactionSignature x, System.Byte[] value) => x.Sig = value, AlgoSdk.ArrayComparer<System.Byte>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct Asset
    {
        
        private static bool @__generated__IsValid = Asset.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.Asset>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.Asset>(false).Assign("index", (AlgoSdk.Indexer.Asset x) => x.Index, (ref AlgoSdk.Indexer.Asset x, System.UInt64 value) => x.Index = value).Assign("deleted", (AlgoSdk.Indexer.Asset x) => x.Deleted, (ref AlgoSdk.Indexer.Asset x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value).Assign("created-at-round", (AlgoSdk.Indexer.Asset x) => x.CreatedAtRound, (ref AlgoSdk.Indexer.Asset x, AlgoSdk.Optional<System.UInt64> value) => x.CreatedAtRound = value).Assign("destroyed-at-round", (AlgoSdk.Indexer.Asset x) => x.DestroyedAtRound, (ref AlgoSdk.Indexer.Asset x, AlgoSdk.Optional<System.UInt64> value) => x.DestroyedAtRound = value).Assign("params", (AlgoSdk.Indexer.Asset x) => x.Params, (ref AlgoSdk.Indexer.Asset x, AlgoSdk.Indexer.AssetParams value) => x.Params = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct StateProofReveal
    {
        
        private static bool @__generated__IsValid = StateProofReveal.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.StateProofReveal>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.StateProofReveal>(false).Assign("position", (AlgoSdk.Indexer.StateProofReveal x) => x.Position, (ref AlgoSdk.Indexer.StateProofReveal x, AlgoSdk.Optional<System.UInt64> value) => x.Position = value).Assign("sig-slot", (AlgoSdk.Indexer.StateProofReveal x) => x.SigSlot, (ref AlgoSdk.Indexer.StateProofReveal x, AlgoSdk.Indexer.StateProofSigSlot value) => x.SigSlot = value).Assign("participant", (AlgoSdk.Indexer.StateProofReveal x) => x.Participant, (ref AlgoSdk.Indexer.StateProofReveal x, AlgoSdk.Indexer.StateProofParticipant value) => x.Participant = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TealKeyValue
    {
        
        private static bool @__generated__IsValid = TealKeyValue.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TealKeyValue>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TealKeyValue>(false).Assign("key", (AlgoSdk.Indexer.TealKeyValue x) => x.Key, (ref AlgoSdk.Indexer.TealKeyValue x, System.String value) => x.Key = value, AlgoSdk.StringComparer.Instance).Assign("value", (AlgoSdk.Indexer.TealKeyValue x) => x.Value, (ref AlgoSdk.Indexer.TealKeyValue x, AlgoSdk.Indexer.TealValue value) => x.Value = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct HealthCheck
    {
        
        private static bool @__generated__IsValid = HealthCheck.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.HealthCheck>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.HealthCheck>(false).Assign("version", (AlgoSdk.Indexer.HealthCheck x) => x.Version, (ref AlgoSdk.Indexer.HealthCheck x, System.String value) => x.Version = value, AlgoSdk.StringComparer.Instance).Assign("data", (AlgoSdk.Indexer.HealthCheck x) => x.Data, (ref AlgoSdk.Indexer.HealthCheck x, AlgoSdk.AlgoApiObject value) => x.Data = value).Assign("round", (AlgoSdk.Indexer.HealthCheck x) => x.Round, (ref AlgoSdk.Indexer.HealthCheck x, System.UInt64 value) => x.Round = value).Assign("is-migrating", (AlgoSdk.Indexer.HealthCheck x) => x.IsMigrating, (ref AlgoSdk.Indexer.HealthCheck x, System.Boolean value) => x.IsMigrating = value).Assign("db-available", (AlgoSdk.Indexer.HealthCheck x) => x.DbAvailable, (ref AlgoSdk.Indexer.HealthCheck x, System.Boolean value) => x.DbAvailable = value).Assign("message", (AlgoSdk.Indexer.HealthCheck x) => x.Message, (ref AlgoSdk.Indexer.HealthCheck x, System.String value) => x.Message = value, AlgoSdk.StringComparer.Instance).Assign("errors", (AlgoSdk.Indexer.HealthCheck x) => x.Errors, (ref AlgoSdk.Indexer.HealthCheck x, System.String[] value) => x.Errors = value, AlgoSdk.ArrayComparer<System.String, AlgoSdk.StringComparer>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct EvalDeltaKeyValue
    {
        
        private static bool @__generated__IsValid = EvalDeltaKeyValue.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.EvalDeltaKeyValue>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.EvalDeltaKeyValue>(false).Assign("key", (AlgoSdk.Indexer.EvalDeltaKeyValue x) => x.Key, (ref AlgoSdk.Indexer.EvalDeltaKeyValue x, System.String value) => x.Key = value, AlgoSdk.StringComparer.Instance).Assign("value", (AlgoSdk.Indexer.EvalDeltaKeyValue x) => x.Value, (ref AlgoSdk.Indexer.EvalDeltaKeyValue x, AlgoSdk.Indexer.EvalDelta value) => x.Value = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct AssetHolding
    {
        
        private static bool @__generated__IsValid = AssetHolding.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.AssetHolding>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.AssetHolding>(false).Assign("amount", (AlgoSdk.Indexer.AssetHolding x) => x.Amount, (ref AlgoSdk.Indexer.AssetHolding x, System.UInt64 value) => x.Amount = value).Assign("asset-id", (AlgoSdk.Indexer.AssetHolding x) => x.AssetId, (ref AlgoSdk.Indexer.AssetHolding x, System.UInt64 value) => x.AssetId = value).Assign("is-frozen", (AlgoSdk.Indexer.AssetHolding x) => x.IsFrozen, (ref AlgoSdk.Indexer.AssetHolding x, System.Boolean value) => x.IsFrozen = value).Assign("deleted", (AlgoSdk.Indexer.AssetHolding x) => x.Deleted, (ref AlgoSdk.Indexer.AssetHolding x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value).Assign("opted-in-at-round", (AlgoSdk.Indexer.AssetHolding x) => x.OptedInAtRound, (ref AlgoSdk.Indexer.AssetHolding x, AlgoSdk.Optional<System.UInt64> value) => x.OptedInAtRound = value).Assign("opted-out-at-round", (AlgoSdk.Indexer.AssetHolding x) => x.OptedOutAtRound, (ref AlgoSdk.Indexer.AssetHolding x, AlgoSdk.Optional<System.UInt64> value) => x.OptedOutAtRound = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct Account
    {
        
        private static bool @__generated__IsValid = Account.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.Account>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.Account>(false).Assign("amount", (AlgoSdk.Indexer.Account x) => x.Amount, (ref AlgoSdk.Indexer.Account x, System.UInt64 value) => x.Amount = value).Assign("deleted", (AlgoSdk.Indexer.Account x) => x.Deleted, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value).Assign("address", (AlgoSdk.Indexer.Account x) => x.Address, (ref AlgoSdk.Indexer.Account x, System.String value) => x.Address = value, AlgoSdk.StringComparer.Instance).Assign("rewards", (AlgoSdk.Indexer.Account x) => x.Rewards, (ref AlgoSdk.Indexer.Account x, System.UInt64 value) => x.Rewards = value).Assign("closed-at-round", (AlgoSdk.Indexer.Account x) => x.ClosedAtRound, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Optional<System.UInt64> value) => x.ClosedAtRound = value).Assign("amount-without-pending-rewards", (AlgoSdk.Indexer.Account x) => x.AmountWithoutPendingRewards, (ref AlgoSdk.Indexer.Account x, System.UInt64 value) => x.AmountWithoutPendingRewards = value).Assign("apps-total-extra-pages", (AlgoSdk.Indexer.Account x) => x.AppsTotalExtraPages, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Optional<System.UInt64> value) => x.AppsTotalExtraPages = value).Assign("total-assets-opted-in", (AlgoSdk.Indexer.Account x) => x.TotalAssetsOptedIn, (ref AlgoSdk.Indexer.Account x, System.UInt64 value) => x.TotalAssetsOptedIn = value).Assign("assets", (AlgoSdk.Indexer.Account x) => x.Assets, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Indexer.AssetHolding[] value) => x.Assets = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.AssetHolding>.Instance).Assign("created-at-round", (AlgoSdk.Indexer.Account x) => x.CreatedAtRound, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Optional<System.UInt64> value) => x.CreatedAtRound = value).Assign("participation", (AlgoSdk.Indexer.Account x) => x.Participation, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Indexer.AccountParticipation value) => x.Participation = value).Assign("apps-total-schema", (AlgoSdk.Indexer.Account x) => x.AppsTotalSchema, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Indexer.ApplicationStateSchema value) => x.AppsTotalSchema = value).Assign("total-apps-opted-in", (AlgoSdk.Indexer.Account x) => x.TotalAppsOptedIn, (ref AlgoSdk.Indexer.Account x, System.UInt64 value) => x.TotalAppsOptedIn = value).Assign("round", (AlgoSdk.Indexer.Account x) => x.Round, (ref AlgoSdk.Indexer.Account x, System.UInt64 value) => x.Round = value).Assign("pending-rewards", (AlgoSdk.Indexer.Account x) => x.PendingRewards, (ref AlgoSdk.Indexer.Account x, System.UInt64 value) => x.PendingRewards = value).Assign("created-apps", (AlgoSdk.Indexer.Account x) => x.CreatedApps, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Indexer.Application[] value) => x.CreatedApps = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.Application>.Instance).Assign("status", (AlgoSdk.Indexer.Account x) => x.Status, (ref AlgoSdk.Indexer.Account x, System.String value) => x.Status = value, AlgoSdk.StringComparer.Instance).Assign("sig-type", (AlgoSdk.Indexer.Account x) => x.SigType, (ref AlgoSdk.Indexer.Account x, AlgoSdk.SignatureType value) => x.SigType = value, AlgoSdk.ByteEnumComparer<AlgoSdk.SignatureType>.Instance).Assign("auth-addr", (AlgoSdk.Indexer.Account x) => x.AuthAddr, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Address value) => x.AuthAddr = value).Assign("total-created-assets", (AlgoSdk.Indexer.Account x) => x.TotalCreatedAssets, (ref AlgoSdk.Indexer.Account x, System.UInt64 value) => x.TotalCreatedAssets = value).Assign("reward-base", (AlgoSdk.Indexer.Account x) => x.RewardBase, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Optional<System.UInt64> value) => x.RewardBase = value).Assign("created-assets", (AlgoSdk.Indexer.Account x) => x.CreatedAssets, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Indexer.Asset[] value) => x.CreatedAssets = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.Asset>.Instance).Assign("apps-local-state", (AlgoSdk.Indexer.Account x) => x.AppsLocalState, (ref AlgoSdk.Indexer.Account x, AlgoSdk.Indexer.ApplicationLocalState[] value) => x.AppsLocalState = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.ApplicationLocalState>.Instance).Assign("total-created-apps", (AlgoSdk.Indexer.Account x) => x.TotalCreatedApps, (ref AlgoSdk.Indexer.Account x, System.UInt64 value) => x.TotalCreatedApps = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct BlockRewards
    {
        
        private static bool @__generated__IsValid = BlockRewards.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.BlockRewards>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.BlockRewards>(false).Assign("fee-sink", (AlgoSdk.Indexer.BlockRewards x) => x.FeeSink, (ref AlgoSdk.Indexer.BlockRewards x, System.String value) => x.FeeSink = value, AlgoSdk.StringComparer.Instance).Assign("rewards-calculation-round", (AlgoSdk.Indexer.BlockRewards x) => x.RewardsCalculationRound, (ref AlgoSdk.Indexer.BlockRewards x, System.UInt64 value) => x.RewardsCalculationRound = value).Assign("rewards-level", (AlgoSdk.Indexer.BlockRewards x) => x.RewardsLevel, (ref AlgoSdk.Indexer.BlockRewards x, System.UInt64 value) => x.RewardsLevel = value).Assign("rewards-pool", (AlgoSdk.Indexer.BlockRewards x) => x.RewardsPool, (ref AlgoSdk.Indexer.BlockRewards x, System.String value) => x.RewardsPool = value, AlgoSdk.StringComparer.Instance).Assign("rewards-rate", (AlgoSdk.Indexer.BlockRewards x) => x.RewardsRate, (ref AlgoSdk.Indexer.BlockRewards x, System.UInt64 value) => x.RewardsRate = value).Assign("rewards-residue", (AlgoSdk.Indexer.BlockRewards x) => x.RewardsResidue, (ref AlgoSdk.Indexer.BlockRewards x, System.UInt64 value) => x.RewardsResidue = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct StateProofSignature
    {
        
        private static bool @__generated__IsValid = StateProofSignature.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.StateProofSignature>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.StateProofSignature>(false).Assign("falcon-signature", (AlgoSdk.Indexer.StateProofSignature x) => x.FalconSignature, (ref AlgoSdk.Indexer.StateProofSignature x, System.Byte[] value) => x.FalconSignature = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("merkle-array-index", (AlgoSdk.Indexer.StateProofSignature x) => x.MerkleArrayIndex, (ref AlgoSdk.Indexer.StateProofSignature x, AlgoSdk.Optional<System.UInt64> value) => x.MerkleArrayIndex = value).Assign("proof", (AlgoSdk.Indexer.StateProofSignature x) => x.Proof, (ref AlgoSdk.Indexer.StateProofSignature x, AlgoSdk.Indexer.MerkleArrayProof value) => x.Proof = value).Assign("verifying-key", (AlgoSdk.Indexer.StateProofSignature x) => x.VerifyingKey, (ref AlgoSdk.Indexer.StateProofSignature x, System.Byte[] value) => x.VerifyingKey = value, AlgoSdk.ArrayComparer<System.Byte>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct AccountStateDelta
    {
        
        private static bool @__generated__IsValid = AccountStateDelta.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.AccountStateDelta>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.AccountStateDelta>(false).Assign("address", (AlgoSdk.Indexer.AccountStateDelta x) => x.Address, (ref AlgoSdk.Indexer.AccountStateDelta x, System.String value) => x.Address = value, AlgoSdk.StringComparer.Instance).Assign("delta", (AlgoSdk.Indexer.AccountStateDelta x) => x.Delta, (ref AlgoSdk.Indexer.AccountStateDelta x, AlgoSdk.Indexer.StateDelta value) => x.Delta = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct BlockUpgradeVote
    {
        
        private static bool @__generated__IsValid = BlockUpgradeVote.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.BlockUpgradeVote>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.BlockUpgradeVote>(false).Assign("upgrade-approve", (AlgoSdk.Indexer.BlockUpgradeVote x) => x.UpgradeApprove, (ref AlgoSdk.Indexer.BlockUpgradeVote x, AlgoSdk.Optional<System.Boolean> value) => x.UpgradeApprove = value).Assign("upgrade-delay", (AlgoSdk.Indexer.BlockUpgradeVote x) => x.UpgradeDelay, (ref AlgoSdk.Indexer.BlockUpgradeVote x, AlgoSdk.Optional<System.UInt64> value) => x.UpgradeDelay = value).Assign("upgrade-propose", (AlgoSdk.Indexer.BlockUpgradeVote x) => x.UpgradePropose, (ref AlgoSdk.Indexer.BlockUpgradeVote x, System.String value) => x.UpgradePropose = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct Application
    {
        
        private static bool @__generated__IsValid = Application.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.Application>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.Application>(false).Assign("id", (AlgoSdk.Indexer.Application x) => x.Id, (ref AlgoSdk.Indexer.Application x, System.UInt64 value) => x.Id = value).Assign("deleted", (AlgoSdk.Indexer.Application x) => x.Deleted, (ref AlgoSdk.Indexer.Application x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value).Assign("created-at-round", (AlgoSdk.Indexer.Application x) => x.CreatedAtRound, (ref AlgoSdk.Indexer.Application x, AlgoSdk.Optional<System.UInt64> value) => x.CreatedAtRound = value).Assign("deleted-at-round", (AlgoSdk.Indexer.Application x) => x.DeletedAtRound, (ref AlgoSdk.Indexer.Application x, AlgoSdk.Optional<System.UInt64> value) => x.DeletedAtRound = value).Assign("params", (AlgoSdk.Indexer.Application x) => x.Params, (ref AlgoSdk.Indexer.Application x, AlgoSdk.Indexer.ApplicationParams value) => x.Params = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct StateSchema
    {
        
        private static bool @__generated__IsValid = StateSchema.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.StateSchema>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.StateSchema>(false).Assign("num-uint", (AlgoSdk.Indexer.StateSchema x) => x.NumUint, (ref AlgoSdk.Indexer.StateSchema x, System.UInt64 value) => x.NumUint = value).Assign("num-byte-slice", (AlgoSdk.Indexer.StateSchema x) => x.NumByteSlice, (ref AlgoSdk.Indexer.StateSchema x, System.UInt64 value) => x.NumByteSlice = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct ApplicationLocalState
    {
        
        private static bool @__generated__IsValid = ApplicationLocalState.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.ApplicationLocalState>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.ApplicationLocalState>(false).Assign("id", (AlgoSdk.Indexer.ApplicationLocalState x) => x.Id, (ref AlgoSdk.Indexer.ApplicationLocalState x, System.UInt64 value) => x.Id = value).Assign("deleted", (AlgoSdk.Indexer.ApplicationLocalState x) => x.Deleted, (ref AlgoSdk.Indexer.ApplicationLocalState x, AlgoSdk.Optional<System.Boolean> value) => x.Deleted = value).Assign("opted-in-at-round", (AlgoSdk.Indexer.ApplicationLocalState x) => x.OptedInAtRound, (ref AlgoSdk.Indexer.ApplicationLocalState x, AlgoSdk.Optional<System.UInt64> value) => x.OptedInAtRound = value).Assign("closed-out-at-round", (AlgoSdk.Indexer.ApplicationLocalState x) => x.ClosedOutAtRound, (ref AlgoSdk.Indexer.ApplicationLocalState x, AlgoSdk.Optional<System.UInt64> value) => x.ClosedOutAtRound = value).Assign("schema", (AlgoSdk.Indexer.ApplicationLocalState x) => x.Schema, (ref AlgoSdk.Indexer.ApplicationLocalState x, AlgoSdk.Indexer.ApplicationStateSchema value) => x.Schema = value).Assign("key-value", (AlgoSdk.Indexer.ApplicationLocalState x) => x.KeyValue, (ref AlgoSdk.Indexer.ApplicationLocalState x, AlgoSdk.Indexer.TealKeyValueStore value) => x.KeyValue = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionSignatureMultisigSubsignature
    {
        
        private static bool @__generated__IsValid = TransactionSignatureMultisigSubsignature.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionSignatureMultisigSubsignature>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionSignatureMultisigSubsignature>(false).Assign("public-key", (AlgoSdk.Indexer.TransactionSignatureMultisigSubsignature x) => x.PublicKey, (ref AlgoSdk.Indexer.TransactionSignatureMultisigSubsignature x, System.Byte[] value) => x.PublicKey = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("signature", (AlgoSdk.Indexer.TransactionSignatureMultisigSubsignature x) => x.Signature, (ref AlgoSdk.Indexer.TransactionSignatureMultisigSubsignature x, System.Byte[] value) => x.Signature = value, AlgoSdk.ArrayComparer<System.Byte>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct AccountParticipation
    {
        
        private static bool @__generated__IsValid = AccountParticipation.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.AccountParticipation>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.AccountParticipation>(false).Assign("selection-participation-key", (AlgoSdk.Indexer.AccountParticipation x) => x.SelectionParticipationKey, (ref AlgoSdk.Indexer.AccountParticipation x, System.Byte[] value) => x.SelectionParticipationKey = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("vote-first-valid", (AlgoSdk.Indexer.AccountParticipation x) => x.VoteFirstValid, (ref AlgoSdk.Indexer.AccountParticipation x, System.UInt64 value) => x.VoteFirstValid = value).Assign("vote-key-dilution", (AlgoSdk.Indexer.AccountParticipation x) => x.VoteKeyDilution, (ref AlgoSdk.Indexer.AccountParticipation x, System.UInt64 value) => x.VoteKeyDilution = value).Assign("vote-last-valid", (AlgoSdk.Indexer.AccountParticipation x) => x.VoteLastValid, (ref AlgoSdk.Indexer.AccountParticipation x, System.UInt64 value) => x.VoteLastValid = value).Assign("vote-participation-key", (AlgoSdk.Indexer.AccountParticipation x) => x.VoteParticipationKey, (ref AlgoSdk.Indexer.AccountParticipation x, System.Byte[] value) => x.VoteParticipationKey = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("state-proof-key", (AlgoSdk.Indexer.AccountParticipation x) => x.StateProofKey, (ref AlgoSdk.Indexer.AccountParticipation x, System.Byte[] value) => x.StateProofKey = value, AlgoSdk.ArrayComparer<System.Byte>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionAssetTransfer
    {
        
        private static bool @__generated__IsValid = TransactionAssetTransfer.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionAssetTransfer>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionAssetTransfer>(false).Assign("amount", (AlgoSdk.Indexer.TransactionAssetTransfer x) => x.Amount, (ref AlgoSdk.Indexer.TransactionAssetTransfer x, System.UInt64 value) => x.Amount = value).Assign("asset-id", (AlgoSdk.Indexer.TransactionAssetTransfer x) => x.AssetId, (ref AlgoSdk.Indexer.TransactionAssetTransfer x, System.UInt64 value) => x.AssetId = value).Assign("close-amount", (AlgoSdk.Indexer.TransactionAssetTransfer x) => x.CloseAmount, (ref AlgoSdk.Indexer.TransactionAssetTransfer x, AlgoSdk.Optional<System.UInt64> value) => x.CloseAmount = value).Assign("close-to", (AlgoSdk.Indexer.TransactionAssetTransfer x) => x.CloseTo, (ref AlgoSdk.Indexer.TransactionAssetTransfer x, System.String value) => x.CloseTo = value, AlgoSdk.StringComparer.Instance).Assign("receiver", (AlgoSdk.Indexer.TransactionAssetTransfer x) => x.Receiver, (ref AlgoSdk.Indexer.TransactionAssetTransfer x, System.String value) => x.Receiver = value, AlgoSdk.StringComparer.Instance).Assign("sender", (AlgoSdk.Indexer.TransactionAssetTransfer x) => x.Sender, (ref AlgoSdk.Indexer.TransactionAssetTransfer x, System.String value) => x.Sender = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct Transaction
    {
        
        private static bool @__generated__IsValid = Transaction.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.Transaction>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.Transaction>(false).Assign("state-proof-transaction", (AlgoSdk.Indexer.Transaction x) => x.StateProofTransaction, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.TransactionStateProof value) => x.StateProofTransaction = value).Assign("fee", (AlgoSdk.Indexer.Transaction x) => x.Fee, (ref AlgoSdk.Indexer.Transaction x, System.UInt64 value) => x.Fee = value).Assign("asset-transfer-transaction", (AlgoSdk.Indexer.Transaction x) => x.AssetTransferTransaction, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.TransactionAssetTransfer value) => x.AssetTransferTransaction = value).Assign("group", (AlgoSdk.Indexer.Transaction x) => x.Group, (ref AlgoSdk.Indexer.Transaction x, System.Byte[] value) => x.Group = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("created-application-index", (AlgoSdk.Indexer.Transaction x) => x.CreatedApplicationIndex, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Optional<System.UInt64> value) => x.CreatedApplicationIndex = value).Assign("lease", (AlgoSdk.Indexer.Transaction x) => x.Lease, (ref AlgoSdk.Indexer.Transaction x, System.Byte[] value) => x.Lease = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("genesis-hash", (AlgoSdk.Indexer.Transaction x) => x.GenesisHash, (ref AlgoSdk.Indexer.Transaction x, System.Byte[] value) => x.GenesisHash = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("logs", (AlgoSdk.Indexer.Transaction x) => x.Logs, (ref AlgoSdk.Indexer.Transaction x, System.Byte[][] value) => x.Logs = value, AlgoSdk.ArrayComparer<System.Byte[], AlgoSdk.ArrayComparer<System.Byte>>.Instance).Assign("sender-rewards", (AlgoSdk.Indexer.Transaction x) => x.SenderRewards, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Optional<System.UInt64> value) => x.SenderRewards = value).Assign("closing-amount", (AlgoSdk.Indexer.Transaction x) => x.ClosingAmount, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Optional<System.UInt64> value) => x.ClosingAmount = value).Assign("signature", (AlgoSdk.Indexer.Transaction x) => x.Signature, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.TransactionSignature value) => x.Signature = value).Assign("global-state-delta", (AlgoSdk.Indexer.Transaction x) => x.GlobalStateDelta, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.StateDelta value) => x.GlobalStateDelta = value).Assign("tx-type", (AlgoSdk.Indexer.Transaction x) => x.TxType, (ref AlgoSdk.Indexer.Transaction x, System.String value) => x.TxType = value, AlgoSdk.StringComparer.Instance).Assign("intra-round-offset", (AlgoSdk.Indexer.Transaction x) => x.IntraRoundOffset, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Optional<System.UInt64> value) => x.IntraRoundOffset = value).Assign("payment-transaction", (AlgoSdk.Indexer.Transaction x) => x.PaymentTransaction, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.TransactionPayment value) => x.PaymentTransaction = value).Assign("keyreg-transaction", (AlgoSdk.Indexer.Transaction x) => x.KeyregTransaction, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.TransactionKeyreg value) => x.KeyregTransaction = value).Assign("confirmed-round", (AlgoSdk.Indexer.Transaction x) => x.ConfirmedRound, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Optional<System.UInt64> value) => x.ConfirmedRound = value).Assign("note", (AlgoSdk.Indexer.Transaction x) => x.Note, (ref AlgoSdk.Indexer.Transaction x, System.Byte[] value) => x.Note = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("receiver-rewards", (AlgoSdk.Indexer.Transaction x) => x.ReceiverRewards, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Optional<System.UInt64> value) => x.ReceiverRewards = value).Assign("round-time", (AlgoSdk.Indexer.Transaction x) => x.RoundTime, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Optional<System.UInt64> value) => x.RoundTime = value).Assign("inner-txns", (AlgoSdk.Indexer.Transaction x) => x.InnerTxns, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.Transaction[] value) => x.InnerTxns = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.Transaction>.Instance).Assign("asset-config-transaction", (AlgoSdk.Indexer.Transaction x) => x.AssetConfigTransaction, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.TransactionAssetConfig value) => x.AssetConfigTransaction = value).Assign("last-valid", (AlgoSdk.Indexer.Transaction x) => x.LastValid, (ref AlgoSdk.Indexer.Transaction x, System.UInt64 value) => x.LastValid = value).Assign("close-rewards", (AlgoSdk.Indexer.Transaction x) => x.CloseRewards, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Optional<System.UInt64> value) => x.CloseRewards = value).Assign("local-state-delta", (AlgoSdk.Indexer.Transaction x) => x.LocalStateDelta, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.AccountStateDelta[] value) => x.LocalStateDelta = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.AccountStateDelta>.Instance).Assign("id", (AlgoSdk.Indexer.Transaction x) => x.Id, (ref AlgoSdk.Indexer.Transaction x, System.String value) => x.Id = value, AlgoSdk.StringComparer.Instance).Assign("auth-addr", (AlgoSdk.Indexer.Transaction x) => x.AuthAddr, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Address value) => x.AuthAddr = value).Assign("genesis-id", (AlgoSdk.Indexer.Transaction x) => x.GenesisId, (ref AlgoSdk.Indexer.Transaction x, System.String value) => x.GenesisId = value, AlgoSdk.StringComparer.Instance).Assign("sender", (AlgoSdk.Indexer.Transaction x) => x.Sender, (ref AlgoSdk.Indexer.Transaction x, System.String value) => x.Sender = value, AlgoSdk.StringComparer.Instance).Assign("application-transaction", (AlgoSdk.Indexer.Transaction x) => x.ApplicationTransaction, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.TransactionApplication value) => x.ApplicationTransaction = value).Assign("created-asset-index", (AlgoSdk.Indexer.Transaction x) => x.CreatedAssetIndex, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Optional<System.UInt64> value) => x.CreatedAssetIndex = value).Assign("first-valid", (AlgoSdk.Indexer.Transaction x) => x.FirstValid, (ref AlgoSdk.Indexer.Transaction x, System.UInt64 value) => x.FirstValid = value).Assign("rekey-to", (AlgoSdk.Indexer.Transaction x) => x.RekeyTo, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Address value) => x.RekeyTo = value).Assign("asset-freeze-transaction", (AlgoSdk.Indexer.Transaction x) => x.AssetFreezeTransaction, (ref AlgoSdk.Indexer.Transaction x, AlgoSdk.Indexer.TransactionAssetFreeze value) => x.AssetFreezeTransaction = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionStateProof
    {
        
        private static bool @__generated__IsValid = TransactionStateProof.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionStateProof>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionStateProof>(false).Assign("state-proof-type", (AlgoSdk.Indexer.TransactionStateProof x) => x.StateProofType, (ref AlgoSdk.Indexer.TransactionStateProof x, AlgoSdk.Optional<System.UInt64> value) => x.StateProofType = value).Assign("state-proof", (AlgoSdk.Indexer.TransactionStateProof x) => x.StateProof, (ref AlgoSdk.Indexer.TransactionStateProof x, AlgoSdk.Indexer.StateProofFields value) => x.StateProof = value).Assign("message", (AlgoSdk.Indexer.TransactionStateProof x) => x.Message, (ref AlgoSdk.Indexer.TransactionStateProof x, AlgoSdk.Indexer.IndexerStateProofMessage value) => x.Message = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct StateProofSigSlot
    {
        
        private static bool @__generated__IsValid = StateProofSigSlot.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.StateProofSigSlot>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.StateProofSigSlot>(false).Assign("signature", (AlgoSdk.Indexer.StateProofSigSlot x) => x.Signature, (ref AlgoSdk.Indexer.StateProofSigSlot x, AlgoSdk.Indexer.StateProofSignature value) => x.Signature = value).Assign("lower-sig-weight", (AlgoSdk.Indexer.StateProofSigSlot x) => x.LowerSigWeight, (ref AlgoSdk.Indexer.StateProofSigSlot x, AlgoSdk.Optional<System.UInt64> value) => x.LowerSigWeight = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct StateProofVerifier
    {
        
        private static bool @__generated__IsValid = StateProofVerifier.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.StateProofVerifier>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.StateProofVerifier>(false).Assign("commitment", (AlgoSdk.Indexer.StateProofVerifier x) => x.Commitment, (ref AlgoSdk.Indexer.StateProofVerifier x, System.Byte[] value) => x.Commitment = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("key-lifetime", (AlgoSdk.Indexer.StateProofVerifier x) => x.KeyLifetime, (ref AlgoSdk.Indexer.StateProofVerifier x, AlgoSdk.Optional<System.UInt64> value) => x.KeyLifetime = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct AssetParams
    {
        
        private static bool @__generated__IsValid = AssetParams.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.AssetParams>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.AssetParams>(false).Assign("default-frozen", (AlgoSdk.Indexer.AssetParams x) => x.DefaultFrozen, (ref AlgoSdk.Indexer.AssetParams x, AlgoSdk.Optional<System.Boolean> value) => x.DefaultFrozen = value).Assign("creator", (AlgoSdk.Indexer.AssetParams x) => x.Creator, (ref AlgoSdk.Indexer.AssetParams x, System.String value) => x.Creator = value, AlgoSdk.StringComparer.Instance).Assign("decimals", (AlgoSdk.Indexer.AssetParams x) => x.Decimals, (ref AlgoSdk.Indexer.AssetParams x, System.UInt64 value) => x.Decimals = value).Assign("freeze", (AlgoSdk.Indexer.AssetParams x) => x.Freeze, (ref AlgoSdk.Indexer.AssetParams x, System.String value) => x.Freeze = value, AlgoSdk.StringComparer.Instance).Assign("reserve", (AlgoSdk.Indexer.AssetParams x) => x.Reserve, (ref AlgoSdk.Indexer.AssetParams x, System.String value) => x.Reserve = value, AlgoSdk.StringComparer.Instance).Assign("unit-name-b64", (AlgoSdk.Indexer.AssetParams x) => x.UnitNameB64, (ref AlgoSdk.Indexer.AssetParams x, System.Byte[] value) => x.UnitNameB64 = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("name", (AlgoSdk.Indexer.AssetParams x) => x.Name, (ref AlgoSdk.Indexer.AssetParams x, System.String value) => x.Name = value, AlgoSdk.StringComparer.Instance).Assign("url-b64", (AlgoSdk.Indexer.AssetParams x) => x.UrlB64, (ref AlgoSdk.Indexer.AssetParams x, System.Byte[] value) => x.UrlB64 = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("total", (AlgoSdk.Indexer.AssetParams x) => x.Total, (ref AlgoSdk.Indexer.AssetParams x, System.UInt64 value) => x.Total = value).Assign("manager", (AlgoSdk.Indexer.AssetParams x) => x.Manager, (ref AlgoSdk.Indexer.AssetParams x, System.String value) => x.Manager = value, AlgoSdk.StringComparer.Instance).Assign("name-b64", (AlgoSdk.Indexer.AssetParams x) => x.NameB64, (ref AlgoSdk.Indexer.AssetParams x, System.Byte[] value) => x.NameB64 = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("url", (AlgoSdk.Indexer.AssetParams x) => x.Url, (ref AlgoSdk.Indexer.AssetParams x, System.String value) => x.Url = value, AlgoSdk.StringComparer.Instance).Assign("unit-name", (AlgoSdk.Indexer.AssetParams x) => x.UnitName, (ref AlgoSdk.Indexer.AssetParams x, System.String value) => x.UnitName = value, AlgoSdk.StringComparer.Instance).Assign("clawback", (AlgoSdk.Indexer.AssetParams x) => x.Clawback, (ref AlgoSdk.Indexer.AssetParams x, System.String value) => x.Clawback = value, AlgoSdk.StringComparer.Instance).Assign("metadata-hash", (AlgoSdk.Indexer.AssetParams x) => x.MetadataHash, (ref AlgoSdk.Indexer.AssetParams x, System.Byte[] value) => x.MetadataHash = value, AlgoSdk.ArrayComparer<System.Byte>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct IndexerStateProofMessage
    {
        
        private static bool @__generated__IsValid = IndexerStateProofMessage.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.IndexerStateProofMessage>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.IndexerStateProofMessage>(false).Assign("block-headers-commitment", (AlgoSdk.Indexer.IndexerStateProofMessage x) => x.BlockHeadersCommitment, (ref AlgoSdk.Indexer.IndexerStateProofMessage x, System.Byte[] value) => x.BlockHeadersCommitment = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("voters-commitment", (AlgoSdk.Indexer.IndexerStateProofMessage x) => x.VotersCommitment, (ref AlgoSdk.Indexer.IndexerStateProofMessage x, System.Byte[] value) => x.VotersCommitment = value, AlgoSdk.ArrayComparer<System.Byte>.Instance).Assign("ln-proven-weight", (AlgoSdk.Indexer.IndexerStateProofMessage x) => x.LnProvenWeight, (ref AlgoSdk.Indexer.IndexerStateProofMessage x, AlgoSdk.Optional<System.UInt64> value) => x.LnProvenWeight = value).Assign("first-attested-round", (AlgoSdk.Indexer.IndexerStateProofMessage x) => x.FirstAttestedRound, (ref AlgoSdk.Indexer.IndexerStateProofMessage x, AlgoSdk.Optional<System.UInt64> value) => x.FirstAttestedRound = value).Assign("latest-attested-round", (AlgoSdk.Indexer.IndexerStateProofMessage x) => x.LatestAttestedRound, (ref AlgoSdk.Indexer.IndexerStateProofMessage x, AlgoSdk.Optional<System.UInt64> value) => x.LatestAttestedRound = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct BlockUpgradeState
    {
        
        private static bool @__generated__IsValid = BlockUpgradeState.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.BlockUpgradeState>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.BlockUpgradeState>(false).Assign("current-protocol", (AlgoSdk.Indexer.BlockUpgradeState x) => x.CurrentProtocol, (ref AlgoSdk.Indexer.BlockUpgradeState x, System.String value) => x.CurrentProtocol = value, AlgoSdk.StringComparer.Instance).Assign("next-protocol", (AlgoSdk.Indexer.BlockUpgradeState x) => x.NextProtocol, (ref AlgoSdk.Indexer.BlockUpgradeState x, System.String value) => x.NextProtocol = value, AlgoSdk.StringComparer.Instance).Assign("next-protocol-approvals", (AlgoSdk.Indexer.BlockUpgradeState x) => x.NextProtocolApprovals, (ref AlgoSdk.Indexer.BlockUpgradeState x, AlgoSdk.Optional<System.UInt64> value) => x.NextProtocolApprovals = value).Assign("next-protocol-switch-on", (AlgoSdk.Indexer.BlockUpgradeState x) => x.NextProtocolSwitchOn, (ref AlgoSdk.Indexer.BlockUpgradeState x, AlgoSdk.Optional<System.UInt64> value) => x.NextProtocolSwitchOn = value).Assign("next-protocol-vote-before", (AlgoSdk.Indexer.BlockUpgradeState x) => x.NextProtocolVoteBefore, (ref AlgoSdk.Indexer.BlockUpgradeState x, AlgoSdk.Optional<System.UInt64> value) => x.NextProtocolVoteBefore = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct MerkleArrayProof
    {
        
        private static bool @__generated__IsValid = MerkleArrayProof.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.MerkleArrayProof>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.MerkleArrayProof>(false).Assign("path", (AlgoSdk.Indexer.MerkleArrayProof x) => x.Path, (ref AlgoSdk.Indexer.MerkleArrayProof x, System.Byte[][] value) => x.Path = value, AlgoSdk.ArrayComparer<System.Byte[], AlgoSdk.ArrayComparer<System.Byte>>.Instance).Assign("hash-factory", (AlgoSdk.Indexer.MerkleArrayProof x) => x.HashFactory, (ref AlgoSdk.Indexer.MerkleArrayProof x, AlgoSdk.Indexer.HashFactory value) => x.HashFactory = value).Assign("tree-depth", (AlgoSdk.Indexer.MerkleArrayProof x) => x.TreeDepth, (ref AlgoSdk.Indexer.MerkleArrayProof x, AlgoSdk.Optional<System.UInt64> value) => x.TreeDepth = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct AssetHoldingsResponse
    {
        
        private static bool @__generated__IsValid = AssetHoldingsResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.AssetHoldingsResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.AssetHoldingsResponse>(false).Assign("current-round", (AlgoSdk.Indexer.AssetHoldingsResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.AssetHoldingsResponse x, System.UInt64 value) => x.CurrentRound = value).Assign("next-token", (AlgoSdk.Indexer.AssetHoldingsResponse x) => x.NextToken, (ref AlgoSdk.Indexer.AssetHoldingsResponse x, System.String value) => x.NextToken = value, AlgoSdk.StringComparer.Instance).Assign("assets", (AlgoSdk.Indexer.AssetHoldingsResponse x) => x.Assets, (ref AlgoSdk.Indexer.AssetHoldingsResponse x, AlgoSdk.Indexer.AssetHolding[] value) => x.Assets = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.AssetHolding>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct ApplicationResponse
    {
        
        private static bool @__generated__IsValid = ApplicationResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.ApplicationResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.ApplicationResponse>(false).Assign("application", (AlgoSdk.Indexer.ApplicationResponse x) => x.Application, (ref AlgoSdk.Indexer.ApplicationResponse x, AlgoSdk.Indexer.Application value) => x.Application = value).Assign("current-round", (AlgoSdk.Indexer.ApplicationResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.ApplicationResponse x, System.UInt64 value) => x.CurrentRound = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionsResponse
    {
        
        private static bool @__generated__IsValid = TransactionsResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionsResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionsResponse>(false).Assign("current-round", (AlgoSdk.Indexer.TransactionsResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.TransactionsResponse x, System.UInt64 value) => x.CurrentRound = value).Assign("next-token", (AlgoSdk.Indexer.TransactionsResponse x) => x.NextToken, (ref AlgoSdk.Indexer.TransactionsResponse x, System.String value) => x.NextToken = value, AlgoSdk.StringComparer.Instance).Assign("transactions", (AlgoSdk.Indexer.TransactionsResponse x) => x.Transactions, (ref AlgoSdk.Indexer.TransactionsResponse x, AlgoSdk.Indexer.Transaction[] value) => x.Transactions = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.Transaction>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct AccountsResponse
    {
        
        private static bool @__generated__IsValid = AccountsResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.AccountsResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.AccountsResponse>(false).Assign("accounts", (AlgoSdk.Indexer.AccountsResponse x) => x.Accounts, (ref AlgoSdk.Indexer.AccountsResponse x, AlgoSdk.Indexer.Account[] value) => x.Accounts = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.Account>.Instance).Assign("current-round", (AlgoSdk.Indexer.AccountsResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.AccountsResponse x, System.UInt64 value) => x.CurrentRound = value).Assign("next-token", (AlgoSdk.Indexer.AccountsResponse x) => x.NextToken, (ref AlgoSdk.Indexer.AccountsResponse x, System.String value) => x.NextToken = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct AssetResponse
    {
        
        private static bool @__generated__IsValid = AssetResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.AssetResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.AssetResponse>(false).Assign("asset", (AlgoSdk.Indexer.AssetResponse x) => x.Asset, (ref AlgoSdk.Indexer.AssetResponse x, AlgoSdk.Indexer.Asset value) => x.Asset = value).Assign("current-round", (AlgoSdk.Indexer.AssetResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.AssetResponse x, System.UInt64 value) => x.CurrentRound = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct AssetBalancesResponse
    {
        
        private static bool @__generated__IsValid = AssetBalancesResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.AssetBalancesResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.AssetBalancesResponse>(false).Assign("balances", (AlgoSdk.Indexer.AssetBalancesResponse x) => x.Balances, (ref AlgoSdk.Indexer.AssetBalancesResponse x, AlgoSdk.Indexer.MiniAssetHolding[] value) => x.Balances = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.MiniAssetHolding>.Instance).Assign("current-round", (AlgoSdk.Indexer.AssetBalancesResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.AssetBalancesResponse x, System.UInt64 value) => x.CurrentRound = value).Assign("next-token", (AlgoSdk.Indexer.AssetBalancesResponse x) => x.NextToken, (ref AlgoSdk.Indexer.AssetBalancesResponse x, System.String value) => x.NextToken = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct AccountResponse
    {
        
        private static bool @__generated__IsValid = AccountResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.AccountResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.AccountResponse>(false).Assign("account", (AlgoSdk.Indexer.AccountResponse x) => x.Account, (ref AlgoSdk.Indexer.AccountResponse x, AlgoSdk.Indexer.Account value) => x.Account = value).Assign("current-round", (AlgoSdk.Indexer.AccountResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.AccountResponse x, System.UInt64 value) => x.CurrentRound = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct ApplicationsResponse
    {
        
        private static bool @__generated__IsValid = ApplicationsResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.ApplicationsResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.ApplicationsResponse>(false).Assign("applications", (AlgoSdk.Indexer.ApplicationsResponse x) => x.Applications, (ref AlgoSdk.Indexer.ApplicationsResponse x, AlgoSdk.Indexer.Application[] value) => x.Applications = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.Application>.Instance).Assign("current-round", (AlgoSdk.Indexer.ApplicationsResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.ApplicationsResponse x, System.UInt64 value) => x.CurrentRound = value).Assign("next-token", (AlgoSdk.Indexer.ApplicationsResponse x) => x.NextToken, (ref AlgoSdk.Indexer.ApplicationsResponse x, System.String value) => x.NextToken = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TransactionResponse
    {
        
        private static bool @__generated__IsValid = TransactionResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TransactionResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.TransactionResponse>(false).Assign("transaction", (AlgoSdk.Indexer.TransactionResponse x) => x.Transaction, (ref AlgoSdk.Indexer.TransactionResponse x, AlgoSdk.Indexer.Transaction value) => x.Transaction = value).Assign("current-round", (AlgoSdk.Indexer.TransactionResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.TransactionResponse x, System.UInt64 value) => x.CurrentRound = value));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct ApplicationLogsResponse
    {
        
        private static bool @__generated__IsValid = ApplicationLogsResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.ApplicationLogsResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.ApplicationLogsResponse>(false).Assign("application-id", (AlgoSdk.Indexer.ApplicationLogsResponse x) => x.ApplicationId, (ref AlgoSdk.Indexer.ApplicationLogsResponse x, System.UInt64 value) => x.ApplicationId = value).Assign("current-round", (AlgoSdk.Indexer.ApplicationLogsResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.ApplicationLogsResponse x, System.UInt64 value) => x.CurrentRound = value).Assign("next-token", (AlgoSdk.Indexer.ApplicationLogsResponse x) => x.NextToken, (ref AlgoSdk.Indexer.ApplicationLogsResponse x, System.String value) => x.NextToken = value, AlgoSdk.StringComparer.Instance).Assign("log-data", (AlgoSdk.Indexer.ApplicationLogsResponse x) => x.LogData, (ref AlgoSdk.Indexer.ApplicationLogsResponse x, AlgoSdk.Indexer.ApplicationLogData[] value) => x.LogData = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.ApplicationLogData>.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct AssetsResponse
    {
        
        private static bool @__generated__IsValid = AssetsResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.AssetsResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.AssetsResponse>(false).Assign("assets", (AlgoSdk.Indexer.AssetsResponse x) => x.Assets, (ref AlgoSdk.Indexer.AssetsResponse x, AlgoSdk.Indexer.Asset[] value) => x.Assets = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.Asset>.Instance).Assign("current-round", (AlgoSdk.Indexer.AssetsResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.AssetsResponse x, System.UInt64 value) => x.CurrentRound = value).Assign("next-token", (AlgoSdk.Indexer.AssetsResponse x) => x.NextToken, (ref AlgoSdk.Indexer.AssetsResponse x, System.String value) => x.NextToken = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct ApplicationLocalStatesResponse
    {
        
        private static bool @__generated__IsValid = ApplicationLocalStatesResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.ApplicationLocalStatesResponse>(new AlgoSdk.AlgoApiObjectFormatter<AlgoSdk.Indexer.ApplicationLocalStatesResponse>(false).Assign("apps-local-states", (AlgoSdk.Indexer.ApplicationLocalStatesResponse x) => x.AppsLocalStates, (ref AlgoSdk.Indexer.ApplicationLocalStatesResponse x, AlgoSdk.Indexer.ApplicationLocalState[] value) => x.AppsLocalStates = value, AlgoSdk.ArrayComparer<AlgoSdk.Indexer.ApplicationLocalState>.Instance).Assign("current-round", (AlgoSdk.Indexer.ApplicationLocalStatesResponse x) => x.CurrentRound, (ref AlgoSdk.Indexer.ApplicationLocalStatesResponse x, System.UInt64 value) => x.CurrentRound = value).Assign("next-token", (AlgoSdk.Indexer.ApplicationLocalStatesResponse x) => x.NextToken, (ref AlgoSdk.Indexer.ApplicationLocalStatesResponse x, System.String value) => x.NextToken = value, AlgoSdk.StringComparer.Instance));
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct StateDelta
    {
        
        private static bool @__generated__IsValid = StateDelta.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.StateDelta>(new AlgoSdk.WrappedValueFormatter<AlgoSdk.Indexer.StateDelta, AlgoSdk.Indexer.EvalDeltaKeyValue[]>());
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct TealKeyValueStore
    {
        
        private static bool @__generated__IsValid = TealKeyValueStore.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.TealKeyValueStore>(new AlgoSdk.WrappedValueFormatter<AlgoSdk.Indexer.TealKeyValueStore, AlgoSdk.Indexer.TealKeyValue[]>());
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct BlockResponse
    {
        
        private static bool @__generated__IsValid = BlockResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.BlockResponse>(new AlgoSdk.WrappedValueFormatter<AlgoSdk.Indexer.BlockResponse, AlgoSdk.Indexer.Block>());
            return true;
        }
    }
}
namespace AlgoSdk.Indexer
{
    
    
    public partial struct HealthCheckResponse
    {
        
        private static bool @__generated__IsValid = HealthCheckResponse.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            AlgoSdk.AlgoApiFormatterLookup.Add<AlgoSdk.Indexer.HealthCheckResponse>(new AlgoSdk.WrappedValueFormatter<AlgoSdk.Indexer.HealthCheckResponse, AlgoSdk.Indexer.HealthCheck>());
            return true;
        }
    }
}
